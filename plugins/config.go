package plugins

import (
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"strings"

	"github.com/smartcontractkit/chainlink-relay/pkg/loop"
)

// RegistrarConfig generates contains static configuration inher
type RegistrarConfig interface {
	RegisterLOOP(loopId string, cmdName string) (func() *exec.Cmd, loop.GRPCOpts, error)
}

type registarConfig struct {
	grpcOpts           loop.GRPCOpts
	loopRegistrationFn func(loopId string) (*RegisteredLoop, error)
}

// NewRegistrarConfig creates a RegistarConfig
// loopRegistrationFn must act as a global registry function of LOOPs and must be idempotent.
// The [func() *exec.Cmd] for a LOOP should be generated by calling [RegistrarConfig.RegisterLOOP]
func NewRegistrarConfig(grpcOpts loop.GRPCOpts, loopRegistrationFn func(loopId string) (*RegisteredLoop, error)) RegistrarConfig {
	return &registarConfig{
		grpcOpts:           grpcOpts,
		loopRegistrationFn: loopRegistrationFn,
	}
}

// RegisterLOOP calls the configured loopRegistrationFn. The loopRegistrationFn must act as a global registry for LOOPs and must be idempotent.
func (pc *registarConfig) RegisterLOOP(loopID string, cmdName string) (func() *exec.Cmd, loop.GRPCOpts, error) {
	cmdFn, err := NewCmdFactory(pc.loopRegistrationFn, CmdConfig{
		ID:  loopID,
		Cmd: cmdName,
	})
	if err != nil {
		return nil, loop.GRPCOpts{}, err
	}
	return cmdFn, pc.grpcOpts, nil
}

// EnvConfig is the configuration interface between the application and the LOOP executable.
// The values are fully resolved and static and passed via the environment.
type EnvConfig interface {
	PrometheusPort() int

	// Enables trace generation and collection on the plugin
	TracingEnabled() bool

	// The logical address of the trace collector
	TracingCollectorTarget() string

	// Attributes to be added to the node's tracing context
	TracingAttributes() map[string]string
}

// SetCmdEnvFromConfig sets LOOP-specific vars in the env of the given cmd.
// It also, due to the plugin library, forwards all env vars from the host automatically.
// TODO: BCF-2662: Remove once we can use skipHostEnv in hashicorp/go-plugin v1.5.0
// This method is consumed by the host.
func SetCmdEnvFromConfig(cmd *exec.Cmd, cfg EnvConfig) {
	injectEnv := map[string]string{
		"CL_PROMETHEUS_PORT":       strconv.Itoa(cfg.PrometheusPort()),
		"TRACING_ENABLED":          strconv.FormatBool(cfg.TracingEnabled()),
		"TRACING_COLLECTOR_TARGET": cfg.TracingCollectorTarget(),
	}

	for k, v := range cfg.TracingAttributes() {
		injectEnv["TRACING_ATTRIBUTE_"+k] = v
	}

	for k, v := range injectEnv {
		cmd.Env = append(cmd.Env, k+"="+v)
	}
}

// GetEnvConfig deserializes LOOP-specific environment variables to an EnvConfig
// This method is consumed by the plugin.
func GetEnvConfig() (EnvConfig, error) {
	promPortStr := os.Getenv("CL_PROMETHEUS_PORT")
	promPort, err := strconv.Atoi(promPortStr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse CL_PROMETHEUS_PORT = %q: %w", promPortStr, err)
	}

	var tracingEnabled bool
	tracingEnabledString := os.Getenv("TRACING_ENABLED")
	if tracingEnabledString == "" {
		tracingEnabled = false
	} else {
		tracingEnabled, err = strconv.ParseBool(tracingEnabledString)
		if err != nil {
			return nil, fmt.Errorf("failed to parse TRACING_ENABLED = %q: %w", tracingEnabledString, err)
		}
	}

	tracingCollectorTarget := os.Getenv("TRACING_COLLECTOR_TARGET")

	tracingAttributes := make(map[string]string)
	for _, env := range os.Environ() {
		if strings.HasPrefix(env, "TRACING_ATTRIBUTE_") {
			tracingAttributes[strings.TrimPrefix(env, "TRACING_ATTRIBUTE_")] = os.Getenv(env)
		}
	}

	return &envConfig{
		prometheusPort:         promPort,
		tracingEnabled:         tracingEnabled,
		tracingCollectorTarget: tracingCollectorTarget,
		tracingAttributes:      tracingAttributes,
	}, nil
}

// envConfig is an implementation of EnvConfig.
type envConfig struct {
	prometheusPort         int
	tracingEnabled         bool
	tracingCollectorTarget string
	tracingAttributes      map[string]string
}

func (e *envConfig) PrometheusPort() int {
	return e.prometheusPort
}

func (e *envConfig) TracingEnabled() bool {
	return e.tracingEnabled
}

func (e *envConfig) TracingCollectorTarget() string {
	return e.tracingCollectorTarget
}

func (e *envConfig) TracingAttributes() map[string]string {
	return e.tracingAttributes
}
