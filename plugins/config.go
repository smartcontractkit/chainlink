package plugins

import (
	"fmt"
	"os"
	"os/exec"
	"strconv"

	"github.com/smartcontractkit/chainlink-relay/pkg/loop"
)

// RegistrarConfig generates contains static configuration inher
type RegistrarConfig interface {
	RegisterLOOP(loopId string, cmdName string) (func() *exec.Cmd, loop.GRPCOpts, error)
}

type registarConfig struct {
	grpcOpts           loop.GRPCOpts
	loopRegistrationFn func(loopId string) (*RegisteredLoop, error)
}

// NewRegistrarConfig creates a RegistarConfig
// loopRegistrationFn must act as a global registry function of LOOPs and must be idempotent.
// The [func() *exec.Cmd] for a LOOP should be generated by calling [RegistrarConfig.RegisterLOOP]
func NewRegistrarConfig(grpcOpts loop.GRPCOpts, loopRegistrationFn func(loopId string) (*RegisteredLoop, error)) RegistrarConfig {
	return &registarConfig{
		grpcOpts:           grpcOpts,
		loopRegistrationFn: loopRegistrationFn,
	}
}

// RegisterLOOP calls the configured loopRegistrationFn. The loopRegistrationFn must act as a global registry for LOOPs and must be idempotent.
func (pc *registarConfig) RegisterLOOP(loopID string, cmdName string) (func() *exec.Cmd, loop.GRPCOpts, error) {
	cmdFn, err := NewCmdFactory(pc.loopRegistrationFn, CmdConfig{
		ID:  loopID,
		Cmd: cmdName,
	})
	if err != nil {
		return nil, loop.GRPCOpts{}, err
	}
	return cmdFn, pc.grpcOpts, nil
}

// EnvConfig is the configuration interface between the application and the LOOP executable. The values
// are fully resolved and static and passed via the environment.
type EnvConfig interface {
	PrometheusPort() int
}

// SetCmdEnvFromConfig sets LOOP-specific vars in the env of the given cmd.
func SetCmdEnvFromConfig(cmd *exec.Cmd, cfg EnvConfig) {
	forward := func(name string) {
		if v, ok := os.LookupEnv(name); ok {
			cmd.Env = append(cmd.Env, name+"="+v)
		}
	}
	forward("CL_LOG_SQL_MIGRATIONS")
	cmd.Env = append(cmd.Env,
		"CL_PROMETHEUS_PORT="+strconv.FormatInt(int64(cfg.PrometheusPort()), 10),
	)
}

// GetEnvConfig deserializes LOOP-specific environment variables to an EnvConfig
func GetEnvConfig() (EnvConfig, error) {
	promPortStr := os.Getenv("CL_PROMETHEUS_PORT")
	promPort, err := strconv.Atoi(promPortStr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse CL_PROMETHEUS_PORT = %q: %w", promPortStr, err)
	}

	return NewEnvConfig(promPort), nil
}

// envConfig is an implementation of EnvConfig.
type envConfig struct {
	prometheusPort int
}

func NewEnvConfig(prometheusPort int) EnvConfig {
	return &envConfig{
		prometheusPort: prometheusPort,
	}
}

func (e *envConfig) PrometheusPort() int {
	return e.prometheusPort
}
