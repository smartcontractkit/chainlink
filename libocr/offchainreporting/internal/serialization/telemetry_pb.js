/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var messages_pb = require('./messages_pb.js');
goog.object.extend(proto, messages_pb);
goog.exportSymbol('proto.serialization.TelemetryAssertionViolation', null, global);
goog.exportSymbol('proto.serialization.TelemetryAssertionViolation.ECase', null, global);
goog.exportSymbol('proto.serialization.TelemetryAssertionViolationInvalidSignature', null, global);
goog.exportSymbol('proto.serialization.TelemetryMessageReceived', null, global);
goog.exportSymbol('proto.serialization.TelemetryMessageSent', null, global);
goog.exportSymbol('proto.serialization.TelemetryStateUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.TelemetryMessageReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.TelemetryMessageReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.TelemetryMessageReceived.displayName = 'proto.serialization.TelemetryMessageReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.TelemetryMessageSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.TelemetryMessageSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.TelemetryMessageSent.displayName = 'proto.serialization.TelemetryMessageSent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.TelemetryAssertionViolation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.serialization.TelemetryAssertionViolation.oneofGroups_);
};
goog.inherits(proto.serialization.TelemetryAssertionViolation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.TelemetryAssertionViolation.displayName = 'proto.serialization.TelemetryAssertionViolation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.TelemetryAssertionViolationInvalidSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.TelemetryAssertionViolationInvalidSignature.displayName = 'proto.serialization.TelemetryAssertionViolationInvalidSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.TelemetryStateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.TelemetryStateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.TelemetryStateUpdate.displayName = 'proto.serialization.TelemetryStateUpdate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.TelemetryMessageReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.TelemetryMessageReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.TelemetryMessageReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryMessageReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    configdigest: msg.getConfigdigest_asB64(),
    msg: (f = msg.getMsg()) && messages_pb.MessageWrapper.toObject(includeInstance, f),
    sender: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.TelemetryMessageReceived}
 */
proto.serialization.TelemetryMessageReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.TelemetryMessageReceived;
  return proto.serialization.TelemetryMessageReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.TelemetryMessageReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.TelemetryMessageReceived}
 */
proto.serialization.TelemetryMessageReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigdigest(value);
      break;
    case 2:
      var value = new messages_pb.MessageWrapper;
      reader.readMessage(value,messages_pb.MessageWrapper.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryMessageReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.TelemetryMessageReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.TelemetryMessageReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryMessageReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigdigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      messages_pb.MessageWrapper.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes configDigest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.TelemetryMessageReceived.prototype.getConfigdigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configDigest = 1;
 * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {string}
 */
proto.serialization.TelemetryMessageReceived.prototype.getConfigdigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigdigest()));
};


/**
 * optional bytes configDigest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryMessageReceived.prototype.getConfigdigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigdigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.TelemetryMessageReceived} returns this
 */
proto.serialization.TelemetryMessageReceived.prototype.setConfigdigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional MessageWrapper msg = 2;
 * @return {?proto.serialization.MessageWrapper}
 */
proto.serialization.TelemetryMessageReceived.prototype.getMsg = function() {
  return /** @type{?proto.serialization.MessageWrapper} */ (
    jspb.Message.getWrapperField(this, messages_pb.MessageWrapper, 2));
};


/**
 * @param {?proto.serialization.MessageWrapper|undefined} value
 * @return {!proto.serialization.TelemetryMessageReceived} returns this
*/
proto.serialization.TelemetryMessageReceived.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.TelemetryMessageReceived} returns this
 */
proto.serialization.TelemetryMessageReceived.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.TelemetryMessageReceived.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sender = 3;
 * @return {number}
 */
proto.serialization.TelemetryMessageReceived.prototype.getSender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryMessageReceived} returns this
 */
proto.serialization.TelemetryMessageReceived.prototype.setSender = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.TelemetryMessageSent.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.TelemetryMessageSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.TelemetryMessageSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryMessageSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    configdigest: msg.getConfigdigest_asB64(),
    msg: (f = msg.getMsg()) && messages_pb.MessageWrapper.toObject(includeInstance, f),
    receiver: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.TelemetryMessageSent}
 */
proto.serialization.TelemetryMessageSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.TelemetryMessageSent;
  return proto.serialization.TelemetryMessageSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.TelemetryMessageSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.TelemetryMessageSent}
 */
proto.serialization.TelemetryMessageSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigdigest(value);
      break;
    case 2:
      var value = new messages_pb.MessageWrapper;
      reader.readMessage(value,messages_pb.MessageWrapper.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryMessageSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.TelemetryMessageSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.TelemetryMessageSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryMessageSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigdigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      messages_pb.MessageWrapper.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes configDigest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.TelemetryMessageSent.prototype.getConfigdigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configDigest = 1;
 * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {string}
 */
proto.serialization.TelemetryMessageSent.prototype.getConfigdigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigdigest()));
};


/**
 * optional bytes configDigest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryMessageSent.prototype.getConfigdigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigdigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.TelemetryMessageSent} returns this
 */
proto.serialization.TelemetryMessageSent.prototype.setConfigdigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional MessageWrapper msg = 2;
 * @return {?proto.serialization.MessageWrapper}
 */
proto.serialization.TelemetryMessageSent.prototype.getMsg = function() {
  return /** @type{?proto.serialization.MessageWrapper} */ (
    jspb.Message.getWrapperField(this, messages_pb.MessageWrapper, 2));
};


/**
 * @param {?proto.serialization.MessageWrapper|undefined} value
 * @return {!proto.serialization.TelemetryMessageSent} returns this
*/
proto.serialization.TelemetryMessageSent.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.TelemetryMessageSent} returns this
 */
proto.serialization.TelemetryMessageSent.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.TelemetryMessageSent.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 receiver = 3;
 * @return {number}
 */
proto.serialization.TelemetryMessageSent.prototype.getReceiver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryMessageSent} returns this
 */
proto.serialization.TelemetryMessageSent.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.serialization.TelemetryAssertionViolation.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.serialization.TelemetryAssertionViolation.ECase = {
  E_NOT_SET: 0,
  INVALIDSIGNATURE: 1
};

/**
 * @return {proto.serialization.TelemetryAssertionViolation.ECase}
 */
proto.serialization.TelemetryAssertionViolation.prototype.getECase = function() {
  return /** @type {proto.serialization.TelemetryAssertionViolation.ECase} */(jspb.Message.computeOneofCase(this, proto.serialization.TelemetryAssertionViolation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.TelemetryAssertionViolation.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.TelemetryAssertionViolation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.TelemetryAssertionViolation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryAssertionViolation.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidsignature: (f = msg.getInvalidsignature()) && proto.serialization.TelemetryAssertionViolationInvalidSignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.TelemetryAssertionViolation}
 */
proto.serialization.TelemetryAssertionViolation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.TelemetryAssertionViolation;
  return proto.serialization.TelemetryAssertionViolation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.TelemetryAssertionViolation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.TelemetryAssertionViolation}
 */
proto.serialization.TelemetryAssertionViolation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.serialization.TelemetryAssertionViolationInvalidSignature;
      reader.readMessage(value,proto.serialization.TelemetryAssertionViolationInvalidSignature.deserializeBinaryFromReader);
      msg.setInvalidsignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryAssertionViolation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.TelemetryAssertionViolation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.TelemetryAssertionViolation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryAssertionViolation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvalidsignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.serialization.TelemetryAssertionViolationInvalidSignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional TelemetryAssertionViolationInvalidSignature invalidSignature = 1;
 * @return {?proto.serialization.TelemetryAssertionViolationInvalidSignature}
 */
proto.serialization.TelemetryAssertionViolation.prototype.getInvalidsignature = function() {
  return /** @type{?proto.serialization.TelemetryAssertionViolationInvalidSignature} */ (
    jspb.Message.getWrapperField(this, proto.serialization.TelemetryAssertionViolationInvalidSignature, 1));
};


/**
 * @param {?proto.serialization.TelemetryAssertionViolationInvalidSignature|undefined} value
 * @return {!proto.serialization.TelemetryAssertionViolation} returns this
*/
proto.serialization.TelemetryAssertionViolation.prototype.setInvalidsignature = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.serialization.TelemetryAssertionViolation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.TelemetryAssertionViolation} returns this
 */
proto.serialization.TelemetryAssertionViolation.prototype.clearInvalidsignature = function() {
  return this.setInvalidsignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.TelemetryAssertionViolation.prototype.hasInvalidsignature = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.TelemetryAssertionViolationInvalidSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.TelemetryAssertionViolationInvalidSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    configdigest: msg.getConfigdigest_asB64(),
    msg: (f = msg.getMsg()) && messages_pb.MessageWrapper.toObject(includeInstance, f),
    sender: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.TelemetryAssertionViolationInvalidSignature;
  return proto.serialization.TelemetryAssertionViolationInvalidSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.TelemetryAssertionViolationInvalidSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigdigest(value);
      break;
    case 2:
      var value = new messages_pb.MessageWrapper;
      reader.readMessage(value,messages_pb.MessageWrapper.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.TelemetryAssertionViolationInvalidSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.TelemetryAssertionViolationInvalidSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigdigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      messages_pb.MessageWrapper.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes configDigest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.getConfigdigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configDigest = 1;
 * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {string}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.getConfigdigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigdigest()));
};


/**
 * optional bytes configDigest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.getConfigdigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigdigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature} returns this
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.setConfigdigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional MessageWrapper msg = 2;
 * @return {?proto.serialization.MessageWrapper}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.getMsg = function() {
  return /** @type{?proto.serialization.MessageWrapper} */ (
    jspb.Message.getWrapperField(this, messages_pb.MessageWrapper, 2));
};


/**
 * @param {?proto.serialization.MessageWrapper|undefined} value
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature} returns this
*/
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature} returns this
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sender = 3;
 * @return {number}
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.getSender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryAssertionViolationInvalidSignature} returns this
 */
proto.serialization.TelemetryAssertionViolationInvalidSignature.prototype.setSender = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.TelemetryStateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.TelemetryStateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.TelemetryStateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryStateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    configdigest: msg.getConfigdigest_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.TelemetryStateUpdate}
 */
proto.serialization.TelemetryStateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.TelemetryStateUpdate;
  return proto.serialization.TelemetryStateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.TelemetryStateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.TelemetryStateUpdate}
 */
proto.serialization.TelemetryStateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigdigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryStateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.TelemetryStateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.TelemetryStateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.TelemetryStateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigdigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes configDigest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.TelemetryStateUpdate.prototype.getConfigdigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configDigest = 1;
 * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {string}
 */
proto.serialization.TelemetryStateUpdate.prototype.getConfigdigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigdigest()));
};


/**
 * optional bytes configDigest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {!Uint8Array}
 */
proto.serialization.TelemetryStateUpdate.prototype.getConfigdigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigdigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.TelemetryStateUpdate} returns this
 */
proto.serialization.TelemetryStateUpdate.prototype.setConfigdigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.serialization.TelemetryStateUpdate.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryStateUpdate} returns this
 */
proto.serialization.TelemetryStateUpdate.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.serialization.TelemetryStateUpdate.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryStateUpdate} returns this
 */
proto.serialization.TelemetryStateUpdate.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 time = 4;
 * @return {number}
 */
proto.serialization.TelemetryStateUpdate.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.TelemetryStateUpdate} returns this
 */
proto.serialization.TelemetryStateUpdate.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.serialization);
