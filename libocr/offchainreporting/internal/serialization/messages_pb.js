/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.serialization.ContractReport', null, global);
goog.exportSymbol('proto.serialization.ContractReportWithSignatures', null, global);
goog.exportSymbol('proto.serialization.MessageFinal', null, global);
goog.exportSymbol('proto.serialization.MessageFinalEcho', null, global);
goog.exportSymbol('proto.serialization.MessageNewEpoch', null, global);
goog.exportSymbol('proto.serialization.MessageObserve', null, global);
goog.exportSymbol('proto.serialization.MessageObserveReq', null, global);
goog.exportSymbol('proto.serialization.MessageReport', null, global);
goog.exportSymbol('proto.serialization.MessageReportReq', null, global);
goog.exportSymbol('proto.serialization.MessageWrapper', null, global);
goog.exportSymbol('proto.serialization.MessageWrapper.MsgCase', null, global);
goog.exportSymbol('proto.serialization.Observation', null, global);
goog.exportSymbol('proto.serialization.ObservationValue', null, global);
goog.exportSymbol('proto.serialization.OracleValue', null, global);
goog.exportSymbol('proto.serialization.ReportingContext', null, global);
goog.exportSymbol('proto.serialization.Signature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageNewEpoch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageNewEpoch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageNewEpoch.displayName = 'proto.serialization.MessageNewEpoch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageObserveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageObserveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageObserveReq.displayName = 'proto.serialization.MessageObserveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.ReportingContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.ReportingContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.ReportingContext.displayName = 'proto.serialization.ReportingContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.ObservationValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.ObservationValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.ObservationValue.displayName = 'proto.serialization.ObservationValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.Observation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.Observation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.Observation.displayName = 'proto.serialization.Observation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageObserve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageObserve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageObserve.displayName = 'proto.serialization.MessageObserve';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageReportReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serialization.MessageReportReq.repeatedFields_, null);
};
goog.inherits(proto.serialization.MessageReportReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageReportReq.displayName = 'proto.serialization.MessageReportReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.Signature.displayName = 'proto.serialization.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.OracleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.OracleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.OracleValue.displayName = 'proto.serialization.OracleValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.ContractReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serialization.ContractReport.repeatedFields_, null);
};
goog.inherits(proto.serialization.ContractReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.ContractReport.displayName = 'proto.serialization.ContractReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageReport.displayName = 'proto.serialization.MessageReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.ContractReportWithSignatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serialization.ContractReportWithSignatures.repeatedFields_, null);
};
goog.inherits(proto.serialization.ContractReportWithSignatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.ContractReportWithSignatures.displayName = 'proto.serialization.ContractReportWithSignatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageFinal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageFinal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageFinal.displayName = 'proto.serialization.MessageFinal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageFinalEcho = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serialization.MessageFinalEcho, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageFinalEcho.displayName = 'proto.serialization.MessageFinalEcho';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serialization.MessageWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.serialization.MessageWrapper.oneofGroups_);
};
goog.inherits(proto.serialization.MessageWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.serialization.MessageWrapper.displayName = 'proto.serialization.MessageWrapper';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageNewEpoch.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageNewEpoch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageNewEpoch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageNewEpoch.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageNewEpoch}
 */
proto.serialization.MessageNewEpoch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageNewEpoch;
  return proto.serialization.MessageNewEpoch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageNewEpoch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageNewEpoch}
 */
proto.serialization.MessageNewEpoch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageNewEpoch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageNewEpoch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageNewEpoch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageNewEpoch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.serialization.MessageNewEpoch.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageNewEpoch} returns this
 */
proto.serialization.MessageNewEpoch.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageObserveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageObserveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageObserveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageObserveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageObserveReq}
 */
proto.serialization.MessageObserveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageObserveReq;
  return proto.serialization.MessageObserveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageObserveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageObserveReq}
 */
proto.serialization.MessageObserveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageObserveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageObserveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageObserveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageObserveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 round = 1;
 * @return {number}
 */
proto.serialization.MessageObserveReq.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageObserveReq} returns this
 */
proto.serialization.MessageObserveReq.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.serialization.MessageObserveReq.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageObserveReq} returns this
 */
proto.serialization.MessageObserveReq.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.ReportingContext.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.ReportingContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.ReportingContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ReportingContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    configdigest: msg.getConfigdigest_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.ReportingContext}
 */
proto.serialization.ReportingContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.ReportingContext;
  return proto.serialization.ReportingContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.ReportingContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.ReportingContext}
 */
proto.serialization.ReportingContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigdigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.ReportingContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.ReportingContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.ReportingContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ReportingContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigdigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes configDigest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.ReportingContext.prototype.getConfigdigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes configDigest = 1;
 * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {string}
 */
proto.serialization.ReportingContext.prototype.getConfigdigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigdigest()));
};


/**
 * optional bytes configDigest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getConfigdigest()`
 * @return {!Uint8Array}
 */
proto.serialization.ReportingContext.prototype.getConfigdigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigdigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.ReportingContext} returns this
 */
proto.serialization.ReportingContext.prototype.setConfigdigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.serialization.ReportingContext.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.ReportingContext} returns this
 */
proto.serialization.ReportingContext.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.serialization.ReportingContext.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.ReportingContext} returns this
 */
proto.serialization.ReportingContext.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.ObservationValue.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.ObservationValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.ObservationValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ObservationValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.ObservationValue}
 */
proto.serialization.ObservationValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.ObservationValue;
  return proto.serialization.ObservationValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.ObservationValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.ObservationValue}
 */
proto.serialization.ObservationValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.ObservationValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.ObservationValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.ObservationValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ObservationValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.ObservationValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.serialization.ObservationValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.serialization.ObservationValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.ObservationValue} returns this
 */
proto.serialization.ObservationValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.Observation.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.Observation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.Observation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.Observation.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctx: (f = msg.getCtx()) && proto.serialization.ReportingContext.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.serialization.ObservationValue.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    oracleid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.Observation}
 */
proto.serialization.Observation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.Observation;
  return proto.serialization.Observation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.Observation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.Observation}
 */
proto.serialization.Observation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.serialization.ReportingContext;
      reader.readMessage(value,proto.serialization.ReportingContext.deserializeBinaryFromReader);
      msg.setCtx(value);
      break;
    case 2:
      var value = new proto.serialization.ObservationValue;
      reader.readMessage(value,proto.serialization.ObservationValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.Observation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.Observation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.Observation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.Observation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.serialization.ReportingContext.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.serialization.ObservationValue.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOracleid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional ReportingContext ctx = 1;
 * @return {?proto.serialization.ReportingContext}
 */
proto.serialization.Observation.prototype.getCtx = function() {
  return /** @type{?proto.serialization.ReportingContext} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ReportingContext, 1));
};


/**
 * @param {?proto.serialization.ReportingContext|undefined} value
 * @return {!proto.serialization.Observation} returns this
*/
proto.serialization.Observation.prototype.setCtx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.Observation} returns this
 */
proto.serialization.Observation.prototype.clearCtx = function() {
  return this.setCtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.Observation.prototype.hasCtx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObservationValue value = 2;
 * @return {?proto.serialization.ObservationValue}
 */
proto.serialization.Observation.prototype.getValue = function() {
  return /** @type{?proto.serialization.ObservationValue} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ObservationValue, 2));
};


/**
 * @param {?proto.serialization.ObservationValue|undefined} value
 * @return {!proto.serialization.Observation} returns this
*/
proto.serialization.Observation.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.Observation} returns this
 */
proto.serialization.Observation.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.Observation.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.Observation.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.serialization.Observation.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.serialization.Observation.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.Observation} returns this
 */
proto.serialization.Observation.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 oracleID = 4;
 * @return {number}
 */
proto.serialization.Observation.prototype.getOracleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.Observation} returns this
 */
proto.serialization.Observation.prototype.setOracleid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageObserve.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageObserve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageObserve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageObserve.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    obs: (f = msg.getObs()) && proto.serialization.Observation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageObserve}
 */
proto.serialization.MessageObserve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageObserve;
  return proto.serialization.MessageObserve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageObserve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageObserve}
 */
proto.serialization.MessageObserve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 3:
      var value = new proto.serialization.Observation;
      reader.readMessage(value,proto.serialization.Observation.deserializeBinaryFromReader);
      msg.setObs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageObserve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageObserve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageObserve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageObserve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getObs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.serialization.Observation.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.serialization.MessageObserve.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageObserve} returns this
 */
proto.serialization.MessageObserve.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 round = 2;
 * @return {number}
 */
proto.serialization.MessageObserve.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageObserve} returns this
 */
proto.serialization.MessageObserve.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Observation obs = 3;
 * @return {?proto.serialization.Observation}
 */
proto.serialization.MessageObserve.prototype.getObs = function() {
  return /** @type{?proto.serialization.Observation} */ (
    jspb.Message.getWrapperField(this, proto.serialization.Observation, 3));
};


/**
 * @param {?proto.serialization.Observation|undefined} value
 * @return {!proto.serialization.MessageObserve} returns this
*/
proto.serialization.MessageObserve.prototype.setObs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageObserve} returns this
 */
proto.serialization.MessageObserve.prototype.clearObs = function() {
  return this.setObs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageObserve.prototype.hasObs = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serialization.MessageReportReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageReportReq.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageReportReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageReportReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageReportReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    observationsList: jspb.Message.toObjectList(msg.getObservationsList(),
    proto.serialization.Observation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageReportReq}
 */
proto.serialization.MessageReportReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageReportReq;
  return proto.serialization.MessageReportReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageReportReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageReportReq}
 */
proto.serialization.MessageReportReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = new proto.serialization.Observation;
      reader.readMessage(value,proto.serialization.Observation.deserializeBinaryFromReader);
      msg.addObservations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageReportReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageReportReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageReportReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageReportReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getObservationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.serialization.Observation.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 round = 1;
 * @return {number}
 */
proto.serialization.MessageReportReq.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageReportReq} returns this
 */
proto.serialization.MessageReportReq.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.serialization.MessageReportReq.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageReportReq} returns this
 */
proto.serialization.MessageReportReq.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Observation observations = 3;
 * @return {!Array<!proto.serialization.Observation>}
 */
proto.serialization.MessageReportReq.prototype.getObservationsList = function() {
  return /** @type{!Array<!proto.serialization.Observation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.serialization.Observation, 3));
};


/**
 * @param {!Array<!proto.serialization.Observation>} value
 * @return {!proto.serialization.MessageReportReq} returns this
*/
proto.serialization.MessageReportReq.prototype.setObservationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.serialization.Observation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.serialization.Observation}
 */
proto.serialization.MessageReportReq.prototype.addObservations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.serialization.Observation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.serialization.MessageReportReq} returns this
 */
proto.serialization.MessageReportReq.prototype.clearObservationsList = function() {
  return this.setObservationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.Signature}
 */
proto.serialization.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.Signature;
  return proto.serialization.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.Signature}
 */
proto.serialization.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.serialization.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.serialization.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.Signature} returns this
 */
proto.serialization.Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.OracleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.OracleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.OracleValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.OracleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && proto.serialization.ObservationValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.OracleValue}
 */
proto.serialization.OracleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.OracleValue;
  return proto.serialization.OracleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.OracleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.OracleValue}
 */
proto.serialization.OracleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleid(value);
      break;
    case 2:
      var value = new proto.serialization.ObservationValue;
      reader.readMessage(value,proto.serialization.ObservationValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.OracleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.OracleValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.OracleValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.OracleValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.serialization.ObservationValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 oracleID = 1;
 * @return {number}
 */
proto.serialization.OracleValue.prototype.getOracleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.OracleValue} returns this
 */
proto.serialization.OracleValue.prototype.setOracleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ObservationValue value = 2;
 * @return {?proto.serialization.ObservationValue}
 */
proto.serialization.OracleValue.prototype.getValue = function() {
  return /** @type{?proto.serialization.ObservationValue} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ObservationValue, 2));
};


/**
 * @param {?proto.serialization.ObservationValue|undefined} value
 * @return {!proto.serialization.OracleValue} returns this
*/
proto.serialization.OracleValue.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.OracleValue} returns this
 */
proto.serialization.OracleValue.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.OracleValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serialization.ContractReport.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.ContractReport.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.ContractReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.ContractReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ContractReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctx: (f = msg.getCtx()) && proto.serialization.ReportingContext.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.serialization.OracleValue.toObject, includeInstance),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.ContractReport}
 */
proto.serialization.ContractReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.ContractReport;
  return proto.serialization.ContractReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.ContractReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.ContractReport}
 */
proto.serialization.ContractReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.serialization.ReportingContext;
      reader.readMessage(value,proto.serialization.ReportingContext.deserializeBinaryFromReader);
      msg.setCtx(value);
      break;
    case 2:
      var value = new proto.serialization.OracleValue;
      reader.readMessage(value,proto.serialization.OracleValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.ContractReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.ContractReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.ContractReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ContractReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.serialization.ReportingContext.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.serialization.OracleValue.serializeBinaryToWriter
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional ReportingContext ctx = 1;
 * @return {?proto.serialization.ReportingContext}
 */
proto.serialization.ContractReport.prototype.getCtx = function() {
  return /** @type{?proto.serialization.ReportingContext} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ReportingContext, 1));
};


/**
 * @param {?proto.serialization.ReportingContext|undefined} value
 * @return {!proto.serialization.ContractReport} returns this
*/
proto.serialization.ContractReport.prototype.setCtx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.ContractReport} returns this
 */
proto.serialization.ContractReport.prototype.clearCtx = function() {
  return this.setCtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.ContractReport.prototype.hasCtx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated OracleValue values = 2;
 * @return {!Array<!proto.serialization.OracleValue>}
 */
proto.serialization.ContractReport.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.serialization.OracleValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.serialization.OracleValue, 2));
};


/**
 * @param {!Array<!proto.serialization.OracleValue>} value
 * @return {!proto.serialization.ContractReport} returns this
*/
proto.serialization.ContractReport.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.serialization.OracleValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.serialization.OracleValue}
 */
proto.serialization.ContractReport.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.serialization.OracleValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.serialization.ContractReport} returns this
 */
proto.serialization.ContractReport.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.serialization.ContractReport.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.serialization.ContractReport.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http: * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.serialization.ContractReport.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.serialization.ContractReport} returns this
 */
proto.serialization.ContractReport.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageReport.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractreport: (f = msg.getContractreport()) && proto.serialization.ContractReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageReport}
 */
proto.serialization.MessageReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageReport;
  return proto.serialization.MessageReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageReport}
 */
proto.serialization.MessageReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 3:
      var value = new proto.serialization.ContractReport;
      reader.readMessage(value,proto.serialization.ContractReport.deserializeBinaryFromReader);
      msg.setContractreport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getContractreport();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.serialization.ContractReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.serialization.MessageReport.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageReport} returns this
 */
proto.serialization.MessageReport.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 round = 2;
 * @return {number}
 */
proto.serialization.MessageReport.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageReport} returns this
 */
proto.serialization.MessageReport.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ContractReport contractReport = 3;
 * @return {?proto.serialization.ContractReport}
 */
proto.serialization.MessageReport.prototype.getContractreport = function() {
  return /** @type{?proto.serialization.ContractReport} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ContractReport, 3));
};


/**
 * @param {?proto.serialization.ContractReport|undefined} value
 * @return {!proto.serialization.MessageReport} returns this
*/
proto.serialization.MessageReport.prototype.setContractreport = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageReport} returns this
 */
proto.serialization.MessageReport.prototype.clearContractreport = function() {
  return this.setContractreport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageReport.prototype.hasContractreport = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serialization.ContractReportWithSignatures.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.ContractReportWithSignatures.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.ContractReportWithSignatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.ContractReportWithSignatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ContractReportWithSignatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractreport: (f = msg.getContractreport()) && proto.serialization.ContractReport.toObject(includeInstance, f),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.serialization.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.ContractReportWithSignatures}
 */
proto.serialization.ContractReportWithSignatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.ContractReportWithSignatures;
  return proto.serialization.ContractReportWithSignatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.ContractReportWithSignatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.ContractReportWithSignatures}
 */
proto.serialization.ContractReportWithSignatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.serialization.ContractReport;
      reader.readMessage(value,proto.serialization.ContractReport.deserializeBinaryFromReader);
      msg.setContractreport(value);
      break;
    case 2:
      var value = new proto.serialization.Signature;
      reader.readMessage(value,proto.serialization.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.ContractReportWithSignatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.ContractReportWithSignatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.ContractReportWithSignatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.ContractReportWithSignatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractreport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.serialization.ContractReport.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.serialization.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContractReport contractReport = 1;
 * @return {?proto.serialization.ContractReport}
 */
proto.serialization.ContractReportWithSignatures.prototype.getContractreport = function() {
  return /** @type{?proto.serialization.ContractReport} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ContractReport, 1));
};


/**
 * @param {?proto.serialization.ContractReport|undefined} value
 * @return {!proto.serialization.ContractReportWithSignatures} returns this
*/
proto.serialization.ContractReportWithSignatures.prototype.setContractreport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.ContractReportWithSignatures} returns this
 */
proto.serialization.ContractReportWithSignatures.prototype.clearContractreport = function() {
  return this.setContractreport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.ContractReportWithSignatures.prototype.hasContractreport = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Signature signatures = 2;
 * @return {!Array<!proto.serialization.Signature>}
 */
proto.serialization.ContractReportWithSignatures.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.serialization.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.serialization.Signature, 2));
};


/**
 * @param {!Array<!proto.serialization.Signature>} value
 * @return {!proto.serialization.ContractReportWithSignatures} returns this
*/
proto.serialization.ContractReportWithSignatures.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.serialization.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.serialization.Signature}
 */
proto.serialization.ContractReportWithSignatures.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.serialization.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.serialization.ContractReportWithSignatures} returns this
 */
proto.serialization.ContractReportWithSignatures.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageFinal.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageFinal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageFinal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageFinal.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    leader: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    report: (f = msg.getReport()) && proto.serialization.ContractReportWithSignatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageFinal}
 */
proto.serialization.MessageFinal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageFinal;
  return proto.serialization.MessageFinal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageFinal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageFinal}
 */
proto.serialization.MessageFinal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeader(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = new proto.serialization.ContractReportWithSignatures;
      reader.readMessage(value,proto.serialization.ContractReportWithSignatures.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageFinal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageFinal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageFinal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageFinal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLeader();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.serialization.ContractReportWithSignatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.serialization.MessageFinal.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageFinal} returns this
 */
proto.serialization.MessageFinal.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 leader = 2;
 * @return {number}
 */
proto.serialization.MessageFinal.prototype.getLeader = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageFinal} returns this
 */
proto.serialization.MessageFinal.prototype.setLeader = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.serialization.MessageFinal.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.serialization.MessageFinal} returns this
 */
proto.serialization.MessageFinal.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ContractReportWithSignatures report = 4;
 * @return {?proto.serialization.ContractReportWithSignatures}
 */
proto.serialization.MessageFinal.prototype.getReport = function() {
  return /** @type{?proto.serialization.ContractReportWithSignatures} */ (
    jspb.Message.getWrapperField(this, proto.serialization.ContractReportWithSignatures, 4));
};


/**
 * @param {?proto.serialization.ContractReportWithSignatures|undefined} value
 * @return {!proto.serialization.MessageFinal} returns this
*/
proto.serialization.MessageFinal.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageFinal} returns this
 */
proto.serialization.MessageFinal.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageFinal.prototype.hasReport = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageFinalEcho.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageFinalEcho.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageFinalEcho} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageFinalEcho.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_final: (f = msg.getFinal()) && proto.serialization.MessageFinal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageFinalEcho}
 */
proto.serialization.MessageFinalEcho.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageFinalEcho;
  return proto.serialization.MessageFinalEcho.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageFinalEcho} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageFinalEcho}
 */
proto.serialization.MessageFinalEcho.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.serialization.MessageFinal;
      reader.readMessage(value,proto.serialization.MessageFinal.deserializeBinaryFromReader);
      msg.setFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageFinalEcho.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageFinalEcho.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageFinalEcho} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageFinalEcho.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.serialization.MessageFinal.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageFinal Final = 1;
 * @return {?proto.serialization.MessageFinal}
 */
proto.serialization.MessageFinalEcho.prototype.getFinal = function() {
  return /** @type{?proto.serialization.MessageFinal} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageFinal, 1));
};


/**
 * @param {?proto.serialization.MessageFinal|undefined} value
 * @return {!proto.serialization.MessageFinalEcho} returns this
*/
proto.serialization.MessageFinalEcho.prototype.setFinal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageFinalEcho} returns this
 */
proto.serialization.MessageFinalEcho.prototype.clearFinal = function() {
  return this.setFinal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageFinalEcho.prototype.hasFinal = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.serialization.MessageWrapper.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.serialization.MessageWrapper.MsgCase = {
  MSG_NOT_SET: 0,
  MESSAGENEWEPOCH: 2,
  MESSAGEOBSERVEREQ: 3,
  MESSAGEOBSERVE: 4,
  MESSAGEREPORTREQ: 5,
  MESSAGEREPORT: 6,
  MESSAGEFINAL: 7,
  MESSAGEFINALECHO: 8
};

/**
 * @return {proto.serialization.MessageWrapper.MsgCase}
 */
proto.serialization.MessageWrapper.prototype.getMsgCase = function() {
  return /** @type {proto.serialization.MessageWrapper.MsgCase} */(jspb.Message.computeOneofCase(this, proto.serialization.MessageWrapper.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http: * @return {!Object}
 */
proto.serialization.MessageWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.serialization.MessageWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http: * @param {!proto.serialization.MessageWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagenewepoch: (f = msg.getMessagenewepoch()) && proto.serialization.MessageNewEpoch.toObject(includeInstance, f),
    messageobservereq: (f = msg.getMessageobservereq()) && proto.serialization.MessageObserveReq.toObject(includeInstance, f),
    messageobserve: (f = msg.getMessageobserve()) && proto.serialization.MessageObserve.toObject(includeInstance, f),
    messagereportreq: (f = msg.getMessagereportreq()) && proto.serialization.MessageReportReq.toObject(includeInstance, f),
    messagereport: (f = msg.getMessagereport()) && proto.serialization.MessageReport.toObject(includeInstance, f),
    messagefinal: (f = msg.getMessagefinal()) && proto.serialization.MessageFinal.toObject(includeInstance, f),
    messagefinalecho: (f = msg.getMessagefinalecho()) && proto.serialization.MessageFinalEcho.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serialization.MessageWrapper}
 */
proto.serialization.MessageWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serialization.MessageWrapper;
  return proto.serialization.MessageWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serialization.MessageWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serialization.MessageWrapper}
 */
proto.serialization.MessageWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.serialization.MessageNewEpoch;
      reader.readMessage(value,proto.serialization.MessageNewEpoch.deserializeBinaryFromReader);
      msg.setMessagenewepoch(value);
      break;
    case 3:
      var value = new proto.serialization.MessageObserveReq;
      reader.readMessage(value,proto.serialization.MessageObserveReq.deserializeBinaryFromReader);
      msg.setMessageobservereq(value);
      break;
    case 4:
      var value = new proto.serialization.MessageObserve;
      reader.readMessage(value,proto.serialization.MessageObserve.deserializeBinaryFromReader);
      msg.setMessageobserve(value);
      break;
    case 5:
      var value = new proto.serialization.MessageReportReq;
      reader.readMessage(value,proto.serialization.MessageReportReq.deserializeBinaryFromReader);
      msg.setMessagereportreq(value);
      break;
    case 6:
      var value = new proto.serialization.MessageReport;
      reader.readMessage(value,proto.serialization.MessageReport.deserializeBinaryFromReader);
      msg.setMessagereport(value);
      break;
    case 7:
      var value = new proto.serialization.MessageFinal;
      reader.readMessage(value,proto.serialization.MessageFinal.deserializeBinaryFromReader);
      msg.setMessagefinal(value);
      break;
    case 8:
      var value = new proto.serialization.MessageFinalEcho;
      reader.readMessage(value,proto.serialization.MessageFinalEcho.deserializeBinaryFromReader);
      msg.setMessagefinalecho(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serialization.MessageWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serialization.MessageWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serialization.MessageWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.serialization.MessageWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagenewepoch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.serialization.MessageNewEpoch.serializeBinaryToWriter
    );
  }
  f = message.getMessageobservereq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.serialization.MessageObserveReq.serializeBinaryToWriter
    );
  }
  f = message.getMessageobserve();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.serialization.MessageObserve.serializeBinaryToWriter
    );
  }
  f = message.getMessagereportreq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.serialization.MessageReportReq.serializeBinaryToWriter
    );
  }
  f = message.getMessagereport();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.serialization.MessageReport.serializeBinaryToWriter
    );
  }
  f = message.getMessagefinal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.serialization.MessageFinal.serializeBinaryToWriter
    );
  }
  f = message.getMessagefinalecho();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.serialization.MessageFinalEcho.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageNewEpoch messageNewEpoch = 2;
 * @return {?proto.serialization.MessageNewEpoch}
 */
proto.serialization.MessageWrapper.prototype.getMessagenewepoch = function() {
  return /** @type{?proto.serialization.MessageNewEpoch} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageNewEpoch, 2));
};


/**
 * @param {?proto.serialization.MessageNewEpoch|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessagenewepoch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessagenewepoch = function() {
  return this.setMessagenewepoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessagenewepoch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageObserveReq messageObserveReq = 3;
 * @return {?proto.serialization.MessageObserveReq}
 */
proto.serialization.MessageWrapper.prototype.getMessageobservereq = function() {
  return /** @type{?proto.serialization.MessageObserveReq} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageObserveReq, 3));
};


/**
 * @param {?proto.serialization.MessageObserveReq|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessageobservereq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessageobservereq = function() {
  return this.setMessageobservereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessageobservereq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MessageObserve messageObserve = 4;
 * @return {?proto.serialization.MessageObserve}
 */
proto.serialization.MessageWrapper.prototype.getMessageobserve = function() {
  return /** @type{?proto.serialization.MessageObserve} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageObserve, 4));
};


/**
 * @param {?proto.serialization.MessageObserve|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessageobserve = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessageobserve = function() {
  return this.setMessageobserve(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessageobserve = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MessageReportReq messageReportReq = 5;
 * @return {?proto.serialization.MessageReportReq}
 */
proto.serialization.MessageWrapper.prototype.getMessagereportreq = function() {
  return /** @type{?proto.serialization.MessageReportReq} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageReportReq, 5));
};


/**
 * @param {?proto.serialization.MessageReportReq|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessagereportreq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessagereportreq = function() {
  return this.setMessagereportreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessagereportreq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MessageReport messageReport = 6;
 * @return {?proto.serialization.MessageReport}
 */
proto.serialization.MessageWrapper.prototype.getMessagereport = function() {
  return /** @type{?proto.serialization.MessageReport} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageReport, 6));
};


/**
 * @param {?proto.serialization.MessageReport|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessagereport = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessagereport = function() {
  return this.setMessagereport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessagereport = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MessageFinal messageFinal = 7;
 * @return {?proto.serialization.MessageFinal}
 */
proto.serialization.MessageWrapper.prototype.getMessagefinal = function() {
  return /** @type{?proto.serialization.MessageFinal} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageFinal, 7));
};


/**
 * @param {?proto.serialization.MessageFinal|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessagefinal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessagefinal = function() {
  return this.setMessagefinal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessagefinal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MessageFinalEcho messageFinalEcho = 8;
 * @return {?proto.serialization.MessageFinalEcho}
 */
proto.serialization.MessageWrapper.prototype.getMessagefinalecho = function() {
  return /** @type{?proto.serialization.MessageFinalEcho} */ (
    jspb.Message.getWrapperField(this, proto.serialization.MessageFinalEcho, 8));
};


/**
 * @param {?proto.serialization.MessageFinalEcho|undefined} value
 * @return {!proto.serialization.MessageWrapper} returns this
*/
proto.serialization.MessageWrapper.prototype.setMessagefinalecho = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.serialization.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.serialization.MessageWrapper} returns this
 */
proto.serialization.MessageWrapper.prototype.clearMessagefinalecho = function() {
  return this.setMessagefinalecho(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.serialization.MessageWrapper.prototype.hasMessagefinalecho = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.serialization);
