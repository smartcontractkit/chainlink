// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	assets "github.com/smartcontractkit/chainlink/core/assets"
	audit "github.com/smartcontractkit/chainlink/core/logger/audit"

	big "math/big"

	commontypes "github.com/smartcontractkit/libocr/commontypes"

	config "github.com/smartcontractkit/chainlink/core/config"

	dialects "github.com/smartcontractkit/chainlink/core/store/dialects"

	ethkey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/ethkey"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"

	net "net"

	networking "github.com/smartcontractkit/libocr/networking"

	p2pkey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/p2pkey"

	sessions "github.com/gin-gonic/contrib/sessions"

	time "time"

	url "net/url"

	utils "github.com/smartcontractkit/chainlink/core/utils"

	uuid "github.com/satori/go.uuid"

	zapcore "go.uber.org/zap/zapcore"
)

// GeneralConfig is an autogenerated mock type for the GeneralConfig type
type GeneralConfig struct {
	mock.Mock
}

// AdvisoryLockCheckInterval provides a mock function with given fields:
func (_m *GeneralConfig) AdvisoryLockCheckInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// AdvisoryLockID provides a mock function with given fields:
func (_m *GeneralConfig) AdvisoryLockID() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// AllowOrigins provides a mock function with given fields:
func (_m *GeneralConfig) AllowOrigins() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AppID provides a mock function with given fields:
func (_m *GeneralConfig) AppID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// AuditLoggerEnabled provides a mock function with given fields:
func (_m *GeneralConfig) AuditLoggerEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuditLoggerEnvironment provides a mock function with given fields:
func (_m *GeneralConfig) AuditLoggerEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuditLoggerForwardToUrl provides a mock function with given fields:
func (_m *GeneralConfig) AuditLoggerForwardToUrl() (models.URL, error) {
	ret := _m.Called()

	var r0 models.URL
	if rf, ok := ret.Get(0).(func() models.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.URL)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditLoggerHeaders provides a mock function with given fields:
func (_m *GeneralConfig) AuditLoggerHeaders() (audit.ServiceHeaders, error) {
	ret := _m.Called()

	var r0 audit.ServiceHeaders
	if rf, ok := ret.Get(0).(func() audit.ServiceHeaders); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(audit.ServiceHeaders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditLoggerJsonWrapperKey provides a mock function with given fields:
func (_m *GeneralConfig) AuditLoggerJsonWrapperKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuthenticatedRateLimit provides a mock function with given fields:
func (_m *GeneralConfig) AuthenticatedRateLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// AuthenticatedRateLimitPeriod provides a mock function with given fields:
func (_m *GeneralConfig) AuthenticatedRateLimitPeriod() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofBlockProfileRate provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofBlockProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofCPUProfileRate provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofCPUProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofEnabled provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AutoPprofGatherDuration provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofGatherDuration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofGatherTraceDuration provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofGatherTraceDuration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofGoroutineThreshold provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofGoroutineThreshold() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofMaxProfileSize provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofMaxProfileSize() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// AutoPprofMemProfileRate provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofMemProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofMemThreshold provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofMemThreshold() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// AutoPprofMutexProfileFraction provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofMutexProfileFraction() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofPollInterval provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofPollInterval() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofProfileRoot provides a mock function with given fields:
func (_m *GeneralConfig) AutoPprofProfileRoot() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BlockBackfillDepth provides a mock function with given fields:
func (_m *GeneralConfig) BlockBackfillDepth() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BlockBackfillSkip provides a mock function with given fields:
func (_m *GeneralConfig) BlockBackfillSkip() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BridgeResponseURL provides a mock function with given fields:
func (_m *GeneralConfig) BridgeResponseURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// CertFile provides a mock function with given fields:
func (_m *GeneralConfig) CertFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatabaseBackupDir provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseBackupDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatabaseBackupFrequency provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseBackupFrequency() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseBackupMode provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseBackupMode() config.DatabaseBackupMode {
	ret := _m.Called()

	var r0 config.DatabaseBackupMode
	if rf, ok := ret.Get(0).(func() config.DatabaseBackupMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.DatabaseBackupMode)
	}

	return r0
}

// DatabaseBackupOnVersionUpgrade provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseBackupOnVersionUpgrade() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DatabaseBackupURL provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseBackupURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// DatabaseDefaultIdleInTxSessionTimeout provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseDefaultIdleInTxSessionTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseDefaultLockTimeout provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseDefaultLockTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseDefaultQueryTimeout provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseDefaultQueryTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseListenerMaxReconnectDuration provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseListenerMaxReconnectDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseListenerMinReconnectInterval provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseListenerMinReconnectInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseLockingMode provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseLockingMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatabaseURL provides a mock function with given fields:
func (_m *GeneralConfig) DatabaseURL() url.URL {
	ret := _m.Called()

	var r0 url.URL
	if rf, ok := ret.Get(0).(func() url.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	return r0
}

// DefaultChainID provides a mock function with given fields:
func (_m *GeneralConfig) DefaultChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// DefaultHTTPLimit provides a mock function with given fields:
func (_m *GeneralConfig) DefaultHTTPLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DefaultHTTPTimeout provides a mock function with given fields:
func (_m *GeneralConfig) DefaultHTTPTimeout() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// DefaultLogLevel provides a mock function with given fields:
func (_m *GeneralConfig) DefaultLogLevel() zapcore.Level {
	ret := _m.Called()

	var r0 zapcore.Level
	if rf, ok := ret.Get(0).(func() zapcore.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zapcore.Level)
	}

	return r0
}

// Dev provides a mock function with given fields:
func (_m *GeneralConfig) Dev() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVMEnabled provides a mock function with given fields:
func (_m *GeneralConfig) EVMEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVMRPCEnabled provides a mock function with given fields:
func (_m *GeneralConfig) EVMRPCEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EthereumHTTPURL provides a mock function with given fields:
func (_m *GeneralConfig) EthereumHTTPURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// EthereumNodes provides a mock function with given fields:
func (_m *GeneralConfig) EthereumNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EthereumSecondaryURLs provides a mock function with given fields:
func (_m *GeneralConfig) EthereumSecondaryURLs() []url.URL {
	ret := _m.Called()

	var r0 []url.URL
	if rf, ok := ret.Get(0).(func() []url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]url.URL)
		}
	}

	return r0
}

// EthereumURL provides a mock function with given fields:
func (_m *GeneralConfig) EthereumURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExplorerAccessKey provides a mock function with given fields:
func (_m *GeneralConfig) ExplorerAccessKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExplorerSecret provides a mock function with given fields:
func (_m *GeneralConfig) ExplorerSecret() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExplorerURL provides a mock function with given fields:
func (_m *GeneralConfig) ExplorerURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// FMDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *GeneralConfig) FMDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// FMSimulateTransactions provides a mock function with given fields:
func (_m *GeneralConfig) FMSimulateTransactions() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureExternalInitiators provides a mock function with given fields:
func (_m *GeneralConfig) FeatureExternalInitiators() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureFeedsManager provides a mock function with given fields:
func (_m *GeneralConfig) FeatureFeedsManager() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureLogPoller provides a mock function with given fields:
func (_m *GeneralConfig) FeatureLogPoller() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureOffchainReporting provides a mock function with given fields:
func (_m *GeneralConfig) FeatureOffchainReporting() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureOffchainReporting2 provides a mock function with given fields:
func (_m *GeneralConfig) FeatureOffchainReporting2() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureUICSAKeys provides a mock function with given fields:
func (_m *GeneralConfig) FeatureUICSAKeys() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAdvisoryLockIDConfiguredOrDefault provides a mock function with given fields:
func (_m *GeneralConfig) GetAdvisoryLockIDConfiguredOrDefault() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetDatabaseDialectConfiguredOrDefault provides a mock function with given fields:
func (_m *GeneralConfig) GetDatabaseDialectConfiguredOrDefault() dialects.DialectName {
	ret := _m.Called()

	var r0 dialects.DialectName
	if rf, ok := ret.Get(0).(func() dialects.DialectName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dialects.DialectName)
	}

	return r0
}

// GlobalBalanceMonitorEnabled provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBalanceMonitorEnabled() (bool, bool) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockEmissionIdleWarningThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockEmissionIdleWarningThreshold() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorBatchSize provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorBatchSize() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorBlockDelay provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorBlockDelay() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorBlockHistorySize provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorBlockHistorySize() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorCheckInclusionBlocks provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorCheckInclusionBlocks() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorCheckInclusionPercentile provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorCheckInclusionPercentile() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorEIP1559FeeCapBufferBlocks provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorEIP1559FeeCapBufferBlocks() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalBlockHistoryEstimatorTransactionPercentile provides a mock function with given fields:
func (_m *GeneralConfig) GlobalBlockHistoryEstimatorTransactionPercentile() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalChainType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalChainType() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEthTxReaperInterval provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEthTxReaperInterval() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEthTxReaperThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEthTxReaperThreshold() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEthTxResendAfterThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEthTxResendAfterThreshold() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmEIP1559DynamicFees provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmEIP1559DynamicFees() (bool, bool) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmFinalityDepth provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmFinalityDepth() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasBumpPercent provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasBumpPercent() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasBumpThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasBumpThreshold() (uint64, bool) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasBumpTxDepth provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasBumpTxDepth() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasBumpWei provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasBumpWei() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasFeeCapDefault provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasFeeCapDefault() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitDRJobType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitDRJobType() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitDefault provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitDefault() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitFMJobType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitFMJobType() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitKeeperJobType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitKeeperJobType() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitMax provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitMax() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitMultiplier provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitMultiplier() (float32, bool) {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitOCRJobType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitOCRJobType() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitTransfer provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitTransfer() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasLimitVRFJobType provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasLimitVRFJobType() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasPriceDefault provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasPriceDefault() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasTipCapDefault provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasTipCapDefault() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmGasTipCapMinimum provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmGasTipCapMinimum() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmHeadTrackerHistoryDepth provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmHeadTrackerHistoryDepth() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmHeadTrackerMaxBufferSize provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmHeadTrackerMaxBufferSize() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmHeadTrackerSamplingInterval provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmHeadTrackerSamplingInterval() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmLogBackfillBatchSize provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmLogBackfillBatchSize() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmLogKeepBlocksDepth provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmLogKeepBlocksDepth() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmLogPollInterval provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmLogPollInterval() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmMaxGasPriceWei provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmMaxGasPriceWei() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmMaxInFlightTransactions provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmMaxInFlightTransactions() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmMaxQueuedTransactions provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmMaxQueuedTransactions() (uint64, bool) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmMinGasPriceWei provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmMinGasPriceWei() (*assets.Wei, bool) {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmNonceAutoSync provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmNonceAutoSync() (bool, bool) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmRPCDefaultBatchSize provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmRPCDefaultBatchSize() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalEvmUseForwarders provides a mock function with given fields:
func (_m *GeneralConfig) GlobalEvmUseForwarders() (bool, bool) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalFlagsContractAddress provides a mock function with given fields:
func (_m *GeneralConfig) GlobalFlagsContractAddress() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalGasEstimatorMode provides a mock function with given fields:
func (_m *GeneralConfig) GlobalGasEstimatorMode() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalLinkContractAddress provides a mock function with given fields:
func (_m *GeneralConfig) GlobalLinkContractAddress() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalMinIncomingConfirmations provides a mock function with given fields:
func (_m *GeneralConfig) GlobalMinIncomingConfirmations() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalMinimumContractPayment provides a mock function with given fields:
func (_m *GeneralConfig) GlobalMinimumContractPayment() (*assets.Link, bool) {
	ret := _m.Called()

	var r0 *assets.Link
	if rf, ok := ret.Get(0).(func() *assets.Link); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Link)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalNodeNoNewHeadsThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalNodeNoNewHeadsThreshold() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalNodePollFailureThreshold provides a mock function with given fields:
func (_m *GeneralConfig) GlobalNodePollFailureThreshold() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalNodePollInterval provides a mock function with given fields:
func (_m *GeneralConfig) GlobalNodePollInterval() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalNodeSelectionMode provides a mock function with given fields:
func (_m *GeneralConfig) GlobalNodeSelectionMode() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOCR2AutomationGasLimit provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOCR2AutomationGasLimit() (uint32, bool) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOCRContractConfirmations provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOCRContractConfirmations() (uint16, bool) {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOCRContractTransmitterTransmitTimeout provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOCRContractTransmitterTransmitTimeout() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOCRDatabaseTimeout provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOCRDatabaseTimeout() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOCRObservationGracePeriod provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOCRObservationGracePeriod() (time.Duration, bool) {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GlobalOperatorFactoryAddress provides a mock function with given fields:
func (_m *GeneralConfig) GlobalOperatorFactoryAddress() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// HTTPServerWriteTimeout provides a mock function with given fields:
func (_m *GeneralConfig) HTTPServerWriteTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// InsecureFastScrypt provides a mock function with given fields:
func (_m *GeneralConfig) InsecureFastScrypt() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JSONConsole provides a mock function with given fields:
func (_m *GeneralConfig) JSONConsole() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JobPipelineMaxRunDuration provides a mock function with given fields:
func (_m *GeneralConfig) JobPipelineMaxRunDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperInterval provides a mock function with given fields:
func (_m *GeneralConfig) JobPipelineReaperInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperThreshold provides a mock function with given fields:
func (_m *GeneralConfig) JobPipelineReaperThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineResultWriteQueueDepth provides a mock function with given fields:
func (_m *GeneralConfig) JobPipelineResultWriteQueueDepth() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// KeeperBaseFeeBufferPercent provides a mock function with given fields:
func (_m *GeneralConfig) KeeperBaseFeeBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperCheckUpkeepGasPriceFeatureEnabled provides a mock function with given fields:
func (_m *GeneralConfig) KeeperCheckUpkeepGasPriceFeatureEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeeperDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *GeneralConfig) KeeperDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperGasPriceBufferPercent provides a mock function with given fields:
func (_m *GeneralConfig) KeeperGasPriceBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperGasTipCapBufferPercent provides a mock function with given fields:
func (_m *GeneralConfig) KeeperGasTipCapBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperMaximumGracePeriod provides a mock function with given fields:
func (_m *GeneralConfig) KeeperMaximumGracePeriod() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// KeeperRegistryCheckGasOverhead provides a mock function with given fields:
func (_m *GeneralConfig) KeeperRegistryCheckGasOverhead() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistryMaxPerformDataSize provides a mock function with given fields:
func (_m *GeneralConfig) KeeperRegistryMaxPerformDataSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistryPerformGasOverhead provides a mock function with given fields:
func (_m *GeneralConfig) KeeperRegistryPerformGasOverhead() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistrySyncInterval provides a mock function with given fields:
func (_m *GeneralConfig) KeeperRegistrySyncInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// KeeperRegistrySyncUpkeepQueueSize provides a mock function with given fields:
func (_m *GeneralConfig) KeeperRegistrySyncUpkeepQueueSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperTurnFlagEnabled provides a mock function with given fields:
func (_m *GeneralConfig) KeeperTurnFlagEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeeperTurnLookBack provides a mock function with given fields:
func (_m *GeneralConfig) KeeperTurnLookBack() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// KeyFile provides a mock function with given fields:
func (_m *GeneralConfig) KeyFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeystorePassword provides a mock function with given fields:
func (_m *GeneralConfig) KeystorePassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LeaseLockDuration provides a mock function with given fields:
func (_m *GeneralConfig) LeaseLockDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// LeaseLockRefreshInterval provides a mock function with given fields:
func (_m *GeneralConfig) LeaseLockRefreshInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// LogConfiguration provides a mock function with given fields: log
func (_m *GeneralConfig) LogConfiguration(log config.LogFn) {
	_m.Called(log)
}

// LogFileDir provides a mock function with given fields:
func (_m *GeneralConfig) LogFileDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogFileMaxAge provides a mock function with given fields:
func (_m *GeneralConfig) LogFileMaxAge() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogFileMaxBackups provides a mock function with given fields:
func (_m *GeneralConfig) LogFileMaxBackups() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogFileMaxSize provides a mock function with given fields:
func (_m *GeneralConfig) LogFileMaxSize() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// LogLevel provides a mock function with given fields:
func (_m *GeneralConfig) LogLevel() zapcore.Level {
	ret := _m.Called()

	var r0 zapcore.Level
	if rf, ok := ret.Get(0).(func() zapcore.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zapcore.Level)
	}

	return r0
}

// LogSQL provides a mock function with given fields:
func (_m *GeneralConfig) LogSQL() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LogUnixTimestamps provides a mock function with given fields:
func (_m *GeneralConfig) LogUnixTimestamps() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MigrateDatabase provides a mock function with given fields:
func (_m *GeneralConfig) MigrateDatabase() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCR2BlockchainTimeout provides a mock function with given fields:
func (_m *GeneralConfig) OCR2BlockchainTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractConfirmations provides a mock function with given fields:
func (_m *GeneralConfig) OCR2ContractConfirmations() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// OCR2ContractPollInterval provides a mock function with given fields:
func (_m *GeneralConfig) OCR2ContractPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractSubscribeInterval provides a mock function with given fields:
func (_m *GeneralConfig) OCR2ContractSubscribeInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractTransmitterTransmitTimeout provides a mock function with given fields:
func (_m *GeneralConfig) OCR2ContractTransmitterTransmitTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2DatabaseTimeout provides a mock function with given fields:
func (_m *GeneralConfig) OCR2DatabaseTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2KeyBundleID provides a mock function with given fields:
func (_m *GeneralConfig) OCR2KeyBundleID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR2TraceLogging provides a mock function with given fields:
func (_m *GeneralConfig) OCR2TraceLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRBlockchainTimeout provides a mock function with given fields:
func (_m *GeneralConfig) OCRBlockchainTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRContractPollInterval provides a mock function with given fields:
func (_m *GeneralConfig) OCRContractPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRContractSubscribeInterval provides a mock function with given fields:
func (_m *GeneralConfig) OCRContractSubscribeInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *GeneralConfig) OCRDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// OCRKeyBundleID provides a mock function with given fields:
func (_m *GeneralConfig) OCRKeyBundleID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCRObservationTimeout provides a mock function with given fields:
func (_m *GeneralConfig) OCRObservationTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRSimulateTransactions provides a mock function with given fields:
func (_m *GeneralConfig) OCRSimulateTransactions() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRTraceLogging provides a mock function with given fields:
func (_m *GeneralConfig) OCRTraceLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRTransmitterAddress provides a mock function with given fields:
func (_m *GeneralConfig) OCRTransmitterAddress() (ethkey.EIP55Address, error) {
	ret := _m.Called()

	var r0 ethkey.EIP55Address
	if rf, ok := ret.Get(0).(func() ethkey.EIP55Address); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ethkey.EIP55Address)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ORMMaxIdleConns provides a mock function with given fields:
func (_m *GeneralConfig) ORMMaxIdleConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ORMMaxOpenConns provides a mock function with given fields:
func (_m *GeneralConfig) ORMMaxOpenConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PAnnounceIP provides a mock function with given fields:
func (_m *GeneralConfig) P2PAnnounceIP() net.IP {
	ret := _m.Called()

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// P2PAnnouncePort provides a mock function with given fields:
func (_m *GeneralConfig) P2PAnnouncePort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// P2PBootstrapCheckInterval provides a mock function with given fields:
func (_m *GeneralConfig) P2PBootstrapCheckInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2PBootstrapPeers provides a mock function with given fields:
func (_m *GeneralConfig) P2PBootstrapPeers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// P2PDHTAnnouncementCounterUserPrefix provides a mock function with given fields:
func (_m *GeneralConfig) P2PDHTAnnouncementCounterUserPrefix() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// P2PDHTLookupInterval provides a mock function with given fields:
func (_m *GeneralConfig) P2PDHTLookupInterval() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PEnabled provides a mock function with given fields:
func (_m *GeneralConfig) P2PEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// P2PIncomingMessageBufferSize provides a mock function with given fields:
func (_m *GeneralConfig) P2PIncomingMessageBufferSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PListenIP provides a mock function with given fields:
func (_m *GeneralConfig) P2PListenIP() net.IP {
	ret := _m.Called()

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// P2PListenPort provides a mock function with given fields:
func (_m *GeneralConfig) P2PListenPort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// P2PListenPortRaw provides a mock function with given fields:
func (_m *GeneralConfig) P2PListenPortRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PNetworkingStack provides a mock function with given fields:
func (_m *GeneralConfig) P2PNetworkingStack() networking.NetworkingStack {
	ret := _m.Called()

	var r0 networking.NetworkingStack
	if rf, ok := ret.Get(0).(func() networking.NetworkingStack); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(networking.NetworkingStack)
	}

	return r0
}

// P2PNetworkingStackRaw provides a mock function with given fields:
func (_m *GeneralConfig) P2PNetworkingStackRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PNewStreamTimeout provides a mock function with given fields:
func (_m *GeneralConfig) P2PNewStreamTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2POutgoingMessageBufferSize provides a mock function with given fields:
func (_m *GeneralConfig) P2POutgoingMessageBufferSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PPeerID provides a mock function with given fields:
func (_m *GeneralConfig) P2PPeerID() p2pkey.PeerID {
	ret := _m.Called()

	var r0 p2pkey.PeerID
	if rf, ok := ret.Get(0).(func() p2pkey.PeerID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2pkey.PeerID)
	}

	return r0
}

// P2PPeerIDRaw provides a mock function with given fields:
func (_m *GeneralConfig) P2PPeerIDRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PPeerstoreWriteInterval provides a mock function with given fields:
func (_m *GeneralConfig) P2PPeerstoreWriteInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2PV2AnnounceAddresses provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2AnnounceAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// P2PV2Bootstrappers provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2Bootstrappers() []commontypes.BootstrapperLocator {
	ret := _m.Called()

	var r0 []commontypes.BootstrapperLocator
	if rf, ok := ret.Get(0).(func() []commontypes.BootstrapperLocator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commontypes.BootstrapperLocator)
		}
	}

	return r0
}

// P2PV2BootstrappersRaw provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2BootstrappersRaw() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// P2PV2DeltaDial provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2DeltaDial() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// P2PV2DeltaReconcile provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2DeltaReconcile() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// P2PV2ListenAddresses provides a mock function with given fields:
func (_m *GeneralConfig) P2PV2ListenAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Port provides a mock function with given fields:
func (_m *GeneralConfig) Port() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// PyroscopeAuthToken provides a mock function with given fields:
func (_m *GeneralConfig) PyroscopeAuthToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PyroscopeEnvironment provides a mock function with given fields:
func (_m *GeneralConfig) PyroscopeEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PyroscopeServerAddress provides a mock function with given fields:
func (_m *GeneralConfig) PyroscopeServerAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RPID provides a mock function with given fields:
func (_m *GeneralConfig) RPID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RPOrigin provides a mock function with given fields:
func (_m *GeneralConfig) RPOrigin() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReaperExpiration provides a mock function with given fields:
func (_m *GeneralConfig) ReaperExpiration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// RootDir provides a mock function with given fields:
func (_m *GeneralConfig) RootDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SecureCookies provides a mock function with given fields:
func (_m *GeneralConfig) SecureCookies() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SentryDSN provides a mock function with given fields:
func (_m *GeneralConfig) SentryDSN() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SentryDebug provides a mock function with given fields:
func (_m *GeneralConfig) SentryDebug() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SentryEnvironment provides a mock function with given fields:
func (_m *GeneralConfig) SentryEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SentryRelease provides a mock function with given fields:
func (_m *GeneralConfig) SentryRelease() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SessionOptions provides a mock function with given fields:
func (_m *GeneralConfig) SessionOptions() sessions.Options {
	ret := _m.Called()

	var r0 sessions.Options
	if rf, ok := ret.Get(0).(func() sessions.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sessions.Options)
	}

	return r0
}

// SessionTimeout provides a mock function with given fields:
func (_m *GeneralConfig) SessionTimeout() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// SetLogLevel provides a mock function with given fields: lvl
func (_m *GeneralConfig) SetLogLevel(lvl zapcore.Level) error {
	ret := _m.Called(lvl)

	var r0 error
	if rf, ok := ret.Get(0).(func(zapcore.Level) error); ok {
		r0 = rf(lvl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogSQL provides a mock function with given fields: logSQL
func (_m *GeneralConfig) SetLogSQL(logSQL bool) {
	_m.Called(logSQL)
}

// SetPasswords provides a mock function with given fields: keystore, vrf
func (_m *GeneralConfig) SetPasswords(keystore *string, vrf *string) {
	_m.Called(keystore, vrf)
}

// ShutdownGracePeriod provides a mock function with given fields:
func (_m *GeneralConfig) ShutdownGracePeriod() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SolanaEnabled provides a mock function with given fields:
func (_m *GeneralConfig) SolanaEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolanaNodes provides a mock function with given fields:
func (_m *GeneralConfig) SolanaNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StarkNetEnabled provides a mock function with given fields:
func (_m *GeneralConfig) StarkNetEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StarkNetNodes provides a mock function with given fields:
func (_m *GeneralConfig) StarkNetNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSCertPath provides a mock function with given fields:
func (_m *GeneralConfig) TLSCertPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSDir provides a mock function with given fields:
func (_m *GeneralConfig) TLSDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSHost provides a mock function with given fields:
func (_m *GeneralConfig) TLSHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSKeyPath provides a mock function with given fields:
func (_m *GeneralConfig) TLSKeyPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSPort provides a mock function with given fields:
func (_m *GeneralConfig) TLSPort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// TLSRedirect provides a mock function with given fields:
func (_m *GeneralConfig) TLSRedirect() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressBufferSize provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressBufferSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// TelemetryIngressLogging provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressMaxBatchSize provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressMaxBatchSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// TelemetryIngressSendInterval provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressSendInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TelemetryIngressSendTimeout provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressSendTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TelemetryIngressServerPubKey provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressServerPubKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TelemetryIngressURL provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// TelemetryIngressUniConn provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressUniConn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressUseBatchSend provides a mock function with given fields:
func (_m *GeneralConfig) TelemetryIngressUseBatchSend() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TerraEnabled provides a mock function with given fields:
func (_m *GeneralConfig) TerraEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TerraNodes provides a mock function with given fields:
func (_m *GeneralConfig) TerraNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TriggerFallbackDBPollInterval provides a mock function with given fields:
func (_m *GeneralConfig) TriggerFallbackDBPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// UnAuthenticatedRateLimit provides a mock function with given fields:
func (_m *GeneralConfig) UnAuthenticatedRateLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UnAuthenticatedRateLimitPeriod provides a mock function with given fields:
func (_m *GeneralConfig) UnAuthenticatedRateLimitPeriod() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// VRFPassword provides a mock function with given fields:
func (_m *GeneralConfig) VRFPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *GeneralConfig) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGeneralConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewGeneralConfig creates a new instance of GeneralConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGeneralConfig(t mockConstructorTestingTNewGeneralConfig) *GeneralConfig {
	mock := &GeneralConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
