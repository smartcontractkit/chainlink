// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	config "github.com/smartcontractkit/chainlink/v2/core/config"
	mock "github.com/stretchr/testify/mock"

	time "time"

	url "net/url"
)

// TelemetryIngress is an autogenerated mock type for the TelemetryIngress type
type TelemetryIngress struct {
	mock.Mock
}

// BufferSize provides a mock function with given fields:
func (_m *TelemetryIngress) BufferSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Endpoints provides a mock function with given fields:
func (_m *TelemetryIngress) Endpoints() []config.TelemetryIngressEndpoint {
	ret := _m.Called()

	var r0 []config.TelemetryIngressEndpoint
	if rf, ok := ret.Get(0).(func() []config.TelemetryIngressEndpoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.TelemetryIngressEndpoint)
		}
	}

	return r0
}

// Logging provides a mock function with given fields:
func (_m *TelemetryIngress) Logging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MaxBatchSize provides a mock function with given fields:
func (_m *TelemetryIngress) MaxBatchSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// SendInterval provides a mock function with given fields:
func (_m *TelemetryIngress) SendInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SendTimeout provides a mock function with given fields:
func (_m *TelemetryIngress) SendTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ServerPubKey provides a mock function with given fields:
func (_m *TelemetryIngress) ServerPubKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// URL provides a mock function with given fields:
func (_m *TelemetryIngress) URL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// UniConn provides a mock function with given fields:
func (_m *TelemetryIngress) UniConn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UseBatchSend provides a mock function with given fields:
func (_m *TelemetryIngress) UseBatchSend() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewTelemetryIngress creates a new instance of TelemetryIngress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelemetryIngress(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelemetryIngress {
	mock := &TelemetryIngress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
