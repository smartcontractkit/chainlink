// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	assets "github.com/smartcontractkit/chainlink/v2/core/chains/evm/assets"

	mock "github.com/stretchr/testify/mock"
)

// FixedPriceEstimatorConfig is an autogenerated mock type for the fixedPriceEstimatorConfig type
type FixedPriceEstimatorConfig struct {
	mock.Mock
}

// BumpPercent provides a mock function with given fields:
func (_m *FixedPriceEstimatorConfig) BumpPercent() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BumpPercent")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// FeeCapDefault provides a mock function with given fields:
func (_m *FixedPriceEstimatorConfig) FeeCapDefault() *assets.Wei {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeeCapDefault")
	}

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// PriceDefault provides a mock function with given fields:
func (_m *FixedPriceEstimatorConfig) PriceDefault() *assets.Wei {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PriceDefault")
	}

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// TipCapDefault provides a mock function with given fields:
func (_m *FixedPriceEstimatorConfig) TipCapDefault() *assets.Wei {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TipCapDefault")
	}

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// NewFixedPriceEstimatorConfig creates a new instance of FixedPriceEstimatorConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFixedPriceEstimatorConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *FixedPriceEstimatorConfig {
	mock := &FixedPriceEstimatorConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
