// Code generated by mockery 2.9.4. DO NOT EDIT.

package log

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// mockILogPool is an autogenerated mock type for the iLogPool type
type mockILogPool struct {
	mock.Mock
}

// AddLog provides a mock function with given fields: log
func (_m *mockILogPool) AddLog(log types.Log) bool {
	ret := _m.Called(log)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Log) bool); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteOlderLogs provides a mock function with given fields: keptDepth
func (_m *mockILogPool) DeleteOlderLogs(keptDepth int64) *int64 {
	ret := _m.Called(keptDepth)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(int64) *int64); ok {
		r0 = rf(keptDepth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// GetAndDeleteAll provides a mock function with given fields:
func (_m *mockILogPool) GetAndDeleteAll() ([]logsOnBlock, int64, int64) {
	ret := _m.Called()

	var r0 []logsOnBlock
	if rf, ok := ret.Get(0).(func() []logsOnBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logsOnBlock)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func() int64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}

// GetLogsToSend provides a mock function with given fields: latestBlockNum
func (_m *mockILogPool) GetLogsToSend(latestBlockNum int64) ([]logsOnBlock, int64) {
	ret := _m.Called(latestBlockNum)

	var r0 []logsOnBlock
	if rf, ok := ret.Get(0).(func(int64) []logsOnBlock); ok {
		r0 = rf(latestBlockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logsOnBlock)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = rf(latestBlockNum)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// RemoveBlock provides a mock function with given fields: blockHash, blockNumber
func (_m *mockILogPool) RemoveBlock(blockHash common.Hash, blockNumber uint64) {
	_m.Called(blockHash, blockNumber)
}

// TestOnly_getNumLogsForBlock provides a mock function with given fields: bh
func (_m *mockILogPool) TestOnly_getNumLogsForBlock(bh common.Hash) int {
	ret := _m.Called(bh)

	var r0 int
	if rf, ok := ret.Get(0).(func(common.Hash) int); ok {
		r0 = rf(bh)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
