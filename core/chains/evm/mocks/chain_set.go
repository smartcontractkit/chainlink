// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	evm "github.com/smartcontractkit/chainlink/core/chains/evm"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/core/chains/evm/types"
)

// ChainSet is an autogenerated mock type for the ChainSet type
type ChainSet struct {
	mock.Mock
}

// Add provides a mock function with given fields: id, config
func (_m *ChainSet) Add(id *big.Int, config types.ChainCfg) (types.Chain, error) {
	ret := _m.Called(id, config)

	var r0 types.Chain
	if rf, ok := ret.Get(0).(func(*big.Int, types.ChainCfg) types.Chain); ok {
		r0 = rf(id, config)
	} else {
		r0 = ret.Get(0).(types.Chain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int, types.ChainCfg) error); ok {
		r1 = rf(id, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainCount provides a mock function with given fields:
func (_m *ChainSet) ChainCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Chains provides a mock function with given fields:
func (_m *ChainSet) Chains() []evm.Chain {
	ret := _m.Called()

	var r0 []evm.Chain
	if rf, ok := ret.Get(0).(func() []evm.Chain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]evm.Chain)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *ChainSet) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configure provides a mock function with given fields: id, enabled, config
func (_m *ChainSet) Configure(id *big.Int, enabled bool, config types.ChainCfg) (types.Chain, error) {
	ret := _m.Called(id, enabled, config)

	var r0 types.Chain
	if rf, ok := ret.Get(0).(func(*big.Int, bool, types.ChainCfg) types.Chain); ok {
		r0 = rf(id, enabled, config)
	} else {
		r0 = ret.Get(0).(types.Chain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int, bool, types.ChainCfg) error); ok {
		r1 = rf(id, enabled, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Default provides a mock function with given fields:
func (_m *ChainSet) Default() (evm.Chain, error) {
	ret := _m.Called()

	var r0 evm.Chain
	if rf, ok := ret.Get(0).(func() evm.Chain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(evm.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ChainSet) Get(id *big.Int) (evm.Chain, error) {
	ret := _m.Called(id)

	var r0 evm.Chain
	if rf, ok := ret.Get(0).(func(*big.Int) evm.Chain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(evm.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Healthy provides a mock function with given fields:
func (_m *ChainSet) Healthy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ORM provides a mock function with given fields:
func (_m *ChainSet) ORM() types.ORM {
	ret := _m.Called()

	var r0 types.ORM
	if rf, ok := ret.Get(0).(func() types.ORM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ORM)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *ChainSet) Ready() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: id
func (_m *ChainSet) Remove(id *big.Int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *ChainSet) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
