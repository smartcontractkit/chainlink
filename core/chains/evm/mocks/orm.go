// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	types "github.com/smartcontractkit/chainlink/core/chains/evm/types"
	mock "github.com/stretchr/testify/mock"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// Clear provides a mock function with given fields: chainID, key
func (_m *ORM) Clear(chainID *big.Int, key string) error {
	ret := _m.Called(chainID, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, string) error); ok {
		r0 = rf(chainID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadChains provides a mock function with given fields:
func (_m *ORM) LoadChains() ([]types.Chain, error) {
	ret := _m.Called()

	var r0 []types.Chain
	if rf, ok := ret.Get(0).(func() []types.Chain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreString provides a mock function with given fields: chainID, key, val
func (_m *ORM) StoreString(chainID *big.Int, key string, val string) error {
	ret := _m.Called(chainID, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, string, string) error); ok {
		r0 = rf(chainID, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
