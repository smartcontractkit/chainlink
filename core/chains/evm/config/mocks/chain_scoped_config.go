// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	assets "github.com/smartcontractkit/chainlink/core/assets"
	audit "github.com/smartcontractkit/chainlink/core/logger/audit"

	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	commontypes "github.com/smartcontractkit/libocr/commontypes"

	coreconfig "github.com/smartcontractkit/chainlink/core/config"

	dialects "github.com/smartcontractkit/chainlink/core/store/dialects"

	ethkey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/ethkey"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"

	net "net"

	networking "github.com/smartcontractkit/libocr/networking"

	p2pkey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/p2pkey"

	sessions "github.com/gin-gonic/contrib/sessions"

	time "time"

	types "github.com/smartcontractkit/chainlink/core/chains/evm/types"

	url "net/url"

	utils "github.com/smartcontractkit/chainlink/core/utils"

	uuid "github.com/satori/go.uuid"

	zapcore "go.uber.org/zap/zapcore"
)

// ChainScopedConfig is an autogenerated mock type for the ChainScopedConfig type
type ChainScopedConfig struct {
	mock.Mock
}

// AdvisoryLockCheckInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) AdvisoryLockCheckInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// AdvisoryLockID provides a mock function with given fields:
func (_m *ChainScopedConfig) AdvisoryLockID() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// AllowOrigins provides a mock function with given fields:
func (_m *ChainScopedConfig) AllowOrigins() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AppID provides a mock function with given fields:
func (_m *ChainScopedConfig) AppID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// AuditLoggerEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) AuditLoggerEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuditLoggerEnvironment provides a mock function with given fields:
func (_m *ChainScopedConfig) AuditLoggerEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuditLoggerForwardToUrl provides a mock function with given fields:
func (_m *ChainScopedConfig) AuditLoggerForwardToUrl() (models.URL, error) {
	ret := _m.Called()

	var r0 models.URL
	if rf, ok := ret.Get(0).(func() models.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.URL)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditLoggerHeaders provides a mock function with given fields:
func (_m *ChainScopedConfig) AuditLoggerHeaders() (audit.ServiceHeaders, error) {
	ret := _m.Called()

	var r0 audit.ServiceHeaders
	if rf, ok := ret.Get(0).(func() audit.ServiceHeaders); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(audit.ServiceHeaders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditLoggerJsonWrapperKey provides a mock function with given fields:
func (_m *ChainScopedConfig) AuditLoggerJsonWrapperKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AuthenticatedRateLimit provides a mock function with given fields:
func (_m *ChainScopedConfig) AuthenticatedRateLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// AuthenticatedRateLimitPeriod provides a mock function with given fields:
func (_m *ChainScopedConfig) AuthenticatedRateLimitPeriod() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofBlockProfileRate provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofBlockProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofCPUProfileRate provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofCPUProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AutoPprofGatherDuration provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofGatherDuration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofGatherTraceDuration provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofGatherTraceDuration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofGoroutineThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofGoroutineThreshold() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofMaxProfileSize provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofMaxProfileSize() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// AutoPprofMemProfileRate provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofMemProfileRate() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofMemThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofMemThreshold() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// AutoPprofMutexProfileFraction provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofMutexProfileFraction() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AutoPprofPollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofPollInterval() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// AutoPprofProfileRoot provides a mock function with given fields:
func (_m *ChainScopedConfig) AutoPprofProfileRoot() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BalanceMonitorEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) BalanceMonitorEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BlockBackfillDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockBackfillDepth() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BlockBackfillSkip provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockBackfillSkip() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BlockEmissionIdleWarningThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockEmissionIdleWarningThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// BlockHistoryEstimatorBatchSize provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorBatchSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// BlockHistoryEstimatorBlockDelay provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorBlockDelay() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BlockHistoryEstimatorBlockHistorySize provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorBlockHistorySize() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BlockHistoryEstimatorCheckInclusionBlocks provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorCheckInclusionBlocks() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BlockHistoryEstimatorCheckInclusionPercentile provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorCheckInclusionPercentile() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BlockHistoryEstimatorEIP1559FeeCapBufferBlocks provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorEIP1559FeeCapBufferBlocks() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BlockHistoryEstimatorTransactionPercentile provides a mock function with given fields:
func (_m *ChainScopedConfig) BlockHistoryEstimatorTransactionPercentile() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// BridgeResponseURL provides a mock function with given fields:
func (_m *ChainScopedConfig) BridgeResponseURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// CertFile provides a mock function with given fields:
func (_m *ChainScopedConfig) CertFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ChainID provides a mock function with given fields:
func (_m *ChainScopedConfig) ChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ChainType provides a mock function with given fields:
func (_m *ChainScopedConfig) ChainType() coreconfig.ChainType {
	ret := _m.Called()

	var r0 coreconfig.ChainType
	if rf, ok := ret.Get(0).(func() coreconfig.ChainType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(coreconfig.ChainType)
	}

	return r0
}

// Configure provides a mock function with given fields: _a0
func (_m *ChainScopedConfig) Configure(_a0 types.ChainCfg) {
	_m.Called(_a0)
}

// DatabaseBackupDir provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseBackupDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatabaseBackupFrequency provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseBackupFrequency() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseBackupMode provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseBackupMode() coreconfig.DatabaseBackupMode {
	ret := _m.Called()

	var r0 coreconfig.DatabaseBackupMode
	if rf, ok := ret.Get(0).(func() coreconfig.DatabaseBackupMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(coreconfig.DatabaseBackupMode)
	}

	return r0
}

// DatabaseBackupOnVersionUpgrade provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseBackupOnVersionUpgrade() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DatabaseBackupURL provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseBackupURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// DatabaseDefaultIdleInTxSessionTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseDefaultIdleInTxSessionTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseDefaultLockTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseDefaultLockTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseDefaultQueryTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseDefaultQueryTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseListenerMaxReconnectDuration provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseListenerMaxReconnectDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseListenerMinReconnectInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseListenerMinReconnectInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// DatabaseLockingMode provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseLockingMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatabaseURL provides a mock function with given fields:
func (_m *ChainScopedConfig) DatabaseURL() url.URL {
	ret := _m.Called()

	var r0 url.URL
	if rf, ok := ret.Get(0).(func() url.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	return r0
}

// DefaultChainID provides a mock function with given fields:
func (_m *ChainScopedConfig) DefaultChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// DefaultHTTPLimit provides a mock function with given fields:
func (_m *ChainScopedConfig) DefaultHTTPLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DefaultHTTPTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) DefaultHTTPTimeout() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// DefaultLogLevel provides a mock function with given fields:
func (_m *ChainScopedConfig) DefaultLogLevel() zapcore.Level {
	ret := _m.Called()

	var r0 zapcore.Level
	if rf, ok := ret.Get(0).(func() zapcore.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zapcore.Level)
	}

	return r0
}

// Dev provides a mock function with given fields:
func (_m *ChainScopedConfig) Dev() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVMEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) EVMEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVMRPCEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) EVMRPCEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EthTxReaperInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) EthTxReaperInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EthTxReaperThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) EthTxReaperThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EthTxResendAfterThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) EthTxResendAfterThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EthereumHTTPURL provides a mock function with given fields:
func (_m *ChainScopedConfig) EthereumHTTPURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// EthereumNodes provides a mock function with given fields:
func (_m *ChainScopedConfig) EthereumNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EthereumSecondaryURLs provides a mock function with given fields:
func (_m *ChainScopedConfig) EthereumSecondaryURLs() []url.URL {
	ret := _m.Called()

	var r0 []url.URL
	if rf, ok := ret.Get(0).(func() []url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]url.URL)
		}
	}

	return r0
}

// EthereumURL provides a mock function with given fields:
func (_m *ChainScopedConfig) EthereumURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EvmEIP1559DynamicFees provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmEIP1559DynamicFees() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EvmFinalityDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmFinalityDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmGasBumpPercent provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasBumpPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// EvmGasBumpThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasBumpThreshold() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EvmGasBumpTxDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasBumpTxDepth() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// EvmGasBumpWei provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasBumpWei() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmGasFeeCapDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasFeeCapDefault() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmGasLimitDRJobType provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitDRJobType() *uint32 {
	ret := _m.Called()

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// EvmGasLimitDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitDefault() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmGasLimitFMJobType provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitFMJobType() *uint32 {
	ret := _m.Called()

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// EvmGasLimitKeeperJobType provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitKeeperJobType() *uint32 {
	ret := _m.Called()

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// EvmGasLimitMax provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitMax() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmGasLimitMultiplier provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitMultiplier() float32 {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// EvmGasLimitOCRJobType provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitOCRJobType() *uint32 {
	ret := _m.Called()

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// EvmGasLimitTransfer provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitTransfer() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmGasLimitVRFJobType provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasLimitVRFJobType() *uint32 {
	ret := _m.Called()

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// EvmGasPriceDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasPriceDefault() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmGasTipCapDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasTipCapDefault() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmGasTipCapMinimum provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmGasTipCapMinimum() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmHeadTrackerHistoryDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmHeadTrackerHistoryDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmHeadTrackerMaxBufferSize provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmHeadTrackerMaxBufferSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmHeadTrackerSamplingInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmHeadTrackerSamplingInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EvmLogBackfillBatchSize provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmLogBackfillBatchSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmLogKeepBlocksDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmLogKeepBlocksDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmLogPollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmLogPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EvmMaxGasPriceWei provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmMaxGasPriceWei() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmMaxInFlightTransactions provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmMaxInFlightTransactions() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmMaxQueuedTransactions provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmMaxQueuedTransactions() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EvmMinGasPriceWei provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmMinGasPriceWei() *assets.Wei {
	ret := _m.Called()

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func() *assets.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// EvmNonceAutoSync provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmNonceAutoSync() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EvmRPCDefaultBatchSize provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmRPCDefaultBatchSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EvmUseForwarders provides a mock function with given fields:
func (_m *ChainScopedConfig) EvmUseForwarders() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExplorerAccessKey provides a mock function with given fields:
func (_m *ChainScopedConfig) ExplorerAccessKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExplorerSecret provides a mock function with given fields:
func (_m *ChainScopedConfig) ExplorerSecret() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExplorerURL provides a mock function with given fields:
func (_m *ChainScopedConfig) ExplorerURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// FMDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) FMDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// FMSimulateTransactions provides a mock function with given fields:
func (_m *ChainScopedConfig) FMSimulateTransactions() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureExternalInitiators provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureExternalInitiators() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureFeedsManager provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureFeedsManager() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureLogPoller provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureLogPoller() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureOffchainReporting provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureOffchainReporting() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureOffchainReporting2 provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureOffchainReporting2() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureUICSAKeys provides a mock function with given fields:
func (_m *ChainScopedConfig) FeatureUICSAKeys() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FlagsContractAddress provides a mock function with given fields:
func (_m *ChainScopedConfig) FlagsContractAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GasEstimatorMode provides a mock function with given fields:
func (_m *ChainScopedConfig) GasEstimatorMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAdvisoryLockIDConfiguredOrDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) GetAdvisoryLockIDConfiguredOrDefault() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetDatabaseDialectConfiguredOrDefault provides a mock function with given fields:
func (_m *ChainScopedConfig) GetDatabaseDialectConfiguredOrDefault() dialects.DialectName {
	ret := _m.Called()

	var r0 dialects.DialectName
	if rf, ok := ret.Get(0).(func() dialects.DialectName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dialects.DialectName)
	}

	return r0
}

// HTTPServerWriteTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) HTTPServerWriteTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// InsecureFastScrypt provides a mock function with given fields:
func (_m *ChainScopedConfig) InsecureFastScrypt() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JSONConsole provides a mock function with given fields:
func (_m *ChainScopedConfig) JSONConsole() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JobPipelineMaxRunDuration provides a mock function with given fields:
func (_m *ChainScopedConfig) JobPipelineMaxRunDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) JobPipelineReaperInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) JobPipelineReaperThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineResultWriteQueueDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) JobPipelineResultWriteQueueDepth() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// KeeperBaseFeeBufferPercent provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperBaseFeeBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperCheckUpkeepGasPriceFeatureEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperCheckUpkeepGasPriceFeatureEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeeperDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperGasPriceBufferPercent provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperGasPriceBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperGasTipCapBufferPercent provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperGasTipCapBufferPercent() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// KeeperMaximumGracePeriod provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperMaximumGracePeriod() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// KeeperRegistryCheckGasOverhead provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperRegistryCheckGasOverhead() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistryMaxPerformDataSize provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperRegistryMaxPerformDataSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistryPerformGasOverhead provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperRegistryPerformGasOverhead() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperRegistrySyncInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperRegistrySyncInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// KeeperRegistrySyncUpkeepQueueSize provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperRegistrySyncUpkeepQueueSize() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// KeeperTurnFlagEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperTurnFlagEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeeperTurnLookBack provides a mock function with given fields:
func (_m *ChainScopedConfig) KeeperTurnLookBack() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// KeyFile provides a mock function with given fields:
func (_m *ChainScopedConfig) KeyFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeySpecificMaxGasPriceWei provides a mock function with given fields: addr
func (_m *ChainScopedConfig) KeySpecificMaxGasPriceWei(addr common.Address) *assets.Wei {
	ret := _m.Called(addr)

	var r0 *assets.Wei
	if rf, ok := ret.Get(0).(func(common.Address) *assets.Wei); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Wei)
		}
	}

	return r0
}

// KeystorePassword provides a mock function with given fields:
func (_m *ChainScopedConfig) KeystorePassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LeaseLockDuration provides a mock function with given fields:
func (_m *ChainScopedConfig) LeaseLockDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// LeaseLockRefreshInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) LeaseLockRefreshInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// LinkContractAddress provides a mock function with given fields:
func (_m *ChainScopedConfig) LinkContractAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogConfiguration provides a mock function with given fields: log
func (_m *ChainScopedConfig) LogConfiguration(log coreconfig.LogFn) {
	_m.Called(log)
}

// LogFileDir provides a mock function with given fields:
func (_m *ChainScopedConfig) LogFileDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogFileMaxAge provides a mock function with given fields:
func (_m *ChainScopedConfig) LogFileMaxAge() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogFileMaxBackups provides a mock function with given fields:
func (_m *ChainScopedConfig) LogFileMaxBackups() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogFileMaxSize provides a mock function with given fields:
func (_m *ChainScopedConfig) LogFileMaxSize() utils.FileSize {
	ret := _m.Called()

	var r0 utils.FileSize
	if rf, ok := ret.Get(0).(func() utils.FileSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(utils.FileSize)
	}

	return r0
}

// LogLevel provides a mock function with given fields:
func (_m *ChainScopedConfig) LogLevel() zapcore.Level {
	ret := _m.Called()

	var r0 zapcore.Level
	if rf, ok := ret.Get(0).(func() zapcore.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zapcore.Level)
	}

	return r0
}

// LogSQL provides a mock function with given fields:
func (_m *ChainScopedConfig) LogSQL() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LogUnixTimestamps provides a mock function with given fields:
func (_m *ChainScopedConfig) LogUnixTimestamps() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MigrateDatabase provides a mock function with given fields:
func (_m *ChainScopedConfig) MigrateDatabase() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MinIncomingConfirmations provides a mock function with given fields:
func (_m *ChainScopedConfig) MinIncomingConfirmations() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MinimumContractPayment provides a mock function with given fields:
func (_m *ChainScopedConfig) MinimumContractPayment() *assets.Link {
	ret := _m.Called()

	var r0 *assets.Link
	if rf, ok := ret.Get(0).(func() *assets.Link); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Link)
		}
	}

	return r0
}

// NodeNoNewHeadsThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) NodeNoNewHeadsThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NodePollFailureThreshold provides a mock function with given fields:
func (_m *ChainScopedConfig) NodePollFailureThreshold() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// NodePollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) NodePollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NodeSelectionMode provides a mock function with given fields:
func (_m *ChainScopedConfig) NodeSelectionMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OCR2AutomationGasLimit provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2AutomationGasLimit() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// OCR2BlockchainTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2BlockchainTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractConfirmations provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2ContractConfirmations() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// OCR2ContractPollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2ContractPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractSubscribeInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2ContractSubscribeInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2ContractTransmitterTransmitTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2ContractTransmitterTransmitTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2DatabaseTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2DatabaseTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCR2KeyBundleID provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2KeyBundleID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR2TraceLogging provides a mock function with given fields:
func (_m *ChainScopedConfig) OCR2TraceLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRBlockchainTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRBlockchainTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRContractConfirmations provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRContractConfirmations() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// OCRContractPollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRContractPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRContractSubscribeInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRContractSubscribeInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRContractTransmitterTransmitTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRContractTransmitterTransmitTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRDatabaseTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRDatabaseTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRDefaultTransactionQueueDepth provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRDefaultTransactionQueueDepth() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// OCRKeyBundleID provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRKeyBundleID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCRObservationGracePeriod provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRObservationGracePeriod() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRObservationTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRObservationTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// OCRSimulateTransactions provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRSimulateTransactions() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRTraceLogging provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRTraceLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OCRTransmitterAddress provides a mock function with given fields:
func (_m *ChainScopedConfig) OCRTransmitterAddress() (ethkey.EIP55Address, error) {
	ret := _m.Called()

	var r0 ethkey.EIP55Address
	if rf, ok := ret.Get(0).(func() ethkey.EIP55Address); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ethkey.EIP55Address)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ORMMaxIdleConns provides a mock function with given fields:
func (_m *ChainScopedConfig) ORMMaxIdleConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ORMMaxOpenConns provides a mock function with given fields:
func (_m *ChainScopedConfig) ORMMaxOpenConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// OperatorFactoryAddress provides a mock function with given fields:
func (_m *ChainScopedConfig) OperatorFactoryAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PAnnounceIP provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PAnnounceIP() net.IP {
	ret := _m.Called()

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// P2PAnnouncePort provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PAnnouncePort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// P2PBootstrapCheckInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PBootstrapCheckInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2PBootstrapPeers provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PBootstrapPeers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// P2PDHTAnnouncementCounterUserPrefix provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PDHTAnnouncementCounterUserPrefix() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// P2PDHTLookupInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PDHTLookupInterval() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// P2PIncomingMessageBufferSize provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PIncomingMessageBufferSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PListenIP provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PListenIP() net.IP {
	ret := _m.Called()

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// P2PListenPort provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PListenPort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// P2PListenPortRaw provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PListenPortRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PNetworkingStack provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PNetworkingStack() networking.NetworkingStack {
	ret := _m.Called()

	var r0 networking.NetworkingStack
	if rf, ok := ret.Get(0).(func() networking.NetworkingStack); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(networking.NetworkingStack)
	}

	return r0
}

// P2PNetworkingStackRaw provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PNetworkingStackRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PNewStreamTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PNewStreamTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2POutgoingMessageBufferSize provides a mock function with given fields:
func (_m *ChainScopedConfig) P2POutgoingMessageBufferSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// P2PPeerID provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PPeerID() p2pkey.PeerID {
	ret := _m.Called()

	var r0 p2pkey.PeerID
	if rf, ok := ret.Get(0).(func() p2pkey.PeerID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2pkey.PeerID)
	}

	return r0
}

// P2PPeerIDRaw provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PPeerIDRaw() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// P2PPeerstoreWriteInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PPeerstoreWriteInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// P2PV2AnnounceAddresses provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2AnnounceAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// P2PV2Bootstrappers provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2Bootstrappers() []commontypes.BootstrapperLocator {
	ret := _m.Called()

	var r0 []commontypes.BootstrapperLocator
	if rf, ok := ret.Get(0).(func() []commontypes.BootstrapperLocator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commontypes.BootstrapperLocator)
		}
	}

	return r0
}

// P2PV2BootstrappersRaw provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2BootstrappersRaw() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// P2PV2DeltaDial provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2DeltaDial() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// P2PV2DeltaReconcile provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2DeltaReconcile() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// P2PV2ListenAddresses provides a mock function with given fields:
func (_m *ChainScopedConfig) P2PV2ListenAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// PersistedConfig provides a mock function with given fields:
func (_m *ChainScopedConfig) PersistedConfig() types.ChainCfg {
	ret := _m.Called()

	var r0 types.ChainCfg
	if rf, ok := ret.Get(0).(func() types.ChainCfg); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ChainCfg)
	}

	return r0
}

// Port provides a mock function with given fields:
func (_m *ChainScopedConfig) Port() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// PyroscopeAuthToken provides a mock function with given fields:
func (_m *ChainScopedConfig) PyroscopeAuthToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PyroscopeEnvironment provides a mock function with given fields:
func (_m *ChainScopedConfig) PyroscopeEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PyroscopeServerAddress provides a mock function with given fields:
func (_m *ChainScopedConfig) PyroscopeServerAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RPID provides a mock function with given fields:
func (_m *ChainScopedConfig) RPID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RPOrigin provides a mock function with given fields:
func (_m *ChainScopedConfig) RPOrigin() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReaperExpiration provides a mock function with given fields:
func (_m *ChainScopedConfig) ReaperExpiration() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// RootDir provides a mock function with given fields:
func (_m *ChainScopedConfig) RootDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SecureCookies provides a mock function with given fields:
func (_m *ChainScopedConfig) SecureCookies() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SentryDSN provides a mock function with given fields:
func (_m *ChainScopedConfig) SentryDSN() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SentryDebug provides a mock function with given fields:
func (_m *ChainScopedConfig) SentryDebug() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SentryEnvironment provides a mock function with given fields:
func (_m *ChainScopedConfig) SentryEnvironment() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SentryRelease provides a mock function with given fields:
func (_m *ChainScopedConfig) SentryRelease() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SessionOptions provides a mock function with given fields:
func (_m *ChainScopedConfig) SessionOptions() sessions.Options {
	ret := _m.Called()

	var r0 sessions.Options
	if rf, ok := ret.Get(0).(func() sessions.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sessions.Options)
	}

	return r0
}

// SessionTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) SessionTimeout() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// SetEvmGasPriceDefault provides a mock function with given fields: value
func (_m *ChainScopedConfig) SetEvmGasPriceDefault(value *big.Int) error {
	ret := _m.Called(value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogLevel provides a mock function with given fields: lvl
func (_m *ChainScopedConfig) SetLogLevel(lvl zapcore.Level) error {
	ret := _m.Called(lvl)

	var r0 error
	if rf, ok := ret.Get(0).(func(zapcore.Level) error); ok {
		r0 = rf(lvl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogSQL provides a mock function with given fields: logSQL
func (_m *ChainScopedConfig) SetLogSQL(logSQL bool) {
	_m.Called(logSQL)
}

// SetPasswords provides a mock function with given fields: keystore, vrf
func (_m *ChainScopedConfig) SetPasswords(keystore *string, vrf *string) {
	_m.Called(keystore, vrf)
}

// ShutdownGracePeriod provides a mock function with given fields:
func (_m *ChainScopedConfig) ShutdownGracePeriod() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SolanaEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) SolanaEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolanaNodes provides a mock function with given fields:
func (_m *ChainScopedConfig) SolanaNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StarkNetEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) StarkNetEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StarkNetNodes provides a mock function with given fields:
func (_m *ChainScopedConfig) StarkNetNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSCertPath provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSCertPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSDir provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSHost provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSKeyPath provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSKeyPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TLSPort provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSPort() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// TLSRedirect provides a mock function with given fields:
func (_m *ChainScopedConfig) TLSRedirect() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressBufferSize provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressBufferSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// TelemetryIngressLogging provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressLogging() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressMaxBatchSize provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressMaxBatchSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// TelemetryIngressSendInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressSendInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TelemetryIngressSendTimeout provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressSendTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TelemetryIngressServerPubKey provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressServerPubKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TelemetryIngressURL provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// TelemetryIngressUniConn provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressUniConn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TelemetryIngressUseBatchSend provides a mock function with given fields:
func (_m *ChainScopedConfig) TelemetryIngressUseBatchSend() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TerraEnabled provides a mock function with given fields:
func (_m *ChainScopedConfig) TerraEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TerraNodes provides a mock function with given fields:
func (_m *ChainScopedConfig) TerraNodes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TriggerFallbackDBPollInterval provides a mock function with given fields:
func (_m *ChainScopedConfig) TriggerFallbackDBPollInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// UnAuthenticatedRateLimit provides a mock function with given fields:
func (_m *ChainScopedConfig) UnAuthenticatedRateLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UnAuthenticatedRateLimitPeriod provides a mock function with given fields:
func (_m *ChainScopedConfig) UnAuthenticatedRateLimitPeriod() models.Duration {
	ret := _m.Called()

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func() models.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

// VRFPassword provides a mock function with given fields:
func (_m *ChainScopedConfig) VRFPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *ChainScopedConfig) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChainScopedConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainScopedConfig creates a new instance of ChainScopedConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainScopedConfig(t mockConstructorTestingTNewChainScopedConfig) *ChainScopedConfig {
	mock := &ChainScopedConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
