//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package blocks

import (
	"errors"
	pkg1_common "github.com/ethereum/go-ethereum/common"
	pkg2_hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"sort"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82388 = 1
	codecSelferCcRAW2388  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2388     = 10
	codecSelferValueTypeMap2388       = 9
	codecSelferValueTypeString2388    = 6
	codecSelferValueTypeInt2388       = 2
	codecSelferValueTypeUint2388      = 3
	codecSelferValueTypeFloat2388     = 4
	codecSelferValueTypeNil2388       = 1
	codecSelferBitsize2388            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2388 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2388                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer2388 struct{}

func codecSelfer2388False() bool { return false }
func codecSelfer2388True() bool  { return true }

type codecSelfer2388stringSlice []string

func (p codecSelfer2388stringSlice) Len() int           { return len(p) }
func (p codecSelfer2388stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2388stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2388uint64Slice []uint64

func (p codecSelfer2388uint64Slice) Len() int           { return len(p) }
func (p codecSelfer2388uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2388uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2388int64Slice []int64

func (p codecSelfer2388int64Slice) Len() int           { return len(p) }
func (p codecSelfer2388int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2388int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2388float64Slice []float64

func (p codecSelfer2388float64Slice) Len() int           { return len(p) }
func (p codecSelfer2388float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2388float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 26 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 26, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_common.Hash
		var _ pkg2_hexutil.Big
	}
}

func (BlockInternal) codecSelferViaCodecgen() {}
func (x *BlockInternal) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn6 bool = x.BaseFeePerGas == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Number))
			z.EncWriteArrayElem()
			yy10 := &x.Hash
			if yyxt11 := z.Extension(yy10); yyxt11 != nil {
				z.EncExtension(yy10, yyxt11)
			} else if !z.EncBinary() {
				z.EncTextMarshal(*yy10)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy10[:]), e)
			}
			z.EncWriteArrayElem()
			yy12 := &x.ParentHash
			if yyxt13 := z.Extension(yy12); yyxt13 != nil {
				z.EncExtension(yy12, yyxt13)
			} else if !z.EncBinary() {
				z.EncTextMarshal(*yy12)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
			}
			if yyn6 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt14 := z.Extension(x.BaseFeePerGas); yyxt14 != nil {
					z.EncExtension(x.BaseFeePerGas, yyxt14)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*x.BaseFeePerGas)
				} else {
					z.EncFallback(x.BaseFeePerGas)
				}
			}
			z.EncWriteArrayElem()
			if yyxt15 := z.Extension(x.Timestamp); yyxt15 != nil {
				z.EncExtension(x.Timestamp, yyxt15)
			} else if !z.EncBinary() {
				z.EncTextMarshal(x.Timestamp)
			} else {
				r.EncodeUint(uint64(x.Timestamp))
			}
			z.EncWriteArrayElem()
			if x.Transactions == nil {
				r.EncodeNil()
			} else {
				h.encSliceTransactionInternal(([]TransactionInternal)(x.Transactions), e)
			} // end block: if x.Transactions slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"baseFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt17 := z.Extension(x.BaseFeePerGas); yyxt17 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt17)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy18 := &x.Hash
				if yyxt19 := z.Extension(yy18); yyxt19 != nil {
					z.EncExtension(yy18, yyxt19)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy18)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy18[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"number\"")
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Number))
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"parentHash\"")
				z.EncWriteMapElemValue()
				yy21 := &x.ParentHash
				if yyxt22 := z.Extension(yy21); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy21)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"timestamp\"")
				z.EncWriteMapElemValue()
				if yyxt23 := z.Extension(x.Timestamp); yyxt23 != nil {
					z.EncExtension(x.Timestamp, yyxt23)
				} else if !z.EncBinary() {
					z.EncTextMarshal(x.Timestamp)
				} else {
					r.EncodeUint(uint64(x.Timestamp))
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"transactions\"")
				z.EncWriteMapElemValue()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					h.encSliceTransactionInternal(([]TransactionInternal)(x.Transactions), e)
				} // end block: if x.Transactions slice == nil
			} else {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"number\"")
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Number))
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy26 := &x.Hash
				if yyxt27 := z.Extension(yy26); yyxt27 != nil {
					z.EncExtension(yy26, yyxt27)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy26)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy26[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"parentHash\"")
				z.EncWriteMapElemValue()
				yy28 := &x.ParentHash
				if yyxt29 := z.Extension(yy28); yyxt29 != nil {
					z.EncExtension(yy28, yyxt29)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy28)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy28[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"baseFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt30 := z.Extension(x.BaseFeePerGas); yyxt30 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt30)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"timestamp\"")
				z.EncWriteMapElemValue()
				if yyxt31 := z.Extension(x.Timestamp); yyxt31 != nil {
					z.EncExtension(x.Timestamp, yyxt31)
				} else if !z.EncBinary() {
					z.EncTextMarshal(x.Timestamp)
				} else {
					r.EncodeUint(uint64(x.Timestamp))
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"transactions\"")
				z.EncWriteMapElemValue()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					h.encSliceTransactionInternal(([]TransactionInternal)(x.Transactions), e)
				} // end block: if x.Transactions slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *BlockInternal) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2388 {
		*(x) = BlockInternal{}
	} else if yyct2 == codecSelferValueTypeMap2388 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2388 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2388)
	}
}

func (x *BlockInternal) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "number":
			x.Number = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "hash":
			if yyxt6 := z.Extension(x.Hash); yyxt6 != nil {
				z.DecExtension(&x.Hash, yyxt6)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		case "parentHash":
			if yyxt8 := z.Extension(x.ParentHash); yyxt8 != nil {
				z.DecExtension(&x.ParentHash, yyxt8)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ParentHash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
			}
		case "baseFeePerGas":
			if r.TryNil() {
				if x.BaseFeePerGas != nil { // remove the if-true
					x.BaseFeePerGas = nil
				}
			} else {
				if x.BaseFeePerGas == nil {
					x.BaseFeePerGas = new(pkg2_hexutil.Big)
				}
				if yyxt10 := z.Extension(x.BaseFeePerGas); yyxt10 != nil {
					z.DecExtension(x.BaseFeePerGas, yyxt10)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.BaseFeePerGas)
				} else {
					z.DecFallback(x.BaseFeePerGas, false)
				}
			}
		case "timestamp":
			if yyxt12 := z.Extension(x.Timestamp); yyxt12 != nil {
				z.DecExtension(&x.Timestamp, yyxt12)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				x.Timestamp = (pkg2_hexutil.Uint64)(r.DecodeUint64())
			}
		case "transactions":
			h.decSliceTransactionInternal((*[]TransactionInternal)(&x.Transactions), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *BlockInternal) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Number = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt18 := z.Extension(x.Hash); yyxt18 != nil {
		z.DecExtension(&x.Hash, yyxt18)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt20 := z.Extension(x.ParentHash); yyxt20 != nil {
		z.DecExtension(&x.ParentHash, yyxt20)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ParentHash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BaseFeePerGas != nil { // remove the if-true
			x.BaseFeePerGas = nil
		}
	} else {
		if x.BaseFeePerGas == nil {
			x.BaseFeePerGas = new(pkg2_hexutil.Big)
		}
		if yyxt22 := z.Extension(x.BaseFeePerGas); yyxt22 != nil {
			z.DecExtension(x.BaseFeePerGas, yyxt22)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.BaseFeePerGas)
		} else {
			z.DecFallback(x.BaseFeePerGas, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt24 := z.Extension(x.Timestamp); yyxt24 != nil {
		z.DecExtension(&x.Timestamp, yyxt24)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		x.Timestamp = (pkg2_hexutil.Uint64)(r.DecodeUint64())
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceTransactionInternal((*[]TransactionInternal)(&x.Transactions), d)
	yyj15++
	for yyj15++; z.DecContainerNext(yyj15, l, yyhl15); yyj15++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
}

func (x *BlockInternal) IsCodecEmpty() bool {
	return !(x.Number != "" || x.Hash != pkg1_common.Hash{} || x.ParentHash != pkg1_common.Hash{} || x.Timestamp != 0 || len(x.Transactions) != 0 || false)
}

func (x codecSelfer2388) encSliceTransactionInternal(v []TransactionInternal, e *codec1978.Encoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.EncFallback(yy2)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2388) decSliceTransactionInternal(v *[]TransactionInternal, d *codec1978.Decoder) {
	var h codecSelfer2388
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []TransactionInternal{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]TransactionInternal, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; z.DecContainerNext(yyj1, yyl1, yyhl1); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]TransactionInternal, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, TransactionInternal{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.DecFallback(&yyv1[yyj1], false)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []TransactionInternal{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
