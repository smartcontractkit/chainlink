//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package types

import (
	"errors"
	pkg1_common "github.com/ethereum/go-ethereum/common"
	pkg5_hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	pkg4_assets "github.com/smartcontractkit/chainlink/core/assets"
	pkg2_null "github.com/smartcontractkit/chainlink/core/null"
	pkg3_utils "github.com/smartcontractkit/chainlink/core/utils"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"sort"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF84974 = 1
	codecSelferCcRAW4974  = 255
	// ----- value types used ----
	codecSelferValueTypeArray4974     = 10
	codecSelferValueTypeMap4974       = 9
	codecSelferValueTypeString4974    = 6
	codecSelferValueTypeInt4974       = 2
	codecSelferValueTypeUint4974      = 3
	codecSelferValueTypeFloat4974     = 4
	codecSelferValueTypeNil4974       = 1
	codecSelferBitsize4974            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil4974 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct4974                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer4974 struct{}

func codecSelfer4974False() bool { return false }
func codecSelfer4974True() bool  { return true }

type codecSelfer4974stringSlice []string

func (p codecSelfer4974stringSlice) Len() int           { return len(p) }
func (p codecSelfer4974stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer4974stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer4974uint64Slice []uint64

func (p codecSelfer4974uint64Slice) Len() int           { return len(p) }
func (p codecSelfer4974uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer4974uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer4974int64Slice []int64

func (p codecSelfer4974int64Slice) Len() int           { return len(p) }
func (p codecSelfer4974int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer4974int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer4974float64Slice []float64

func (p codecSelfer4974float64Slice) Len() int           { return len(p) }
func (p codecSelfer4974float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer4974float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 26 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 26, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_common.Hash
		var _ pkg5_hexutil.Big
		var _ pkg4_assets.Wei
		var _ pkg2_null.Int64
		var _ pkg3_utils.Big
		var _ time.Time
	}
}

func (Head) codecSelferViaCodecgen() {}
func (x *Head) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(x)
		} else {
			yy2arr2 := z.EncBasicHandle().StructToArray
			_ = yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn8 bool = x.Parent == nil
			var yyn9 bool = x.EVMChainID == nil
			var yyn12 bool = x.BaseFeePerGas == nil
			var yyn16 bool = x.Difficulty == nil
			var yyn17 bool = x.TotalDifficulty == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(15)
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.ID))
				z.EncWriteArrayElem()
				yy19 := &x.Hash
				if yyxt20 := z.Extension(yy19); yyxt20 != nil {
					z.EncExtension(yy19, yyxt20)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy19)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy19[:]), e)
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.Number))
				z.EncWriteArrayElem()
				yy22 := &x.L1BlockNumber
				if yyxt23 := z.Extension(yy22); yyxt23 != nil {
					z.EncExtension(yy22, yyxt23)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy22)
				} else {
					z.EncFallback(yy22)
				}
				z.EncWriteArrayElem()
				yy24 := &x.ParentHash
				if yyxt25 := z.Extension(yy24); yyxt25 != nil {
					z.EncExtension(yy24, yyxt25)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy24)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy24[:]), e)
				}
				if yyn8 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt26 := z.Extension(x.Parent); yyxt26 != nil {
						z.EncExtension(x.Parent, yyxt26)
					} else {
						x.Parent.CodecEncodeSelf(e)
					}
				}
				if yyn9 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt27 := z.Extension(x.EVMChainID); yyxt27 != nil {
						z.EncExtension(x.EVMChainID, yyxt27)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(*x.EVMChainID)
					} else {
						z.EncFallback(x.EVMChainID)
					}
				}
				z.EncWriteArrayElem()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt28 := z.Extension(x.Timestamp); yyxt28 != nil {
					z.EncExtension(x.Timestamp, yyxt28)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
				z.EncWriteArrayElem()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt29 := z.Extension(x.CreatedAt); yyxt29 != nil {
					z.EncExtension(x.CreatedAt, yyxt29)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				if yyn12 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt30 := z.Extension(x.BaseFeePerGas); yyxt30 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt30)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteArrayElem()
				yy31 := &x.ReceiptsRoot
				if yyxt32 := z.Extension(yy31); yyxt32 != nil {
					z.EncExtension(yy31, yyxt32)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy31)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy31[:]), e)
				}
				z.EncWriteArrayElem()
				yy33 := &x.TransactionsRoot
				if yyxt34 := z.Extension(yy33); yyxt34 != nil {
					z.EncExtension(yy33, yyxt34)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy33)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy33[:]), e)
				}
				z.EncWriteArrayElem()
				yy35 := &x.StateRoot
				if yyxt36 := z.Extension(yy35); yyxt36 != nil {
					z.EncExtension(yy35, yyxt36)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy35)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy35[:]), e)
				}
				if yyn16 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt37 := z.Extension(x.Difficulty); yyxt37 != nil {
						z.EncExtension(x.Difficulty, yyxt37)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(*x.Difficulty)
					} else {
						z.EncFallback(x.Difficulty)
					}
				}
				if yyn17 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt38 := z.Extension(x.TotalDifficulty); yyxt38 != nil {
						z.EncExtension(x.TotalDifficulty, yyxt38)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(*x.TotalDifficulty)
					} else {
						z.EncFallback(x.TotalDifficulty)
					}
				}
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(15)
				if z.EncBasicHandle().Canonical {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"BaseFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn12 {
						r.EncodeNil()
					} else {
						if yyxt39 := z.Extension(x.BaseFeePerGas); yyxt39 != nil {
							z.EncExtension(x.BaseFeePerGas, yyxt39)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.BaseFeePerGas)
						} else {
							z.EncFallback(x.BaseFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"CreatedAt\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.CreatedAt)
					} else if yyxt40 := z.Extension(x.CreatedAt); yyxt40 != nil {
						z.EncExtension(x.CreatedAt, yyxt40)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.CreatedAt)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.CreatedAt)
					} else {
						z.EncFallback(x.CreatedAt)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Difficulty\"")
					z.EncWriteMapElemValue()
					if yyn16 {
						r.EncodeNil()
					} else {
						if yyxt41 := z.Extension(x.Difficulty); yyxt41 != nil {
							z.EncExtension(x.Difficulty, yyxt41)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.Difficulty)
						} else {
							z.EncFallback(x.Difficulty)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"EVMChainID\"")
					z.EncWriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if yyxt42 := z.Extension(x.EVMChainID); yyxt42 != nil {
							z.EncExtension(x.EVMChainID, yyxt42)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.EVMChainID)
						} else {
							z.EncFallback(x.EVMChainID)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Hash\"")
					z.EncWriteMapElemValue()
					yy43 := &x.Hash
					if yyxt44 := z.Extension(yy43); yyxt44 != nil {
						z.EncExtension(yy43, yyxt44)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy43)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy43[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ID\"")
					z.EncWriteMapElemValue()
					r.EncodeUint(uint64(x.ID))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"L1BlockNumber\"")
					z.EncWriteMapElemValue()
					yy46 := &x.L1BlockNumber
					if yyxt47 := z.Extension(yy46); yyxt47 != nil {
						z.EncExtension(yy46, yyxt47)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(*yy46)
					} else {
						z.EncFallback(yy46)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Number\"")
					z.EncWriteMapElemValue()
					r.EncodeInt(int64(x.Number))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Parent\"")
					z.EncWriteMapElemValue()
					if yyn8 {
						r.EncodeNil()
					} else {
						if yyxt49 := z.Extension(x.Parent); yyxt49 != nil {
							z.EncExtension(x.Parent, yyxt49)
						} else {
							x.Parent.CodecEncodeSelf(e)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ParentHash\"")
					z.EncWriteMapElemValue()
					yy50 := &x.ParentHash
					if yyxt51 := z.Extension(yy50); yyxt51 != nil {
						z.EncExtension(yy50, yyxt51)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy50)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy50[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ReceiptsRoot\"")
					z.EncWriteMapElemValue()
					yy52 := &x.ReceiptsRoot
					if yyxt53 := z.Extension(yy52); yyxt53 != nil {
						z.EncExtension(yy52, yyxt53)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy52)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy52[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"StateRoot\"")
					z.EncWriteMapElemValue()
					yy54 := &x.StateRoot
					if yyxt55 := z.Extension(yy54); yyxt55 != nil {
						z.EncExtension(yy54, yyxt55)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy54)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy54[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Timestamp\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.Timestamp)
					} else if yyxt56 := z.Extension(x.Timestamp); yyxt56 != nil {
						z.EncExtension(x.Timestamp, yyxt56)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.Timestamp)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.Timestamp)
					} else {
						z.EncFallback(x.Timestamp)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"TotalDifficulty\"")
					z.EncWriteMapElemValue()
					if yyn17 {
						r.EncodeNil()
					} else {
						if yyxt57 := z.Extension(x.TotalDifficulty); yyxt57 != nil {
							z.EncExtension(x.TotalDifficulty, yyxt57)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.TotalDifficulty)
						} else {
							z.EncFallback(x.TotalDifficulty)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"TransactionsRoot\"")
					z.EncWriteMapElemValue()
					yy58 := &x.TransactionsRoot
					if yyxt59 := z.Extension(yy58); yyxt59 != nil {
						z.EncExtension(yy58, yyxt59)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy58)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy58[:]), e)
					}
				} else {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ID\"")
					z.EncWriteMapElemValue()
					r.EncodeUint(uint64(x.ID))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Hash\"")
					z.EncWriteMapElemValue()
					yy61 := &x.Hash
					if yyxt62 := z.Extension(yy61); yyxt62 != nil {
						z.EncExtension(yy61, yyxt62)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy61)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy61[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Number\"")
					z.EncWriteMapElemValue()
					r.EncodeInt(int64(x.Number))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"L1BlockNumber\"")
					z.EncWriteMapElemValue()
					yy64 := &x.L1BlockNumber
					if yyxt65 := z.Extension(yy64); yyxt65 != nil {
						z.EncExtension(yy64, yyxt65)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(*yy64)
					} else {
						z.EncFallback(yy64)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ParentHash\"")
					z.EncWriteMapElemValue()
					yy66 := &x.ParentHash
					if yyxt67 := z.Extension(yy66); yyxt67 != nil {
						z.EncExtension(yy66, yyxt67)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy66)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy66[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Parent\"")
					z.EncWriteMapElemValue()
					if yyn8 {
						r.EncodeNil()
					} else {
						if yyxt68 := z.Extension(x.Parent); yyxt68 != nil {
							z.EncExtension(x.Parent, yyxt68)
						} else {
							x.Parent.CodecEncodeSelf(e)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"EVMChainID\"")
					z.EncWriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						if yyxt69 := z.Extension(x.EVMChainID); yyxt69 != nil {
							z.EncExtension(x.EVMChainID, yyxt69)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.EVMChainID)
						} else {
							z.EncFallback(x.EVMChainID)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Timestamp\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.Timestamp)
					} else if yyxt70 := z.Extension(x.Timestamp); yyxt70 != nil {
						z.EncExtension(x.Timestamp, yyxt70)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.Timestamp)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.Timestamp)
					} else {
						z.EncFallback(x.Timestamp)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"CreatedAt\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.CreatedAt)
					} else if yyxt71 := z.Extension(x.CreatedAt); yyxt71 != nil {
						z.EncExtension(x.CreatedAt, yyxt71)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.CreatedAt)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.CreatedAt)
					} else {
						z.EncFallback(x.CreatedAt)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"BaseFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn12 {
						r.EncodeNil()
					} else {
						if yyxt72 := z.Extension(x.BaseFeePerGas); yyxt72 != nil {
							z.EncExtension(x.BaseFeePerGas, yyxt72)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.BaseFeePerGas)
						} else {
							z.EncFallback(x.BaseFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ReceiptsRoot\"")
					z.EncWriteMapElemValue()
					yy73 := &x.ReceiptsRoot
					if yyxt74 := z.Extension(yy73); yyxt74 != nil {
						z.EncExtension(yy73, yyxt74)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy73)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy73[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"TransactionsRoot\"")
					z.EncWriteMapElemValue()
					yy75 := &x.TransactionsRoot
					if yyxt76 := z.Extension(yy75); yyxt76 != nil {
						z.EncExtension(yy75, yyxt76)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy75)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy75[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"StateRoot\"")
					z.EncWriteMapElemValue()
					yy77 := &x.StateRoot
					if yyxt78 := z.Extension(yy77); yyxt78 != nil {
						z.EncExtension(yy77, yyxt78)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy77)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy77[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Difficulty\"")
					z.EncWriteMapElemValue()
					if yyn16 {
						r.EncodeNil()
					} else {
						if yyxt79 := z.Extension(x.Difficulty); yyxt79 != nil {
							z.EncExtension(x.Difficulty, yyxt79)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.Difficulty)
						} else {
							z.EncFallback(x.Difficulty)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"TotalDifficulty\"")
					z.EncWriteMapElemValue()
					if yyn17 {
						r.EncodeNil()
					} else {
						if yyxt80 := z.Extension(x.TotalDifficulty); yyxt80 != nil {
							z.EncExtension(x.TotalDifficulty, yyxt80)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(*x.TotalDifficulty)
						} else {
							z.EncFallback(x.TotalDifficulty)
						}
					}
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Head) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil4974 {
			*(x) = Head{}
		} else if yyct2 == codecSelferValueTypeMap4974 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray4974 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct4974)
		}
	}
}

func (x *Head) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "ID":
			x.ID = (uint64)(r.DecodeUint64())
		case "Hash":
			if yyxt6 := z.Extension(x.Hash); yyxt6 != nil {
				z.DecExtension(&x.Hash, yyxt6)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		case "Number":
			x.Number = (int64)(r.DecodeInt64())
		case "L1BlockNumber":
			if yyxt9 := z.Extension(x.L1BlockNumber); yyxt9 != nil {
				z.DecExtension(&x.L1BlockNumber, yyxt9)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.L1BlockNumber)
			} else {
				z.DecFallback(&x.L1BlockNumber, false)
			}
		case "ParentHash":
			if yyxt11 := z.Extension(x.ParentHash); yyxt11 != nil {
				z.DecExtension(&x.ParentHash, yyxt11)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ParentHash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
			}
		case "Parent":
			if r.TryNil() {
				if x.Parent != nil { // remove the if-true
					x.Parent = nil
				}
			} else {
				if x.Parent == nil {
					x.Parent = new(Head)
				}
				if yyxt13 := z.Extension(x.Parent); yyxt13 != nil {
					z.DecExtension(x.Parent, yyxt13)
				} else {
					x.Parent.CodecDecodeSelf(d)
				}
			}
		case "EVMChainID":
			if r.TryNil() {
				if x.EVMChainID != nil { // remove the if-true
					x.EVMChainID = nil
				}
			} else {
				if x.EVMChainID == nil {
					x.EVMChainID = new(pkg3_utils.Big)
				}
				if yyxt15 := z.Extension(x.EVMChainID); yyxt15 != nil {
					z.DecExtension(x.EVMChainID, yyxt15)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.EVMChainID)
				} else {
					z.DecFallback(x.EVMChainID, false)
				}
			}
		case "Timestamp":
			if z.DecBasicHandle().TimeBuiltin() {
				x.Timestamp = r.DecodeTime()
			} else if yyxt17 := z.Extension(x.Timestamp); yyxt17 != nil {
				z.DecExtension(&x.Timestamp, yyxt17)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.Timestamp)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				z.DecFallback(&x.Timestamp, false)
			}
		case "CreatedAt":
			if z.DecBasicHandle().TimeBuiltin() {
				x.CreatedAt = r.DecodeTime()
			} else if yyxt19 := z.Extension(x.CreatedAt); yyxt19 != nil {
				z.DecExtension(&x.CreatedAt, yyxt19)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.CreatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.CreatedAt)
			} else {
				z.DecFallback(&x.CreatedAt, false)
			}
		case "BaseFeePerGas":
			if r.TryNil() {
				if x.BaseFeePerGas != nil { // remove the if-true
					x.BaseFeePerGas = nil
				}
			} else {
				if x.BaseFeePerGas == nil {
					x.BaseFeePerGas = new(pkg4_assets.Wei)
				}
				if yyxt21 := z.Extension(x.BaseFeePerGas); yyxt21 != nil {
					z.DecExtension(x.BaseFeePerGas, yyxt21)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.BaseFeePerGas)
				} else {
					z.DecFallback(x.BaseFeePerGas, false)
				}
			}
		case "ReceiptsRoot":
			if yyxt23 := z.Extension(x.ReceiptsRoot); yyxt23 != nil {
				z.DecExtension(&x.ReceiptsRoot, yyxt23)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ReceiptsRoot)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ReceiptsRoot[:]), d)
			}
		case "TransactionsRoot":
			if yyxt25 := z.Extension(x.TransactionsRoot); yyxt25 != nil {
				z.DecExtension(&x.TransactionsRoot, yyxt25)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.TransactionsRoot)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.TransactionsRoot[:]), d)
			}
		case "StateRoot":
			if yyxt27 := z.Extension(x.StateRoot); yyxt27 != nil {
				z.DecExtension(&x.StateRoot, yyxt27)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.StateRoot)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.StateRoot[:]), d)
			}
		case "Difficulty":
			if r.TryNil() {
				if x.Difficulty != nil { // remove the if-true
					x.Difficulty = nil
				}
			} else {
				if x.Difficulty == nil {
					x.Difficulty = new(pkg3_utils.Big)
				}
				if yyxt29 := z.Extension(x.Difficulty); yyxt29 != nil {
					z.DecExtension(x.Difficulty, yyxt29)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Difficulty)
				} else {
					z.DecFallback(x.Difficulty, false)
				}
			}
		case "TotalDifficulty":
			if r.TryNil() {
				if x.TotalDifficulty != nil { // remove the if-true
					x.TotalDifficulty = nil
				}
			} else {
				if x.TotalDifficulty == nil {
					x.TotalDifficulty = new(pkg3_utils.Big)
				}
				if yyxt31 := z.Extension(x.TotalDifficulty); yyxt31 != nil {
					z.DecExtension(x.TotalDifficulty, yyxt31)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.TotalDifficulty)
				} else {
					z.DecFallback(x.TotalDifficulty, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Head) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ID = (uint64)(r.DecodeUint64())
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt35 := z.Extension(x.Hash); yyxt35 != nil {
		z.DecExtension(&x.Hash, yyxt35)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Number = (int64)(r.DecodeInt64())
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt38 := z.Extension(x.L1BlockNumber); yyxt38 != nil {
		z.DecExtension(&x.L1BlockNumber, yyxt38)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.L1BlockNumber)
	} else {
		z.DecFallback(&x.L1BlockNumber, false)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt40 := z.Extension(x.ParentHash); yyxt40 != nil {
		z.DecExtension(&x.ParentHash, yyxt40)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ParentHash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Parent != nil { // remove the if-true
			x.Parent = nil
		}
	} else {
		if x.Parent == nil {
			x.Parent = new(Head)
		}
		if yyxt42 := z.Extension(x.Parent); yyxt42 != nil {
			z.DecExtension(x.Parent, yyxt42)
		} else {
			x.Parent.CodecDecodeSelf(d)
		}
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.EVMChainID != nil { // remove the if-true
			x.EVMChainID = nil
		}
	} else {
		if x.EVMChainID == nil {
			x.EVMChainID = new(pkg3_utils.Big)
		}
		if yyxt44 := z.Extension(x.EVMChainID); yyxt44 != nil {
			z.DecExtension(x.EVMChainID, yyxt44)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.EVMChainID)
		} else {
			z.DecFallback(x.EVMChainID, false)
		}
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.Timestamp = r.DecodeTime()
	} else if yyxt46 := z.Extension(x.Timestamp); yyxt46 != nil {
		z.DecExtension(&x.Timestamp, yyxt46)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.Timestamp)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		z.DecFallback(&x.Timestamp, false)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.CreatedAt = r.DecodeTime()
	} else if yyxt48 := z.Extension(x.CreatedAt); yyxt48 != nil {
		z.DecExtension(&x.CreatedAt, yyxt48)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.CreatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.CreatedAt)
	} else {
		z.DecFallback(&x.CreatedAt, false)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BaseFeePerGas != nil { // remove the if-true
			x.BaseFeePerGas = nil
		}
	} else {
		if x.BaseFeePerGas == nil {
			x.BaseFeePerGas = new(pkg4_assets.Wei)
		}
		if yyxt50 := z.Extension(x.BaseFeePerGas); yyxt50 != nil {
			z.DecExtension(x.BaseFeePerGas, yyxt50)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.BaseFeePerGas)
		} else {
			z.DecFallback(x.BaseFeePerGas, false)
		}
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt52 := z.Extension(x.ReceiptsRoot); yyxt52 != nil {
		z.DecExtension(&x.ReceiptsRoot, yyxt52)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ReceiptsRoot)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ReceiptsRoot[:]), d)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt54 := z.Extension(x.TransactionsRoot); yyxt54 != nil {
		z.DecExtension(&x.TransactionsRoot, yyxt54)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.TransactionsRoot)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.TransactionsRoot[:]), d)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt56 := z.Extension(x.StateRoot); yyxt56 != nil {
		z.DecExtension(&x.StateRoot, yyxt56)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.StateRoot)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.StateRoot[:]), d)
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Difficulty != nil { // remove the if-true
			x.Difficulty = nil
		}
	} else {
		if x.Difficulty == nil {
			x.Difficulty = new(pkg3_utils.Big)
		}
		if yyxt58 := z.Extension(x.Difficulty); yyxt58 != nil {
			z.DecExtension(x.Difficulty, yyxt58)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Difficulty)
		} else {
			z.DecFallback(x.Difficulty, false)
		}
	}
	yyj32++
	yyb32 = !z.DecContainerNext(yyj32, l, yyhl32)
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.TotalDifficulty != nil { // remove the if-true
			x.TotalDifficulty = nil
		}
	} else {
		if x.TotalDifficulty == nil {
			x.TotalDifficulty = new(pkg3_utils.Big)
		}
		if yyxt60 := z.Extension(x.TotalDifficulty); yyxt60 != nil {
			z.DecExtension(x.TotalDifficulty, yyxt60)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.TotalDifficulty)
		} else {
			z.DecFallback(x.TotalDifficulty, false)
		}
	}
	yyj32++
	for yyj32++; z.DecContainerNext(yyj32, l, yyhl32); yyj32++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj32-1, "")
	}
}

func (x *Head) IsCodecEmpty() bool {
	return !(x.ID != 0 || x.Hash != pkg1_common.Hash{} || x.Number != 0 || x.L1BlockNumber != pkg2_null.Int64{} || x.ParentHash != pkg1_common.Hash{} || !(x.Timestamp.IsZero()) || !(x.CreatedAt.IsZero()) || x.ReceiptsRoot != pkg1_common.Hash{} || x.TransactionsRoot != pkg1_common.Hash{} || x.StateRoot != pkg1_common.Hash{} || false)
}

func (Block) codecSelferViaCodecgen() {}
func (x *Block) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(*x)
		} else {
			yy2arr2 := z.EncBasicHandle().StructToArray
			_ = yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn6 bool = x.BaseFeePerGas == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(6)
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.Number))
				z.EncWriteArrayElem()
				yy10 := &x.Hash
				if yyxt11 := z.Extension(yy10); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy10)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy10[:]), e)
				}
				z.EncWriteArrayElem()
				yy12 := &x.ParentHash
				if yyxt13 := z.Extension(yy12); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy12)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
				}
				if yyn6 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt14 := z.Extension(x.BaseFeePerGas); yyxt14 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt14)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteArrayElem()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt15 := z.Extension(x.Timestamp); yyxt15 != nil {
					z.EncExtension(x.Timestamp, yyxt15)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
				z.EncWriteArrayElem()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					h.encSliceTransaction(([]Transaction)(x.Transactions), e)
				} // end block: if x.Transactions slice == nil
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(6)
				if z.EncBasicHandle().Canonical {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"BaseFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if yyxt17 := z.Extension(x.BaseFeePerGas); yyxt17 != nil {
							z.EncExtension(x.BaseFeePerGas, yyxt17)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.BaseFeePerGas)
						} else {
							z.EncFallback(x.BaseFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Hash\"")
					z.EncWriteMapElemValue()
					yy18 := &x.Hash
					if yyxt19 := z.Extension(yy18); yyxt19 != nil {
						z.EncExtension(yy18, yyxt19)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy18)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy18[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Number\"")
					z.EncWriteMapElemValue()
					r.EncodeInt(int64(x.Number))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ParentHash\"")
					z.EncWriteMapElemValue()
					yy21 := &x.ParentHash
					if yyxt22 := z.Extension(yy21); yyxt22 != nil {
						z.EncExtension(yy21, yyxt22)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy21)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Timestamp\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.Timestamp)
					} else if yyxt23 := z.Extension(x.Timestamp); yyxt23 != nil {
						z.EncExtension(x.Timestamp, yyxt23)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.Timestamp)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.Timestamp)
					} else {
						z.EncFallback(x.Timestamp)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Transactions\"")
					z.EncWriteMapElemValue()
					if x.Transactions == nil {
						r.EncodeNil()
					} else {
						h.encSliceTransaction(([]Transaction)(x.Transactions), e)
					} // end block: if x.Transactions slice == nil
				} else {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Number\"")
					z.EncWriteMapElemValue()
					r.EncodeInt(int64(x.Number))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Hash\"")
					z.EncWriteMapElemValue()
					yy26 := &x.Hash
					if yyxt27 := z.Extension(yy26); yyxt27 != nil {
						z.EncExtension(yy26, yyxt27)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy26)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy26[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"ParentHash\"")
					z.EncWriteMapElemValue()
					yy28 := &x.ParentHash
					if yyxt29 := z.Extension(yy28); yyxt29 != nil {
						z.EncExtension(yy28, yyxt29)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy28)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy28[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"BaseFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if yyxt30 := z.Extension(x.BaseFeePerGas); yyxt30 != nil {
							z.EncExtension(x.BaseFeePerGas, yyxt30)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.BaseFeePerGas)
						} else {
							z.EncFallback(x.BaseFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Timestamp\"")
					z.EncWriteMapElemValue()
					if z.EncBasicHandle().TimeBuiltin() {
						r.EncodeTime(x.Timestamp)
					} else if yyxt31 := z.Extension(x.Timestamp); yyxt31 != nil {
						z.EncExtension(x.Timestamp, yyxt31)
					} else if z.EncBinary() {
						z.EncBinaryMarshal(x.Timestamp)
					} else if !z.EncBinary() && z.IsJSONHandle() {
						z.EncJSONMarshal(x.Timestamp)
					} else {
						z.EncFallback(x.Timestamp)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"Transactions\"")
					z.EncWriteMapElemValue()
					if x.Transactions == nil {
						r.EncodeNil()
					} else {
						h.encSliceTransaction(([]Transaction)(x.Transactions), e)
					} // end block: if x.Transactions slice == nil
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Block) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil4974 {
			*(x) = Block{}
		} else if yyct2 == codecSelferValueTypeMap4974 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray4974 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct4974)
		}
	}
}

func (x *Block) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Number":
			x.Number = (int64)(r.DecodeInt64())
		case "Hash":
			if yyxt6 := z.Extension(x.Hash); yyxt6 != nil {
				z.DecExtension(&x.Hash, yyxt6)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		case "ParentHash":
			if yyxt8 := z.Extension(x.ParentHash); yyxt8 != nil {
				z.DecExtension(&x.ParentHash, yyxt8)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ParentHash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
			}
		case "BaseFeePerGas":
			if r.TryNil() {
				if x.BaseFeePerGas != nil { // remove the if-true
					x.BaseFeePerGas = nil
				}
			} else {
				if x.BaseFeePerGas == nil {
					x.BaseFeePerGas = new(pkg4_assets.Wei)
				}
				if yyxt10 := z.Extension(x.BaseFeePerGas); yyxt10 != nil {
					z.DecExtension(x.BaseFeePerGas, yyxt10)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.BaseFeePerGas)
				} else {
					z.DecFallback(x.BaseFeePerGas, false)
				}
			}
		case "Timestamp":
			if z.DecBasicHandle().TimeBuiltin() {
				x.Timestamp = r.DecodeTime()
			} else if yyxt12 := z.Extension(x.Timestamp); yyxt12 != nil {
				z.DecExtension(&x.Timestamp, yyxt12)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.Timestamp)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				z.DecFallback(&x.Timestamp, false)
			}
		case "Transactions":
			h.decSliceTransaction((*[]Transaction)(&x.Transactions), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Block) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Number = (int64)(r.DecodeInt64())
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt18 := z.Extension(x.Hash); yyxt18 != nil {
		z.DecExtension(&x.Hash, yyxt18)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt20 := z.Extension(x.ParentHash); yyxt20 != nil {
		z.DecExtension(&x.ParentHash, yyxt20)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ParentHash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BaseFeePerGas != nil { // remove the if-true
			x.BaseFeePerGas = nil
		}
	} else {
		if x.BaseFeePerGas == nil {
			x.BaseFeePerGas = new(pkg4_assets.Wei)
		}
		if yyxt22 := z.Extension(x.BaseFeePerGas); yyxt22 != nil {
			z.DecExtension(x.BaseFeePerGas, yyxt22)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.BaseFeePerGas)
		} else {
			z.DecFallback(x.BaseFeePerGas, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.Timestamp = r.DecodeTime()
	} else if yyxt24 := z.Extension(x.Timestamp); yyxt24 != nil {
		z.DecExtension(&x.Timestamp, yyxt24)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.Timestamp)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		z.DecFallback(&x.Timestamp, false)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceTransaction((*[]Transaction)(&x.Transactions), d)
	yyj15++
	for yyj15++; z.DecContainerNext(yyj15, l, yyhl15); yyj15++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
}

func (x *Block) IsCodecEmpty() bool {
	return !(x.Number != 0 || x.Hash != pkg1_common.Hash{} || x.ParentHash != pkg1_common.Hash{} || !(x.Timestamp.IsZero()) || len(x.Transactions) != 0 || false)
}

func (blockInternal) codecSelferViaCodecgen() {}
func (x *blockInternal) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn6 bool = x.BaseFeePerGas == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Number))
			z.EncWriteArrayElem()
			yy10 := &x.Hash
			if yyxt11 := z.Extension(yy10); yyxt11 != nil {
				z.EncExtension(yy10, yyxt11)
			} else if !z.EncBinary() {
				z.EncTextMarshal(*yy10)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy10[:]), e)
			}
			z.EncWriteArrayElem()
			yy12 := &x.ParentHash
			if yyxt13 := z.Extension(yy12); yyxt13 != nil {
				z.EncExtension(yy12, yyxt13)
			} else if !z.EncBinary() {
				z.EncTextMarshal(*yy12)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
			}
			if yyn6 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt14 := z.Extension(x.BaseFeePerGas); yyxt14 != nil {
					z.EncExtension(x.BaseFeePerGas, yyxt14)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*x.BaseFeePerGas)
				} else {
					z.EncFallback(x.BaseFeePerGas)
				}
			}
			z.EncWriteArrayElem()
			if yyxt15 := z.Extension(x.Timestamp); yyxt15 != nil {
				z.EncExtension(x.Timestamp, yyxt15)
			} else if !z.EncBinary() {
				z.EncTextMarshal(x.Timestamp)
			} else {
				r.EncodeUint(uint64(x.Timestamp))
			}
			z.EncWriteArrayElem()
			if x.Transactions == nil {
				r.EncodeNil()
			} else {
				h.encSliceTransaction(([]Transaction)(x.Transactions), e)
			} // end block: if x.Transactions slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"baseFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt17 := z.Extension(x.BaseFeePerGas); yyxt17 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt17)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy18 := &x.Hash
				if yyxt19 := z.Extension(yy18); yyxt19 != nil {
					z.EncExtension(yy18, yyxt19)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy18)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy18[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"number\"")
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Number))
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"parentHash\"")
				z.EncWriteMapElemValue()
				yy21 := &x.ParentHash
				if yyxt22 := z.Extension(yy21); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy21)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"timestamp\"")
				z.EncWriteMapElemValue()
				if yyxt23 := z.Extension(x.Timestamp); yyxt23 != nil {
					z.EncExtension(x.Timestamp, yyxt23)
				} else if !z.EncBinary() {
					z.EncTextMarshal(x.Timestamp)
				} else {
					r.EncodeUint(uint64(x.Timestamp))
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"transactions\"")
				z.EncWriteMapElemValue()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					h.encSliceTransaction(([]Transaction)(x.Transactions), e)
				} // end block: if x.Transactions slice == nil
			} else {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"number\"")
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Number))
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy26 := &x.Hash
				if yyxt27 := z.Extension(yy26); yyxt27 != nil {
					z.EncExtension(yy26, yyxt27)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy26)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy26[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"parentHash\"")
				z.EncWriteMapElemValue()
				yy28 := &x.ParentHash
				if yyxt29 := z.Extension(yy28); yyxt29 != nil {
					z.EncExtension(yy28, yyxt29)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy28)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy28[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"baseFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt30 := z.Extension(x.BaseFeePerGas); yyxt30 != nil {
						z.EncExtension(x.BaseFeePerGas, yyxt30)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.BaseFeePerGas)
					} else {
						z.EncFallback(x.BaseFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"timestamp\"")
				z.EncWriteMapElemValue()
				if yyxt31 := z.Extension(x.Timestamp); yyxt31 != nil {
					z.EncExtension(x.Timestamp, yyxt31)
				} else if !z.EncBinary() {
					z.EncTextMarshal(x.Timestamp)
				} else {
					r.EncodeUint(uint64(x.Timestamp))
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"transactions\"")
				z.EncWriteMapElemValue()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					h.encSliceTransaction(([]Transaction)(x.Transactions), e)
				} // end block: if x.Transactions slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *blockInternal) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil4974 {
		*(x) = blockInternal{}
	} else if yyct2 == codecSelferValueTypeMap4974 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray4974 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct4974)
	}
}

func (x *blockInternal) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "number":
			x.Number = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "hash":
			if yyxt6 := z.Extension(x.Hash); yyxt6 != nil {
				z.DecExtension(&x.Hash, yyxt6)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		case "parentHash":
			if yyxt8 := z.Extension(x.ParentHash); yyxt8 != nil {
				z.DecExtension(&x.ParentHash, yyxt8)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ParentHash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
			}
		case "baseFeePerGas":
			if r.TryNil() {
				if x.BaseFeePerGas != nil { // remove the if-true
					x.BaseFeePerGas = nil
				}
			} else {
				if x.BaseFeePerGas == nil {
					x.BaseFeePerGas = new(pkg5_hexutil.Big)
				}
				if yyxt10 := z.Extension(x.BaseFeePerGas); yyxt10 != nil {
					z.DecExtension(x.BaseFeePerGas, yyxt10)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.BaseFeePerGas)
				} else {
					z.DecFallback(x.BaseFeePerGas, false)
				}
			}
		case "timestamp":
			if yyxt12 := z.Extension(x.Timestamp); yyxt12 != nil {
				z.DecExtension(&x.Timestamp, yyxt12)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				x.Timestamp = (pkg5_hexutil.Uint64)(r.DecodeUint64())
			}
		case "transactions":
			h.decSliceTransaction((*[]Transaction)(&x.Transactions), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *blockInternal) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Number = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt18 := z.Extension(x.Hash); yyxt18 != nil {
		z.DecExtension(&x.Hash, yyxt18)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt20 := z.Extension(x.ParentHash); yyxt20 != nil {
		z.DecExtension(&x.ParentHash, yyxt20)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ParentHash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ParentHash[:]), d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BaseFeePerGas != nil { // remove the if-true
			x.BaseFeePerGas = nil
		}
	} else {
		if x.BaseFeePerGas == nil {
			x.BaseFeePerGas = new(pkg5_hexutil.Big)
		}
		if yyxt22 := z.Extension(x.BaseFeePerGas); yyxt22 != nil {
			z.DecExtension(x.BaseFeePerGas, yyxt22)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.BaseFeePerGas)
		} else {
			z.DecFallback(x.BaseFeePerGas, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt24 := z.Extension(x.Timestamp); yyxt24 != nil {
		z.DecExtension(&x.Timestamp, yyxt24)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		x.Timestamp = (pkg5_hexutil.Uint64)(r.DecodeUint64())
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceTransaction((*[]Transaction)(&x.Transactions), d)
	yyj15++
	for yyj15++; z.DecContainerNext(yyj15, l, yyhl15); yyj15++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
}

func (x *blockInternal) IsCodecEmpty() bool {
	return !(x.Number != "" || x.Hash != pkg1_common.Hash{} || x.ParentHash != pkg1_common.Hash{} || x.Timestamp != 0 || len(x.Transactions) != 0 || false)
}

func (TxType) codecSelferViaCodecgen() {}
func (x TxType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if !z.EncBinary() {
		z.EncTextMarshal(&x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *TxType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		*x = (TxType)(z.C.UintV(r.DecodeUint64(), 8))
	}
}

func (transactionInternal) codecSelferViaCodecgen() {}
func (x *transactionInternal) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn3 bool = x.GasPrice == nil
		var yyn4 bool = x.Gas == nil
		var yyn5 bool = x.MaxFeePerGas == nil
		var yyn6 bool = x.MaxPriorityFeePerGas == nil
		var yyn7 bool = x.Type == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			if yyn3 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt9 := z.Extension(x.GasPrice); yyxt9 != nil {
					z.EncExtension(x.GasPrice, yyxt9)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*x.GasPrice)
				} else {
					z.EncFallback(x.GasPrice)
				}
			}
			if yyn4 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy10 := *x.Gas
				if yyxt11 := z.Extension(yy10); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else if !z.EncBinary() {
					z.EncTextMarshal(yy10)
				} else {
					r.EncodeUint(uint64(yy10))
				}
			}
			if yyn5 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt12 := z.Extension(x.MaxFeePerGas); yyxt12 != nil {
					z.EncExtension(x.MaxFeePerGas, yyxt12)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*x.MaxFeePerGas)
				} else {
					z.EncFallback(x.MaxFeePerGas)
				}
			}
			if yyn6 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt13 := z.Extension(x.MaxPriorityFeePerGas); yyxt13 != nil {
					z.EncExtension(x.MaxPriorityFeePerGas, yyxt13)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*x.MaxPriorityFeePerGas)
				} else {
					z.EncFallback(x.MaxPriorityFeePerGas)
				}
			}
			if yyn7 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy14 := *x.Type
				if yyxt15 := z.Extension(yy14); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					yy14.CodecEncodeSelf(e)
				}
			}
			z.EncWriteArrayElem()
			yy16 := &x.Hash
			if yyxt17 := z.Extension(yy16); yyxt17 != nil {
				z.EncExtension(yy16, yyxt17)
			} else if !z.EncBinary() {
				z.EncTextMarshal(*yy16)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy16[:]), e)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"gas\"")
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					yy18 := *x.Gas
					if yyxt19 := z.Extension(yy18); yyxt19 != nil {
						z.EncExtension(yy18, yyxt19)
					} else if !z.EncBinary() {
						z.EncTextMarshal(yy18)
					} else {
						r.EncodeUint(uint64(yy18))
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"gasPrice\"")
				z.EncWriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					if yyxt20 := z.Extension(x.GasPrice); yyxt20 != nil {
						z.EncExtension(x.GasPrice, yyxt20)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.GasPrice)
					} else {
						z.EncFallback(x.GasPrice)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy21 := &x.Hash
				if yyxt22 := z.Extension(yy21); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy21)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"maxFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn5 {
					r.EncodeNil()
				} else {
					if yyxt23 := z.Extension(x.MaxFeePerGas); yyxt23 != nil {
						z.EncExtension(x.MaxFeePerGas, yyxt23)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.MaxFeePerGas)
					} else {
						z.EncFallback(x.MaxFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"maxPriorityFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt24 := z.Extension(x.MaxPriorityFeePerGas); yyxt24 != nil {
						z.EncExtension(x.MaxPriorityFeePerGas, yyxt24)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.MaxPriorityFeePerGas)
					} else {
						z.EncFallback(x.MaxPriorityFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"type\"")
				z.EncWriteMapElemValue()
				if yyn7 {
					r.EncodeNil()
				} else {
					yy25 := *x.Type
					if yyxt26 := z.Extension(yy25); yyxt26 != nil {
						z.EncExtension(yy25, yyxt26)
					} else {
						yy25.CodecEncodeSelf(e)
					}
				}
			} else {
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"gasPrice\"")
				z.EncWriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					if yyxt27 := z.Extension(x.GasPrice); yyxt27 != nil {
						z.EncExtension(x.GasPrice, yyxt27)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.GasPrice)
					} else {
						z.EncFallback(x.GasPrice)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"gas\"")
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					yy28 := *x.Gas
					if yyxt29 := z.Extension(yy28); yyxt29 != nil {
						z.EncExtension(yy28, yyxt29)
					} else if !z.EncBinary() {
						z.EncTextMarshal(yy28)
					} else {
						r.EncodeUint(uint64(yy28))
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"maxFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn5 {
					r.EncodeNil()
				} else {
					if yyxt30 := z.Extension(x.MaxFeePerGas); yyxt30 != nil {
						z.EncExtension(x.MaxFeePerGas, yyxt30)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.MaxFeePerGas)
					} else {
						z.EncFallback(x.MaxFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"maxPriorityFeePerGas\"")
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if yyxt31 := z.Extension(x.MaxPriorityFeePerGas); yyxt31 != nil {
						z.EncExtension(x.MaxPriorityFeePerGas, yyxt31)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*x.MaxPriorityFeePerGas)
					} else {
						z.EncFallback(x.MaxPriorityFeePerGas)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"type\"")
				z.EncWriteMapElemValue()
				if yyn7 {
					r.EncodeNil()
				} else {
					yy32 := *x.Type
					if yyxt33 := z.Extension(yy32); yyxt33 != nil {
						z.EncExtension(yy32, yyxt33)
					} else {
						yy32.CodecEncodeSelf(e)
					}
				}
				z.EncWriteMapElemKey()
				z.EncWr().WriteStr("\"hash\"")
				z.EncWriteMapElemValue()
				yy34 := &x.Hash
				if yyxt35 := z.Extension(yy34); yyxt35 != nil {
					z.EncExtension(yy34, yyxt35)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy34)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy34[:]), e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *transactionInternal) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil4974 {
		*(x) = transactionInternal{}
	} else if yyct2 == codecSelferValueTypeMap4974 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray4974 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct4974)
	}
}

func (x *transactionInternal) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "gasPrice":
			if r.TryNil() {
				if x.GasPrice != nil { // remove the if-true
					x.GasPrice = nil
				}
			} else {
				if x.GasPrice == nil {
					x.GasPrice = new(pkg5_hexutil.Big)
				}
				if yyxt5 := z.Extension(x.GasPrice); yyxt5 != nil {
					z.DecExtension(x.GasPrice, yyxt5)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.GasPrice)
				} else {
					z.DecFallback(x.GasPrice, false)
				}
			}
		case "gas":
			if r.TryNil() {
				if x.Gas != nil { // remove the if-true
					x.Gas = nil
				}
			} else {
				if x.Gas == nil {
					x.Gas = new(pkg5_hexutil.Uint64)
				}
				if yyxt7 := z.Extension(x.Gas); yyxt7 != nil {
					z.DecExtension(x.Gas, yyxt7)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Gas)
				} else {
					*x.Gas = (pkg5_hexutil.Uint64)(r.DecodeUint64())
				}
			}
		case "maxFeePerGas":
			if r.TryNil() {
				if x.MaxFeePerGas != nil { // remove the if-true
					x.MaxFeePerGas = nil
				}
			} else {
				if x.MaxFeePerGas == nil {
					x.MaxFeePerGas = new(pkg5_hexutil.Big)
				}
				if yyxt9 := z.Extension(x.MaxFeePerGas); yyxt9 != nil {
					z.DecExtension(x.MaxFeePerGas, yyxt9)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxFeePerGas)
				} else {
					z.DecFallback(x.MaxFeePerGas, false)
				}
			}
		case "maxPriorityFeePerGas":
			if r.TryNil() {
				if x.MaxPriorityFeePerGas != nil { // remove the if-true
					x.MaxPriorityFeePerGas = nil
				}
			} else {
				if x.MaxPriorityFeePerGas == nil {
					x.MaxPriorityFeePerGas = new(pkg5_hexutil.Big)
				}
				if yyxt11 := z.Extension(x.MaxPriorityFeePerGas); yyxt11 != nil {
					z.DecExtension(x.MaxPriorityFeePerGas, yyxt11)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxPriorityFeePerGas)
				} else {
					z.DecFallback(x.MaxPriorityFeePerGas, false)
				}
			}
		case "type":
			if r.TryNil() {
				if x.Type != nil { // remove the if-true
					x.Type = nil
				}
			} else {
				if x.Type == nil {
					x.Type = new(TxType)
				}
				if yyxt13 := z.Extension(x.Type); yyxt13 != nil {
					z.DecExtension(x.Type, yyxt13)
				} else {
					x.Type.CodecDecodeSelf(d)
				}
			}
		case "hash":
			if yyxt15 := z.Extension(x.Hash); yyxt15 != nil {
				z.DecExtension(&x.Hash, yyxt15)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *transactionInternal) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.GasPrice != nil { // remove the if-true
			x.GasPrice = nil
		}
	} else {
		if x.GasPrice == nil {
			x.GasPrice = new(pkg5_hexutil.Big)
		}
		if yyxt18 := z.Extension(x.GasPrice); yyxt18 != nil {
			z.DecExtension(x.GasPrice, yyxt18)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.GasPrice)
		} else {
			z.DecFallback(x.GasPrice, false)
		}
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Gas != nil { // remove the if-true
			x.Gas = nil
		}
	} else {
		if x.Gas == nil {
			x.Gas = new(pkg5_hexutil.Uint64)
		}
		if yyxt20 := z.Extension(x.Gas); yyxt20 != nil {
			z.DecExtension(x.Gas, yyxt20)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Gas)
		} else {
			*x.Gas = (pkg5_hexutil.Uint64)(r.DecodeUint64())
		}
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.MaxFeePerGas != nil { // remove the if-true
			x.MaxFeePerGas = nil
		}
	} else {
		if x.MaxFeePerGas == nil {
			x.MaxFeePerGas = new(pkg5_hexutil.Big)
		}
		if yyxt22 := z.Extension(x.MaxFeePerGas); yyxt22 != nil {
			z.DecExtension(x.MaxFeePerGas, yyxt22)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxFeePerGas)
		} else {
			z.DecFallback(x.MaxFeePerGas, false)
		}
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.MaxPriorityFeePerGas != nil { // remove the if-true
			x.MaxPriorityFeePerGas = nil
		}
	} else {
		if x.MaxPriorityFeePerGas == nil {
			x.MaxPriorityFeePerGas = new(pkg5_hexutil.Big)
		}
		if yyxt24 := z.Extension(x.MaxPriorityFeePerGas); yyxt24 != nil {
			z.DecExtension(x.MaxPriorityFeePerGas, yyxt24)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxPriorityFeePerGas)
		} else {
			z.DecFallback(x.MaxPriorityFeePerGas, false)
		}
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Type != nil { // remove the if-true
			x.Type = nil
		}
	} else {
		if x.Type == nil {
			x.Type = new(TxType)
		}
		if yyxt26 := z.Extension(x.Type); yyxt26 != nil {
			z.DecExtension(x.Type, yyxt26)
		} else {
			x.Type.CodecDecodeSelf(d)
		}
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt28 := z.Extension(x.Hash); yyxt28 != nil {
		z.DecExtension(&x.Hash, yyxt28)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj16++
	for yyj16++; z.DecContainerNext(yyj16, l, yyhl16); yyj16++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
}

func (x *transactionInternal) IsCodecEmpty() bool {
	return !(x.Hash != pkg1_common.Hash{} || false)
}

func (Transaction) codecSelferViaCodecgen() {}
func (x *Transaction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(x)
		} else {
			yy2arr2 := z.EncBasicHandle().StructToArray
			_ = yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn3 bool = x.GasPrice == nil
			var yyn5 bool = x.MaxFeePerGas == nil
			var yyn6 bool = x.MaxPriorityFeePerGas == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(6)
				if yyn3 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt9 := z.Extension(x.GasPrice); yyxt9 != nil {
						z.EncExtension(x.GasPrice, yyxt9)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.GasPrice)
					} else {
						z.EncFallback(x.GasPrice)
					}
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.GasLimit))
				if yyn5 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt11 := z.Extension(x.MaxFeePerGas); yyxt11 != nil {
						z.EncExtension(x.MaxFeePerGas, yyxt11)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.MaxFeePerGas)
					} else {
						z.EncFallback(x.MaxFeePerGas)
					}
				}
				if yyn6 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyxt12 := z.Extension(x.MaxPriorityFeePerGas); yyxt12 != nil {
						z.EncExtension(x.MaxPriorityFeePerGas, yyxt12)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.MaxPriorityFeePerGas)
					} else {
						z.EncFallback(x.MaxPriorityFeePerGas)
					}
				}
				z.EncWriteArrayElem()
				if yyxt13 := z.Extension(x.Type); yyxt13 != nil {
					z.EncExtension(x.Type, yyxt13)
				} else {
					x.Type.CodecEncodeSelf(e)
				}
				z.EncWriteArrayElem()
				yy14 := &x.Hash
				if yyxt15 := z.Extension(yy14); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else if !z.EncBinary() {
					z.EncTextMarshal(*yy14)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy14[:]), e)
				}
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(6)
				if z.EncBasicHandle().Canonical {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"gasLimit\"")
					z.EncWriteMapElemValue()
					r.EncodeUint(uint64(x.GasLimit))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"gasPrice\"")
					z.EncWriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if yyxt17 := z.Extension(x.GasPrice); yyxt17 != nil {
							z.EncExtension(x.GasPrice, yyxt17)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.GasPrice)
						} else {
							z.EncFallback(x.GasPrice)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"hash\"")
					z.EncWriteMapElemValue()
					yy18 := &x.Hash
					if yyxt19 := z.Extension(yy18); yyxt19 != nil {
						z.EncExtension(yy18, yyxt19)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy18)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy18[:]), e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"maxFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn5 {
						r.EncodeNil()
					} else {
						if yyxt20 := z.Extension(x.MaxFeePerGas); yyxt20 != nil {
							z.EncExtension(x.MaxFeePerGas, yyxt20)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.MaxFeePerGas)
						} else {
							z.EncFallback(x.MaxFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"maxPriorityFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if yyxt21 := z.Extension(x.MaxPriorityFeePerGas); yyxt21 != nil {
							z.EncExtension(x.MaxPriorityFeePerGas, yyxt21)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.MaxPriorityFeePerGas)
						} else {
							z.EncFallback(x.MaxPriorityFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"type\"")
					z.EncWriteMapElemValue()
					if yyxt22 := z.Extension(x.Type); yyxt22 != nil {
						z.EncExtension(x.Type, yyxt22)
					} else {
						x.Type.CodecEncodeSelf(e)
					}
				} else {
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"gasPrice\"")
					z.EncWriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if yyxt23 := z.Extension(x.GasPrice); yyxt23 != nil {
							z.EncExtension(x.GasPrice, yyxt23)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.GasPrice)
						} else {
							z.EncFallback(x.GasPrice)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"gasLimit\"")
					z.EncWriteMapElemValue()
					r.EncodeUint(uint64(x.GasLimit))
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"maxFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn5 {
						r.EncodeNil()
					} else {
						if yyxt25 := z.Extension(x.MaxFeePerGas); yyxt25 != nil {
							z.EncExtension(x.MaxFeePerGas, yyxt25)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.MaxFeePerGas)
						} else {
							z.EncFallback(x.MaxFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"maxPriorityFeePerGas\"")
					z.EncWriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if yyxt26 := z.Extension(x.MaxPriorityFeePerGas); yyxt26 != nil {
							z.EncExtension(x.MaxPriorityFeePerGas, yyxt26)
						} else if !z.EncBinary() {
							z.EncTextMarshal(x.MaxPriorityFeePerGas)
						} else {
							z.EncFallback(x.MaxPriorityFeePerGas)
						}
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"type\"")
					z.EncWriteMapElemValue()
					if yyxt27 := z.Extension(x.Type); yyxt27 != nil {
						z.EncExtension(x.Type, yyxt27)
					} else {
						x.Type.CodecEncodeSelf(e)
					}
					z.EncWriteMapElemKey()
					z.EncWr().WriteStr("\"hash\"")
					z.EncWriteMapElemValue()
					yy28 := &x.Hash
					if yyxt29 := z.Extension(yy28); yyxt29 != nil {
						z.EncExtension(yy28, yyxt29)
					} else if !z.EncBinary() {
						z.EncTextMarshal(*yy28)
					} else {
						z.F.EncSliceUint8V(([]uint8)(yy28[:]), e)
					}
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Transaction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil4974 {
			*(x) = Transaction{}
		} else if yyct2 == codecSelferValueTypeMap4974 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray4974 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct4974)
		}
	}
}

func (x *Transaction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "gasPrice":
			if r.TryNil() {
				if x.GasPrice != nil { // remove the if-true
					x.GasPrice = nil
				}
			} else {
				if x.GasPrice == nil {
					x.GasPrice = new(pkg4_assets.Wei)
				}
				if yyxt5 := z.Extension(x.GasPrice); yyxt5 != nil {
					z.DecExtension(x.GasPrice, yyxt5)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.GasPrice)
				} else {
					z.DecFallback(x.GasPrice, false)
				}
			}
		case "gasLimit":
			x.GasLimit = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "maxFeePerGas":
			if r.TryNil() {
				if x.MaxFeePerGas != nil { // remove the if-true
					x.MaxFeePerGas = nil
				}
			} else {
				if x.MaxFeePerGas == nil {
					x.MaxFeePerGas = new(pkg4_assets.Wei)
				}
				if yyxt8 := z.Extension(x.MaxFeePerGas); yyxt8 != nil {
					z.DecExtension(x.MaxFeePerGas, yyxt8)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.MaxFeePerGas)
				} else {
					z.DecFallback(x.MaxFeePerGas, false)
				}
			}
		case "maxPriorityFeePerGas":
			if r.TryNil() {
				if x.MaxPriorityFeePerGas != nil { // remove the if-true
					x.MaxPriorityFeePerGas = nil
				}
			} else {
				if x.MaxPriorityFeePerGas == nil {
					x.MaxPriorityFeePerGas = new(pkg4_assets.Wei)
				}
				if yyxt10 := z.Extension(x.MaxPriorityFeePerGas); yyxt10 != nil {
					z.DecExtension(x.MaxPriorityFeePerGas, yyxt10)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.MaxPriorityFeePerGas)
				} else {
					z.DecFallback(x.MaxPriorityFeePerGas, false)
				}
			}
		case "type":
			if yyxt12 := z.Extension(x.Type); yyxt12 != nil {
				z.DecExtension(&x.Type, yyxt12)
			} else {
				x.Type.CodecDecodeSelf(d)
			}
		case "hash":
			if yyxt14 := z.Extension(x.Hash); yyxt14 != nil {
				z.DecExtension(&x.Hash, yyxt14)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Hash)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Transaction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.GasPrice != nil { // remove the if-true
			x.GasPrice = nil
		}
	} else {
		if x.GasPrice == nil {
			x.GasPrice = new(pkg4_assets.Wei)
		}
		if yyxt17 := z.Extension(x.GasPrice); yyxt17 != nil {
			z.DecExtension(x.GasPrice, yyxt17)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.GasPrice)
		} else {
			z.DecFallback(x.GasPrice, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.GasLimit = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.MaxFeePerGas != nil { // remove the if-true
			x.MaxFeePerGas = nil
		}
	} else {
		if x.MaxFeePerGas == nil {
			x.MaxFeePerGas = new(pkg4_assets.Wei)
		}
		if yyxt20 := z.Extension(x.MaxFeePerGas); yyxt20 != nil {
			z.DecExtension(x.MaxFeePerGas, yyxt20)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.MaxFeePerGas)
		} else {
			z.DecFallback(x.MaxFeePerGas, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.MaxPriorityFeePerGas != nil { // remove the if-true
			x.MaxPriorityFeePerGas = nil
		}
	} else {
		if x.MaxPriorityFeePerGas == nil {
			x.MaxPriorityFeePerGas = new(pkg4_assets.Wei)
		}
		if yyxt22 := z.Extension(x.MaxPriorityFeePerGas); yyxt22 != nil {
			z.DecExtension(x.MaxPriorityFeePerGas, yyxt22)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.MaxPriorityFeePerGas)
		} else {
			z.DecFallback(x.MaxPriorityFeePerGas, false)
		}
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt24 := z.Extension(x.Type); yyxt24 != nil {
		z.DecExtension(&x.Type, yyxt24)
	} else {
		x.Type.CodecDecodeSelf(d)
	}
	yyj15++
	yyb15 = !z.DecContainerNext(yyj15, l, yyhl15)
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt26 := z.Extension(x.Hash); yyxt26 != nil {
		z.DecExtension(&x.Hash, yyxt26)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Hash)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Hash[:]), d)
	}
	yyj15++
	for yyj15++; z.DecContainerNext(yyj15, l, yyhl15); yyj15++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
}

func (x *Transaction) IsCodecEmpty() bool {
	return !(x.GasLimit != 0 || x.Type != 0 || x.Hash != pkg1_common.Hash{} || false)
}

func (FunctionSelector) codecSelferViaCodecgen() {}
func (x *FunctionSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(*x)
		} else {
			z.F.EncSliceUint8V(([]uint8)(x[:]), e)
		}
	}
}

func (x *FunctionSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x[:]), d)
	}
}

func (UntrustedBytes) codecSelferViaCodecgen() {}
func (x UntrustedBytes) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		z.F.EncSliceUint8V(([]uint8)(x), e)
	} // end block: if x slice == nil
}

func (x *UntrustedBytes) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	z.F.DecSliceUint8X((*[]uint8)(x), d)
}

func (x codecSelfer4974) encSliceTransaction(v []Transaction, e *codec1978.Encoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			yy2.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer4974) decSliceTransaction(v *[]Transaction, d *codec1978.Decoder) {
	var h codecSelfer4974
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Transaction{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Transaction, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; z.DecContainerNext(yyj1, yyl1, yyhl1); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Transaction, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Transaction{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Transaction{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
