// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/core/chains/evm/types"
)

// HeadTracker is an autogenerated mock type for the HeadTracker type
type HeadTracker struct {
	mock.Mock
}

// Backfill provides a mock function with given fields: ctx, headWithChain, depth
func (_m *HeadTracker) Backfill(ctx context.Context, headWithChain *types.Head, depth uint) error {
	ret := _m.Called(ctx, headWithChain, depth)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Head, uint) error); ok {
		r0 = rf(ctx, headWithChain, depth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *HeadTracker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthReport provides a mock function with given fields:
func (_m *HeadTracker) HealthReport() map[string]error {
	ret := _m.Called()

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// LatestChain provides a mock function with given fields:
func (_m *HeadTracker) LatestChain() *types.Head {
	ret := _m.Called()

	var r0 *types.Head
	if rf, ok := ret.Get(0).(func() *types.Head); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Head)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *HeadTracker) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *HeadTracker) Ready() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *HeadTracker) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHeadTracker interface {
	mock.TestingT
	Cleanup(func())
}

// NewHeadTracker creates a new instance of HeadTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHeadTracker(t mockConstructorTestingTNewHeadTracker) *HeadTracker {
	mock := &HeadTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
