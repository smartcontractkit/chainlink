// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/core/chains/evm/types"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// HeadByHash provides a mock function with given fields: ctx, hash
func (_m *ORM) HeadByHash(ctx context.Context, hash common.Hash) (*types.Head, error) {
	ret := _m.Called(ctx, hash)

	var r0 *types.Head
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Head); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Head)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadsByNumbers provides a mock function with given fields: ctx, numbers
func (_m *ORM) HeadsByNumbers(ctx context.Context, numbers []uint64) ([]*types.Head, error) {
	ret := _m.Called(ctx, numbers)

	var r0 []*types.Head
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) []*types.Head); ok {
		r0 = rf(ctx, numbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Head)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint64) error); ok {
		r1 = rf(ctx, numbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdempotentInsertHead provides a mock function with given fields: ctx, head
func (_m *ORM) IdempotentInsertHead(ctx context.Context, head *types.Head) error {
	ret := _m.Called(ctx, head)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Head) error); ok {
		r0 = rf(ctx, head)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LatestHead provides a mock function with given fields: ctx
func (_m *ORM) LatestHead(ctx context.Context) (*types.Head, error) {
	ret := _m.Called(ctx)

	var r0 *types.Head
	if rf, ok := ret.Get(0).(func(context.Context) *types.Head); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Head)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestHeads provides a mock function with given fields: ctx, limit
func (_m *ORM) LatestHeads(ctx context.Context, limit uint) ([]*types.Head, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*types.Head
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*types.Head); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Head)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrimOldHeads provides a mock function with given fields: ctx, n
func (_m *ORM) TrimOldHeads(ctx context.Context, n uint) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewORMT interface {
	mock.TestingT
	Cleanup(func())
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORM(t NewORMT) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
