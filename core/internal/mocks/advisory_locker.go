// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AdvisoryLocker is an autogenerated mock type for the AdvisoryLocker type
type AdvisoryLocker struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AdvisoryLocker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryLock provides a mock function with given fields: ctx, classID, objectID
func (_m *AdvisoryLocker) TryLock(ctx context.Context, classID int32, objectID int32) error {
	ret := _m.Called(ctx, classID, objectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, classID, objectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields: ctx, classID, objectID
func (_m *AdvisoryLocker) Unlock(ctx context.Context, classID int32, objectID int32) error {
	ret := _m.Called(ctx, classID, objectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, classID, objectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithAdvisoryLock provides a mock function with given fields: ctx, classID, objectID, f
func (_m *AdvisoryLocker) WithAdvisoryLock(ctx context.Context, classID int32, objectID int32, f func() error) error {
	ret := _m.Called(ctx, classID, objectID, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, func() error) error); ok {
		r0 = rf(ctx, classID, objectID, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
