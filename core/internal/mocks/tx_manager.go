// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import accounts "github.com/ethereum/go-ethereum/accounts"
import assets "github.com/smartcontractkit/chainlink/core/store/assets"
import big "math/big"
import common "github.com/ethereum/go-ethereum/common"
import ethereum "github.com/ethereum/go-ethereum"
import mock "github.com/stretchr/testify/mock"
import models "github.com/smartcontractkit/chainlink/core/store/models"
import null "gopkg.in/guregu/null.v3"
import store "github.com/smartcontractkit/chainlink/core/store"

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

// BumpGasUntilSafe provides a mock function with given fields: hash
func (_m *TxManager) BumpGasUntilSafe(hash common.Hash) (*models.TxReceipt, store.AttemptState, error) {
	ret := _m.Called(hash)

	var r0 *models.TxReceipt
	if rf, ok := ret.Get(0).(func(common.Hash) *models.TxReceipt); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TxReceipt)
		}
	}

	var r1 store.AttemptState
	if rf, ok := ret.Get(1).(func(common.Hash) store.AttemptState); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Get(1).(store.AttemptState)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(common.Hash) error); ok {
		r2 = rf(hash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckAttempt provides a mock function with given fields: txAttempt, blockHeight
func (_m *TxManager) CheckAttempt(txAttempt *models.TxAttempt, blockHeight uint64) (*models.TxReceipt, store.AttemptState, error) {
	ret := _m.Called(txAttempt, blockHeight)

	var r0 *models.TxReceipt
	if rf, ok := ret.Get(0).(func(*models.TxAttempt, uint64) *models.TxReceipt); ok {
		r0 = rf(txAttempt, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TxReceipt)
		}
	}

	var r1 store.AttemptState
	if rf, ok := ret.Get(1).(func(*models.TxAttempt, uint64) store.AttemptState); ok {
		r1 = rf(txAttempt, blockHeight)
	} else {
		r1 = ret.Get(1).(store.AttemptState)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.TxAttempt, uint64) error); ok {
		r2 = rf(txAttempt, blockHeight)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Connect provides a mock function with given fields: _a0
func (_m *TxManager) Connect(_a0 *models.Head) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Head) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *TxManager) Connected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ContractLINKBalance provides a mock function with given fields: wr
func (_m *TxManager) ContractLINKBalance(wr models.WithdrawalRequest) (assets.Link, error) {
	ret := _m.Called(wr)

	var r0 assets.Link
	if rf, ok := ret.Get(0).(func(models.WithdrawalRequest) assets.Link); ok {
		r0 = rf(wr)
	} else {
		r0 = ret.Get(0).(assets.Link)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.WithdrawalRequest) error); ok {
		r1 = rf(wr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTx provides a mock function with given fields: to, data
func (_m *TxManager) CreateTx(to common.Address, data []byte) (*models.Tx, error) {
	ret := _m.Called(to, data)

	var r0 *models.Tx
	if rf, ok := ret.Get(0).(func(common.Address, []byte) *models.Tx); ok {
		r0 = rf(to, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, []byte) error); ok {
		r1 = rf(to, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTxWithEth provides a mock function with given fields: from, to, value
func (_m *TxManager) CreateTxWithEth(from common.Address, to common.Address, value *assets.Eth) (*models.Tx, error) {
	ret := _m.Called(from, to, value)

	var r0 *models.Tx
	if rf, ok := ret.Get(0).(func(common.Address, common.Address, *assets.Eth) *models.Tx); ok {
		r0 = rf(from, to, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address, *assets.Eth) error); ok {
		r1 = rf(from, to, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTxWithGas provides a mock function with given fields: surrogateID, to, data, gasPriceWei, gasLimit
func (_m *TxManager) CreateTxWithGas(surrogateID null.String, to common.Address, data []byte, gasPriceWei *big.Int, gasLimit uint64) (*models.Tx, error) {
	ret := _m.Called(surrogateID, to, data, gasPriceWei, gasLimit)

	var r0 *models.Tx
	if rf, ok := ret.Get(0).(func(null.String, common.Address, []byte, *big.Int, uint64) *models.Tx); ok {
		r0 = rf(surrogateID, to, data, gasPriceWei, gasLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(null.String, common.Address, []byte, *big.Int, uint64) error); ok {
		r1 = rf(surrogateID, to, data, gasPriceWei, gasLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields:
func (_m *TxManager) Disconnect() {
	_m.Called()
}

// GetBlockByNumber provides a mock function with given fields: hex
func (_m *TxManager) GetBlockByNumber(hex string) (models.BlockHeader, error) {
	ret := _m.Called(hex)

	var r0 models.BlockHeader
	if rf, ok := ret.Get(0).(func(string) models.BlockHeader); ok {
		r0 = rf(hex)
	} else {
		r0 = ret.Get(0).(models.BlockHeader)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainID provides a mock function with given fields:
func (_m *TxManager) GetChainID() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEthBalance provides a mock function with given fields: address
func (_m *TxManager) GetEthBalance(address common.Address) (*assets.Eth, error) {
	ret := _m.Called(address)

	var r0 *assets.Eth
	if rf, ok := ret.Get(0).(func(common.Address) *assets.Eth); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Eth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLINKBalance provides a mock function with given fields: address
func (_m *TxManager) GetLINKBalance(address common.Address) (*assets.Link, error) {
	ret := _m.Called(address)

	var r0 *assets.Link
	if rf, ok := ret.Get(0).(func(common.Address) *assets.Link); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: q
func (_m *TxManager) GetLogs(q ethereum.FilterQuery) ([]models.Log, error) {
	ret := _m.Called(q)

	var r0 []models.Log
	if rf, ok := ret.Get(0).(func(ethereum.FilterQuery) []models.Log); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ethereum.FilterQuery) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxReceipt provides a mock function with given fields: _a0
func (_m *TxManager) GetTxReceipt(_a0 common.Hash) (*models.TxReceipt, error) {
	ret := _m.Called(_a0)

	var r0 *models.TxReceipt
	if rf, ok := ret.Get(0).(func(common.Hash) *models.TxReceipt); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TxReceipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextActiveAccount provides a mock function with given fields:
func (_m *TxManager) NextActiveAccount() *store.ManagedAccount {
	ret := _m.Called()

	var r0 *store.ManagedAccount
	if rf, ok := ret.Get(0).(func() *store.ManagedAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.ManagedAccount)
		}
	}

	return r0
}

// OnNewHead provides a mock function with given fields: _a0
func (_m *TxManager) OnNewHead(_a0 *models.Head) {
	_m.Called(_a0)
}

// Register provides a mock function with given fields: _a0
func (_m *TxManager) Register(_a0 []accounts.Account) {
	_m.Called(_a0)
}

// SubscribeToLogs provides a mock function with given fields: channel, q
func (_m *TxManager) SubscribeToLogs(channel chan<- models.Log, q ethereum.FilterQuery) (models.EthSubscription, error) {
	ret := _m.Called(channel, q)

	var r0 models.EthSubscription
	if rf, ok := ret.Get(0).(func(chan<- models.Log, ethereum.FilterQuery) models.EthSubscription); ok {
		r0 = rf(channel, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.EthSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chan<- models.Log, ethereum.FilterQuery) error); ok {
		r1 = rf(channel, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToNewHeads provides a mock function with given fields: channel
func (_m *TxManager) SubscribeToNewHeads(channel chan<- models.BlockHeader) (models.EthSubscription, error) {
	ret := _m.Called(channel)

	var r0 models.EthSubscription
	if rf, ok := ret.Get(0).(func(chan<- models.BlockHeader) models.EthSubscription); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.EthSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chan<- models.BlockHeader) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawLINK provides a mock function with given fields: wr
func (_m *TxManager) WithdrawLINK(wr models.WithdrawalRequest) (common.Hash, error) {
	ret := _m.Called(wr)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(models.WithdrawalRequest) common.Hash); ok {
		r0 = rf(wr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.WithdrawalRequest) error); ok {
		r1 = rf(wr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
