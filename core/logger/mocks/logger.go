// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	logger "github.com/smartcontractkit/chainlink/v2/core/logger"
	mock "github.com/stretchr/testify/mock"

	zapcore "go.uber.org/zap/zapcore"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Critical provides a mock function with given fields: args
func (_m *Logger) Critical(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Criticalf provides a mock function with given fields: format, values
func (_m *Logger) Criticalf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Criticalw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Criticalw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: args
func (_m *Logger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: format, values
func (_m *Logger) Debugf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Debugw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Debugw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: args
func (_m *Logger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, values
func (_m *Logger) Errorf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Errorw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Errorw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: args
func (_m *Logger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, values
func (_m *Logger) Fatalf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Fatalw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Fatalw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Helper provides a mock function with given fields: skip
func (_m *Logger) Helper(skip int) logger.Logger {
	ret := _m.Called(skip)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(int) logger.Logger); ok {
		r0 = rf(skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Info provides a mock function with given fields: args
func (_m *Logger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: format, values
func (_m *Logger) Infof(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Infow provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Infow(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Name provides a mock function with given fields:
func (_m *Logger) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Named provides a mock function with given fields: name
func (_m *Logger) Named(name string) logger.Logger {
	ret := _m.Called(name)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(string) logger.Logger); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Panic provides a mock function with given fields: args
func (_m *Logger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panicf provides a mock function with given fields: format, values
func (_m *Logger) Panicf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Panicw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Panicw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Recover provides a mock function with given fields: panicErr
func (_m *Logger) Recover(panicErr interface{}) {
	_m.Called(panicErr)
}

// SetLogLevel provides a mock function with given fields: _a0
func (_m *Logger) SetLogLevel(_a0 zapcore.Level) {
	_m.Called(_a0)
}

// Sync provides a mock function with given fields:
func (_m *Logger) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trace provides a mock function with given fields: args
func (_m *Logger) Trace(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Tracef provides a mock function with given fields: format, values
func (_m *Logger) Tracef(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Tracew provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Tracew(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: args
func (_m *Logger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: format, values
func (_m *Logger) Warnf(format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// Warnw provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Warnw(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: args
func (_m *Logger) With(args ...interface{}) logger.Logger {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) logger.Logger); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
