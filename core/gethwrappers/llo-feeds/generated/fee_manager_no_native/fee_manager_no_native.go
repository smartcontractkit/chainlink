// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fee_manager_no_native

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CommonAddressAndWeight struct {
	Addr   common.Address
	Weight uint64
}

type CommonAsset struct {
	AssetAddress common.Address
	Amount       *big.Int
}

type IRewardManagerFeePayment struct {
	PoolId [32]byte
	Amount *big.Int
}

var FeeManagerNoNativeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExpiredReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceivingAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSurcharge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeBillingDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDeficit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCommon.Asset\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCommon.Asset\",\"name\":\"reward\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedDiscount\",\"type\":\"uint256\"}],\"name\":\"DiscountApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"indexed\":false,\"internalType\":\"structIRewardManager.FeePayment[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"name\":\"InsufficientLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"linkQuantity\",\"type\":\"uint256\"}],\"name\":\"LinkDeficitCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newSurcharge\",\"type\":\"uint64\"}],\"name\":\"NativeSurchargeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"discount\",\"type\":\"uint64\"}],\"name\":\"SubscriberDiscountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"quantity\",\"type\":\"uint192\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"quoteAddress\",\"type\":\"address\"}],\"name\":\"getFeeAndReward\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structCommon.Asset\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structCommon.Asset\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_linkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_nativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_proxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_rewardManager\",\"outputs\":[{\"internalType\":\"contractIRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"payLinkDeficit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"processFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"processFeeBulk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"s_linkDeficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_nativeSurcharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_subscriberDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"internalType\":\"structCommon.AddressAndWeight[]\",\"name\":\"rewardRecipientAndWeights\",\"type\":\"tuple[]\"}],\"name\":\"setFeeRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"surcharge\",\"type\":\"uint64\"}],\"name\":\"setNativeSurcharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"discount\",\"type\":\"uint64\"}],\"name\":\"updateSubscriberDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"quantity\",\"type\":\"uint192\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b50604051620033a4380380620033a4833981016040819052620000359162000288565b33806000816200008c5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000bf57620000bf81620001c0565b5050506001600160a01b0384161580620000e057506001600160a01b038316155b80620000f357506001600160a01b038216155b806200010657506001600160a01b038116155b15620001255760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03848116608081905284821660a05283821660c05290821660e081905260405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af11580156200018f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b59190620002e5565b505050505062000310565b336001600160a01b038216036200021a5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000083565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b03811681146200028357600080fd5b919050565b600080600080608085870312156200029f57600080fd5b620002aa856200026b565b9350620002ba602086016200026b565b9250620002ca604086016200026b565b9150620002da606086016200026b565b905092959194509250565b600060208284031215620002f857600080fd5b815180151581146200030957600080fd5b9392505050565b60805160a05160c05160e051612fb9620003eb60003960008181610275015281816114a60152818161163401528181611dbd0152611fe9015260008181610335015281816107fb01528181610ddf015261157a0152600081816102ee01528181610c02015281816110170152818161106e0152818161131b0152611d510152600081816104ba015281816109ae01528181610bab01528181610d4201528181610f080152818161103c015281816110c50152818161120a01528181611277015281816112b7015281816119f00152611e5c0152612fb96000f3fe60806040526004361061016a5760003560e01c806379ba5097116100cb578063dba45fe01161007f578063ea4b861b11610059578063ea4b861b146104a8578063f2fde38b146104dc578063f65df962146104fc57600080fd5b8063dba45fe01461040a578063e03dab1a1461041d578063e389d9a41461048857600080fd5b80638da5cb5b116100b05780638da5cb5b146103aa578063ce7817d1146103d5578063d09dc339146103f557600080fd5b806379ba50971461035757806387d6d8431461036c57600080fd5b80633aa5ac0711610122578063638786681161010757806363878668146102dc5780636c2f1a17146103105780636d1342cb1461032357600080fd5b80633aa5ac071461026357806350538094146102bc57600080fd5b8063181f5a7711610153578063181f5a77146101df5780631d4d84a21461022b57806332f5f7461461024d57600080fd5b8063013f542b1461016f57806301ffc9a7146101af575b600080fd5b34801561017b57600080fd5b5061019c61018a366004612593565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101bb57600080fd5b506101cf6101ca3660046125ac565b61051c565b60405190151581526020016101a6565b3480156101eb57600080fd5b50604080518082018252601881527f4665654d616e616765724e6f4e617469766520322e302e300000000000000000602082015290516101a69190612612565b34801561023757600080fd5b5061024b6102463660046126bb565b6105b5565b005b34801561025957600080fd5b5061019c60045481565b34801561026f57600080fd5b506102977f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b3480156102c857600080fd5b5061024b6102d736600461271e565b610749565b3480156102e857600080fd5b506102977f000000000000000000000000000000000000000000000000000000000000000081565b61024b61031e366004612782565b6107e3565b34801561032f57600080fd5b506102977f000000000000000000000000000000000000000000000000000000000000000081565b34801561036357600080fd5b5061024b610a53565b34801561037857600080fd5b5061019c610387366004612831565b600260209081526000938452604080852082529284528284209052825290205481565b3480156103b657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610297565b3480156103e157600080fd5b5061024b6103f0366004612868565b610b55565b34801561040157600080fd5b5061019c610d11565b61024b6104183660046128b9565b610dc7565b34801561042957600080fd5b5061043d610438366004612a17565b610f7e565b60408051845173ffffffffffffffffffffffffffffffffffffffff9081168252602095860151868301528451169181019190915292909101516060830152608082015260a0016101a6565b34801561049457600080fd5b5061024b6104a3366004612593565b61137d565b3480156104b457600080fd5b506102977f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e857600080fd5b5061024b6104f7366004612a70565b61154e565b34801561050857600080fd5b5061024b610517366004612a8d565b611562565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fdba45fe00000000000000000000000000000000000000000000000000000000014806105af57507fffffffff0000000000000000000000000000000000000000000000000000000082167f6c2f1a1700000000000000000000000000000000000000000000000000000000145b92915050565b6105bd6116a4565b73ffffffffffffffffffffffffffffffffffffffff83166106925760008273ffffffffffffffffffffffffffffffffffffffff168277ffffffffffffffffffffffffffffffffffffffffffffffff1660405160006040518083038185875af1925050503d806000811461064c576040519150601f19603f3d011682016040523d82523d6000602084013e610651565b606091505b505090508061068c576040517fef2af20100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6106cd73ffffffffffffffffffffffffffffffffffffffff84168377ffffffffffffffffffffffffffffffffffffffffffffffff8416611727565b6040805133815273ffffffffffffffffffffffffffffffffffffffff848116602083015285168183015277ffffffffffffffffffffffffffffffffffffffffffffffff8316606082015290517f7ff78a71698bdb18dcca96f52ab25e0a1b146fb6a49adf8e6845299e49021f299181900360800190a15b505050565b6107516116a4565b670de0b6b3a764000067ffffffffffffffff8216111561079d576040517f05e8ac2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff811660048190556040519081527f08f7c0d17932ddb8523bc06754d42ff19ebc77d76a8b9bfde02c28ab1ed3d6399060200160405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610852576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b341561088a576040517fa5cde11d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008467ffffffffffffffff8111156108a5576108a561293d565b6040519080825280602002602001820160405280156108de57816020015b6108cb612506565b8152602001906001900390816108c35790505b5090506000806000805b88811015610a295760008060006109248d8d8681811061090a5761090a612b0c565b905060200281019061091c9190612b3b565b8d8d8d6117fb565b9250925092508260200151600014610a155760405180608001604052808e8e8781811061095357610953612b0c565b90506020028101906109659190612b3b565b61096e91612ba0565b81526020018481526020018381526020018281525088868061098f90612c0b565b9750815181106109a1576109a1612b0c565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1603610a0e57866001019650610a15565b8560010195505b50505080610a2290612c0b565b90506108e8565b5082151580610a3757508115155b15610a4857610a488585858561190b565b505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610b5d6116a4565b670de0b6b3a764000067ffffffffffffffff82161115610ba9576040517f997ea36000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610c5157507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610c88576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff848116600081815260026020908152604080832088845282528083209487168084529482529182902067ffffffffffffffff86169081905582519485529084015285927f5eba5a8afa39780f0f99b6cbeb95f3da6a7040ca00abd46bdc91a0a060134139910160405180910390a350505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190612c43565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610e36576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3415610e6e576040517fa5cde11d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000610e8088888888886117fb565b604080516001808252818301909252939650919450925060009190816020015b610ea8612506565b815260200190600190039081610ea0575050604080516080810190915290915080610ed38a8c612ba0565b81526020018581526020018481526020018381525081600081518110610efb57610efb612b0c565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff1603610f7057610f6b85826001600061190b565b610a48565b610a4885826000600161190b565b6040805180820182526000808252602080830182905283518085018552828152808201839052845180860186528381528083018490528551808701909652838652918501839052929382610fd188612c5c565b90507fffff00000000000000000000000000000000000000000000000000000000000080821690810161106c57505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811683527f0000000000000000000000000000000000000000000000000000000000000000168152909350915060009050611374565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415801561111457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b1561114b576040517ff861803000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008b8060200190518101906111649190612cb5565b77ffffffffffffffffffffffffffffffffffffffffffffffff91821698509116955063ffffffff16935050504282101590506111cc576040517fb6c405f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808e16600090815260026020908152604080832089845282528083208f851684529091529020547f0000000000000000000000000000000000000000000000000000000000000000909116875261125b61124382670de0b6b3a7640000612d27565b61124d9086612d3a565b670de0b6b3a7640000612060565b602088015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908d16036112e85773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016885260208088015190890152611365565b6004546000906113049061124390670de0b6b3a7640000612d51565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a52905061135e61135483670de0b6b3a7640000612d27565b61124d9083612d3a565b60208a0152505b96995094975094955050505050505b93509350939050565b6113856116a4565b600081815260036020526040812054908190036113ce576040517f03aad31200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600360205260408082208290558051600180825281830190925290816020015b60408051808201909152600080825260208201528152602001906001900390816113f357905050905060405180604001604052808481526020018377ffffffffffffffffffffffffffffffffffffffffffffffff168152508160008151811061145e5761145e612b0c565b60209081029190910101526040517fb0d9fa1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b0d9fa19906114dd9084903090600401612dc4565b600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050827f843f0b103e50b42b08f9d30f12f961845a6d02623730872e24644899c0dd98958360405161154191815260200190565b60405180910390a2505050565b6115566116a4565b61155f81612098565b50565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906115c0575060005473ffffffffffffffffffffffffffffffffffffffff163314155b156115f7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f14060f2300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906314060f239061166d90869086908690600401612dfc565b600060405180830381600087803b15801561168757600080fd5b505af115801561169b573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610ad0565b565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107449084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261218d565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260003073ffffffffffffffffffffffffffffffffffffffff851603611874576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611882888a018a612e7c565b91505060008161189190612c5c565b905060007e010000000000000000000000000000000000000000000000000000000000007fffff0000000000000000000000000000000000000000000000000000000000008316146118ec576118e9888a018a612a70565b90505b6118f7878483610f7e565b955095509550505050955095509592505050565b60008267ffffffffffffffff8111156119265761192661293d565b60405190808252806020026020018201604052801561196b57816020015b60408051808201909152600080825260208201528152602001906001900390816119445790505b50905060008267ffffffffffffffff8111156119895761198961293d565b6040519080825280602002602001820160405280156119ce57816020015b60408051808201909152600080825260208201528152602001906001900390816119a75790505b5090506000808080806119e1888a612d51565b905060005b81811015611d30577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b8281518110611a3757611a37612b0c565b6020026020010151602001516000015173ffffffffffffffffffffffffffffffffffffffff1603611afd5760405180604001604052808c8381518110611a7f57611a7f612b0c565b60200260200101516000015181526020018c8381518110611aa257611aa2612b0c565b6020026020010151604001516020015177ffffffffffffffffffffffffffffffffffffffffffffffff16815250888580611adb90612c0b565b965081518110611aed57611aed612b0c565b6020026020010181905250611bf2565b60405180604001604052808c8381518110611b1a57611b1a612b0c565b60200260200101516000015181526020018c8381518110611b3d57611b3d612b0c565b6020026020010151604001516020015177ffffffffffffffffffffffffffffffffffffffffffffffff16815250878480611b7690612c0b565b955081518110611b8857611b88612b0c565b60200260200101819052508a8181518110611ba557611ba5612b0c565b6020026020010151602001516020015186611bc09190612d51565b95508a8181518110611bd457611bd4612b0c565b6020026020010151604001516020015185611bef9190612d51565b94505b8a8181518110611c0457611c04612b0c565b602002602001015160600151600014611d20578b73ffffffffffffffffffffffffffffffffffffffff168b8281518110611c4057611c40612b0c565b6020026020010151600001517f88b15eb682210089cddf967648e2cb2a4535aeadc8f8f36050922e33c04e71258d8481518110611c7f57611c7f612b0c565b6020026020010151602001518e8581518110611c9d57611c9d612b0c565b6020026020010151604001518f8681518110611cbb57611cbb612b0c565b602002602001015160600151604051611d1793929190835173ffffffffffffffffffffffffffffffffffffffff908116825260209485015185830152835116604082015291909201516060820152608081019190915260a00190565b60405180910390a35b611d2981612c0b565b90506119e6565b508415611d7957611d7973ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168c3088612299565b865115611e27576040517fb0d9fa1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b0d9fa1990611df4908a908f90600401612dc4565b600060405180830381600087803b158015611e0e57600080fd5b505af1158015611e22573d6000803e3d6000fd5b505050505b855115612053576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190612c43565b841115611fac5760005b8651811015611f6f57868181518110611f0157611f01612b0c565b60200260200101516020015177ffffffffffffffffffffffffffffffffffffffffffffffff1660036000898481518110611f3d57611f3d612b0c565b60209081029190910181015151825281019190915260400160002080549091019055611f6881612c0b565b9050611ee6565b507ff52e5907b69d97c33392936c12d78b494463b78c5b72df50b4c497eee5720b6786604051611f9f9190612f20565b60405180910390a1612053565b6040517fb0d9fa1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b0d9fa19906120209089903090600401612dc4565b600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b505050505b5050505050505050505050565b6000821561208e5781612074600185612d27565b61207e9190612f33565b612089906001612d51565b612091565b60005b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff821603612117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610ad0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006121ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122f79092919063ffffffff16565b805190915015610744578080602001905181019061220d9190612f6e565b610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ad0565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261068c9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611779565b6060612306848460008561230e565b949350505050565b6060824710156123a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ad0565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516123c99190612f90565b60006040518083038185875af1925050503d8060008114612406576040519150601f19603f3d011682016040523d82523d6000602084013e61240b565b606091505b509150915061241c87838387612427565b979650505050505050565b606083156124bd5782516000036124b65773ffffffffffffffffffffffffffffffffffffffff85163b6124b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad0565b5081612306565b61230683838151156124d25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad09190612612565b60405180608001604052806000801916815260200161254e6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b81526020016125866040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8152602001600081525090565b6000602082840312156125a557600080fd5b5035919050565b6000602082840312156125be57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461209157600080fd5b60005b838110156126095781810151838201526020016125f1565b50506000910152565b60208152600082518060208401526126318160408501602087016125ee565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461155f57600080fd5b803561269081612663565b919050565b77ffffffffffffffffffffffffffffffffffffffffffffffff8116811461155f57600080fd5b6000806000606084860312156126d057600080fd5b83356126db81612663565b925060208401356126eb81612663565b915060408401356126fb81612695565b809150509250925092565b803567ffffffffffffffff8116811461269057600080fd5b60006020828403121561273057600080fd5b61209182612706565b60008083601f84011261274b57600080fd5b50813567ffffffffffffffff81111561276357600080fd5b60208301915083602082850101111561277b57600080fd5b9250929050565b60008060008060006060868803121561279a57600080fd5b853567ffffffffffffffff808211156127b257600080fd5b818801915088601f8301126127c657600080fd5b8135818111156127d557600080fd5b8960208260051b85010111156127ea57600080fd5b60209283019750955090870135908082111561280557600080fd5b5061281288828901612739565b9094509250612825905060408701612685565b90509295509295909350565b60008060006060848603121561284657600080fd5b833561285181612663565b92506020840135915060408401356126fb81612663565b6000806000806080858703121561287e57600080fd5b843561288981612663565b93506020850135925060408501356128a081612663565b91506128ae60608601612706565b905092959194509250565b6000806000806000606086880312156128d157600080fd5b853567ffffffffffffffff808211156128e957600080fd5b6128f589838a01612739565b9097509550602088013591508082111561290e57600080fd5b5061291b88828901612739565b909450925050604086013561292f81612663565b809150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261297d57600080fd5b813567ffffffffffffffff808211156129985761299861293d565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156129de576129de61293d565b816040528381528660208588010111156129f757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215612a2c57600080fd5b8335612a3781612663565b9250602084013567ffffffffffffffff811115612a5357600080fd5b612a5f8682870161296c565b92505060408401356126fb81612663565b600060208284031215612a8257600080fd5b813561209181612663565b600080600060408486031215612aa257600080fd5b83359250602084013567ffffffffffffffff80821115612ac157600080fd5b818601915086601f830112612ad557600080fd5b813581811115612ae457600080fd5b8760208260061b8501011115612af957600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612b7057600080fd5b83018035915067ffffffffffffffff821115612b8b57600080fd5b60200191503681900382131561277b57600080fd5b803560208310156105af577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c3c57612c3c612bdc565b5060010190565b600060208284031215612c5557600080fd5b5051919050565b80516020808301519190811015612c9b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b805163ffffffff8116811461269057600080fd5b60008060008060008060c08789031215612cce57600080fd5b86519550612cde60208801612ca1565b9450612cec60408801612ca1565b93506060870151612cfc81612695565b6080880151909350612d0d81612695565b9150612d1b60a08801612ca1565b90509295509295509295565b818103818111156105af576105af612bdc565b80820281158282048414176105af576105af612bdc565b808201808211156105af576105af612bdc565b600081518084526020808501945080840160005b83811015612db95781518051885283015177ffffffffffffffffffffffffffffffffffffffffffffffff168388015260409096019590820190600101612d78565b509495945050505050565b604081526000612dd76040830185612d64565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b8381526040602080830182905282820184905260009190859060608501845b87811015612e6f578335612e2e81612663565b73ffffffffffffffffffffffffffffffffffffffff16825267ffffffffffffffff612e5a858501612706565b16828401529284019290840190600101612e1b565b5098975050505050505050565b60008060808385031215612e8f57600080fd5b83601f840112612e9e57600080fd5b6040516060810167ffffffffffffffff8282108183111715612ec257612ec261293d565b816040528291506060860187811115612eda57600080fd5b865b81811015612ef4578035845260209384019301612edc565b5092945091359180831115612f0857600080fd5b5050612f168582860161296c565b9150509250929050565b6020815260006120916020830184612d64565b600082612f69577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215612f8057600080fd5b8151801515811461209157600080fd5b60008251612fa28184602087016125ee565b919091019291505056fea164736f6c6343000813000a",
}

var FeeManagerNoNativeABI = FeeManagerNoNativeMetaData.ABI

var FeeManagerNoNativeBin = FeeManagerNoNativeMetaData.Bin

func DeployFeeManagerNoNative(auth *bind.TransactOpts, backend bind.ContractBackend, _linkAddress common.Address, _nativeAddress common.Address, _proxyAddress common.Address, _rewardManagerAddress common.Address) (common.Address, *types.Transaction, *FeeManagerNoNative, error) {
	parsed, err := FeeManagerNoNativeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeManagerNoNativeBin), backend, _linkAddress, _nativeAddress, _proxyAddress, _rewardManagerAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeManagerNoNative{address: address, abi: *parsed, FeeManagerNoNativeCaller: FeeManagerNoNativeCaller{contract: contract}, FeeManagerNoNativeTransactor: FeeManagerNoNativeTransactor{contract: contract}, FeeManagerNoNativeFilterer: FeeManagerNoNativeFilterer{contract: contract}}, nil
}

type FeeManagerNoNative struct {
	address common.Address
	abi     abi.ABI
	FeeManagerNoNativeCaller
	FeeManagerNoNativeTransactor
	FeeManagerNoNativeFilterer
}

type FeeManagerNoNativeCaller struct {
	contract *bind.BoundContract
}

type FeeManagerNoNativeTransactor struct {
	contract *bind.BoundContract
}

type FeeManagerNoNativeFilterer struct {
	contract *bind.BoundContract
}

type FeeManagerNoNativeSession struct {
	Contract     *FeeManagerNoNative
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type FeeManagerNoNativeCallerSession struct {
	Contract *FeeManagerNoNativeCaller
	CallOpts bind.CallOpts
}

type FeeManagerNoNativeTransactorSession struct {
	Contract     *FeeManagerNoNativeTransactor
	TransactOpts bind.TransactOpts
}

type FeeManagerNoNativeRaw struct {
	Contract *FeeManagerNoNative
}

type FeeManagerNoNativeCallerRaw struct {
	Contract *FeeManagerNoNativeCaller
}

type FeeManagerNoNativeTransactorRaw struct {
	Contract *FeeManagerNoNativeTransactor
}

func NewFeeManagerNoNative(address common.Address, backend bind.ContractBackend) (*FeeManagerNoNative, error) {
	abi, err := abi.JSON(strings.NewReader(FeeManagerNoNativeABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindFeeManagerNoNative(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNative{address: address, abi: abi, FeeManagerNoNativeCaller: FeeManagerNoNativeCaller{contract: contract}, FeeManagerNoNativeTransactor: FeeManagerNoNativeTransactor{contract: contract}, FeeManagerNoNativeFilterer: FeeManagerNoNativeFilterer{contract: contract}}, nil
}

func NewFeeManagerNoNativeCaller(address common.Address, caller bind.ContractCaller) (*FeeManagerNoNativeCaller, error) {
	contract, err := bindFeeManagerNoNative(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeCaller{contract: contract}, nil
}

func NewFeeManagerNoNativeTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeManagerNoNativeTransactor, error) {
	contract, err := bindFeeManagerNoNative(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeTransactor{contract: contract}, nil
}

func NewFeeManagerNoNativeFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeManagerNoNativeFilterer, error) {
	contract, err := bindFeeManagerNoNative(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeFilterer{contract: contract}, nil
}

func bindFeeManagerNoNative(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FeeManagerNoNativeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeManagerNoNative.Contract.FeeManagerNoNativeCaller.contract.Call(opts, result, method, params...)
}

func (_FeeManagerNoNative *FeeManagerNoNativeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.FeeManagerNoNativeTransactor.contract.Transfer(opts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.FeeManagerNoNativeTransactor.contract.Transact(opts, method, params...)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeManagerNoNative.Contract.contract.Call(opts, result, method, params...)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.contract.Transfer(opts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.contract.Transact(opts, method, params...)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) GetFeeAndReward(opts *bind.CallOpts, subscriber common.Address, report []byte, quoteAddress common.Address) (CommonAsset, CommonAsset, *big.Int, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "getFeeAndReward", subscriber, report, quoteAddress)

	if err != nil {
		return *new(CommonAsset), *new(CommonAsset), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(CommonAsset)).(*CommonAsset)
	out1 := *abi.ConvertType(out[1], new(CommonAsset)).(*CommonAsset)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) GetFeeAndReward(subscriber common.Address, report []byte, quoteAddress common.Address) (CommonAsset, CommonAsset, *big.Int, error) {
	return _FeeManagerNoNative.Contract.GetFeeAndReward(&_FeeManagerNoNative.CallOpts, subscriber, report, quoteAddress)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) GetFeeAndReward(subscriber common.Address, report []byte, quoteAddress common.Address) (CommonAsset, CommonAsset, *big.Int, error) {
	return _FeeManagerNoNative.Contract.GetFeeAndReward(&_FeeManagerNoNative.CallOpts, subscriber, report, quoteAddress)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) ILinkAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "i_linkAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) ILinkAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.ILinkAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) ILinkAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.ILinkAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) INativeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "i_nativeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) INativeAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.INativeAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) INativeAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.INativeAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) IProxyAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "i_proxyAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) IProxyAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.IProxyAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) IProxyAddress() (common.Address, error) {
	return _FeeManagerNoNative.Contract.IProxyAddress(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) IRewardManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "i_rewardManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) IRewardManager() (common.Address, error) {
	return _FeeManagerNoNative.Contract.IRewardManager(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) IRewardManager() (common.Address, error) {
	return _FeeManagerNoNative.Contract.IRewardManager(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "linkAvailableForPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) LinkAvailableForPayment() (*big.Int, error) {
	return _FeeManagerNoNative.Contract.LinkAvailableForPayment(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) LinkAvailableForPayment() (*big.Int, error) {
	return _FeeManagerNoNative.Contract.LinkAvailableForPayment(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) Owner() (common.Address, error) {
	return _FeeManagerNoNative.Contract.Owner(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) Owner() (common.Address, error) {
	return _FeeManagerNoNative.Contract.Owner(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) SLinkDeficit(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "s_linkDeficit", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SLinkDeficit(arg0 [32]byte) (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SLinkDeficit(&_FeeManagerNoNative.CallOpts, arg0)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) SLinkDeficit(arg0 [32]byte) (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SLinkDeficit(&_FeeManagerNoNative.CallOpts, arg0)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) SNativeSurcharge(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "s_nativeSurcharge")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SNativeSurcharge() (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SNativeSurcharge(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) SNativeSurcharge() (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SNativeSurcharge(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) SSubscriberDiscounts(opts *bind.CallOpts, arg0 common.Address, arg1 [32]byte, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "s_subscriberDiscounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SSubscriberDiscounts(arg0 common.Address, arg1 [32]byte, arg2 common.Address) (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SSubscriberDiscounts(&_FeeManagerNoNative.CallOpts, arg0, arg1, arg2)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) SSubscriberDiscounts(arg0 common.Address, arg1 [32]byte, arg2 common.Address) (*big.Int, error) {
	return _FeeManagerNoNative.Contract.SSubscriberDiscounts(&_FeeManagerNoNative.CallOpts, arg0, arg1, arg2)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeManagerNoNative.Contract.SupportsInterface(&_FeeManagerNoNative.CallOpts, interfaceId)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeManagerNoNative.Contract.SupportsInterface(&_FeeManagerNoNative.CallOpts, interfaceId)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeeManagerNoNative.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) TypeAndVersion() (string, error) {
	return _FeeManagerNoNative.Contract.TypeAndVersion(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeCallerSession) TypeAndVersion() (string, error) {
	return _FeeManagerNoNative.Contract.TypeAndVersion(&_FeeManagerNoNative.CallOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "acceptOwnership")
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) AcceptOwnership() (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.AcceptOwnership(&_FeeManagerNoNative.TransactOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.AcceptOwnership(&_FeeManagerNoNative.TransactOpts)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) PayLinkDeficit(opts *bind.TransactOpts, configDigest [32]byte) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "payLinkDeficit", configDigest)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) PayLinkDeficit(configDigest [32]byte) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.PayLinkDeficit(&_FeeManagerNoNative.TransactOpts, configDigest)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) PayLinkDeficit(configDigest [32]byte) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.PayLinkDeficit(&_FeeManagerNoNative.TransactOpts, configDigest)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) ProcessFee(opts *bind.TransactOpts, payload []byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "processFee", payload, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) ProcessFee(payload []byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.ProcessFee(&_FeeManagerNoNative.TransactOpts, payload, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) ProcessFee(payload []byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.ProcessFee(&_FeeManagerNoNative.TransactOpts, payload, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) ProcessFeeBulk(opts *bind.TransactOpts, payloads [][]byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "processFeeBulk", payloads, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) ProcessFeeBulk(payloads [][]byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.ProcessFeeBulk(&_FeeManagerNoNative.TransactOpts, payloads, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) ProcessFeeBulk(payloads [][]byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.ProcessFeeBulk(&_FeeManagerNoNative.TransactOpts, payloads, parameterPayload, subscriber)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) SetFeeRecipients(opts *bind.TransactOpts, configDigest [32]byte, rewardRecipientAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "setFeeRecipients", configDigest, rewardRecipientAndWeights)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SetFeeRecipients(configDigest [32]byte, rewardRecipientAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.SetFeeRecipients(&_FeeManagerNoNative.TransactOpts, configDigest, rewardRecipientAndWeights)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) SetFeeRecipients(configDigest [32]byte, rewardRecipientAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.SetFeeRecipients(&_FeeManagerNoNative.TransactOpts, configDigest, rewardRecipientAndWeights)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) SetNativeSurcharge(opts *bind.TransactOpts, surcharge uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "setNativeSurcharge", surcharge)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) SetNativeSurcharge(surcharge uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.SetNativeSurcharge(&_FeeManagerNoNative.TransactOpts, surcharge)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) SetNativeSurcharge(surcharge uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.SetNativeSurcharge(&_FeeManagerNoNative.TransactOpts, surcharge)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "transferOwnership", to)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.TransferOwnership(&_FeeManagerNoNative.TransactOpts, to)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.TransferOwnership(&_FeeManagerNoNative.TransactOpts, to)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) UpdateSubscriberDiscount(opts *bind.TransactOpts, subscriber common.Address, feedId [32]byte, token common.Address, discount uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "updateSubscriberDiscount", subscriber, feedId, token, discount)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) UpdateSubscriberDiscount(subscriber common.Address, feedId [32]byte, token common.Address, discount uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.UpdateSubscriberDiscount(&_FeeManagerNoNative.TransactOpts, subscriber, feedId, token, discount)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) UpdateSubscriberDiscount(subscriber common.Address, feedId [32]byte, token common.Address, discount uint64) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.UpdateSubscriberDiscount(&_FeeManagerNoNative.TransactOpts, subscriber, feedId, token, discount)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactor) Withdraw(opts *bind.TransactOpts, assetAddress common.Address, recipient common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _FeeManagerNoNative.contract.Transact(opts, "withdraw", assetAddress, recipient, quantity)
}

func (_FeeManagerNoNative *FeeManagerNoNativeSession) Withdraw(assetAddress common.Address, recipient common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.Withdraw(&_FeeManagerNoNative.TransactOpts, assetAddress, recipient, quantity)
}

func (_FeeManagerNoNative *FeeManagerNoNativeTransactorSession) Withdraw(assetAddress common.Address, recipient common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _FeeManagerNoNative.Contract.Withdraw(&_FeeManagerNoNative.TransactOpts, assetAddress, recipient, quantity)
}

type FeeManagerNoNativeDiscountAppliedIterator struct {
	Event *FeeManagerNoNativeDiscountApplied

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeDiscountAppliedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeDiscountApplied)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeDiscountApplied)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeDiscountAppliedIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeDiscountAppliedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeDiscountApplied struct {
	ConfigDigest    [32]byte
	Subscriber      common.Address
	Fee             CommonAsset
	Reward          CommonAsset
	AppliedDiscount *big.Int
	Raw             types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterDiscountApplied(opts *bind.FilterOpts, configDigest [][32]byte, subscriber []common.Address) (*FeeManagerNoNativeDiscountAppliedIterator, error) {

	var configDigestRule []interface{}
	for _, configDigestItem := range configDigest {
		configDigestRule = append(configDigestRule, configDigestItem)
	}
	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "DiscountApplied", configDigestRule, subscriberRule)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeDiscountAppliedIterator{contract: _FeeManagerNoNative.contract, event: "DiscountApplied", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchDiscountApplied(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeDiscountApplied, configDigest [][32]byte, subscriber []common.Address) (event.Subscription, error) {

	var configDigestRule []interface{}
	for _, configDigestItem := range configDigest {
		configDigestRule = append(configDigestRule, configDigestItem)
	}
	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "DiscountApplied", configDigestRule, subscriberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeDiscountApplied)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "DiscountApplied", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseDiscountApplied(log types.Log) (*FeeManagerNoNativeDiscountApplied, error) {
	event := new(FeeManagerNoNativeDiscountApplied)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "DiscountApplied", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeInsufficientLinkIterator struct {
	Event *FeeManagerNoNativeInsufficientLink

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeInsufficientLinkIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeInsufficientLink)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeInsufficientLink)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeInsufficientLinkIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeInsufficientLinkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeInsufficientLink struct {
	Rewards []IRewardManagerFeePayment
	Raw     types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterInsufficientLink(opts *bind.FilterOpts) (*FeeManagerNoNativeInsufficientLinkIterator, error) {

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "InsufficientLink")
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeInsufficientLinkIterator{contract: _FeeManagerNoNative.contract, event: "InsufficientLink", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchInsufficientLink(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeInsufficientLink) (event.Subscription, error) {

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "InsufficientLink")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeInsufficientLink)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "InsufficientLink", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseInsufficientLink(log types.Log) (*FeeManagerNoNativeInsufficientLink, error) {
	event := new(FeeManagerNoNativeInsufficientLink)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "InsufficientLink", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeLinkDeficitClearedIterator struct {
	Event *FeeManagerNoNativeLinkDeficitCleared

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeLinkDeficitClearedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeLinkDeficitCleared)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeLinkDeficitCleared)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeLinkDeficitClearedIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeLinkDeficitClearedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeLinkDeficitCleared struct {
	ConfigDigest [32]byte
	LinkQuantity *big.Int
	Raw          types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterLinkDeficitCleared(opts *bind.FilterOpts, configDigest [][32]byte) (*FeeManagerNoNativeLinkDeficitClearedIterator, error) {

	var configDigestRule []interface{}
	for _, configDigestItem := range configDigest {
		configDigestRule = append(configDigestRule, configDigestItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "LinkDeficitCleared", configDigestRule)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeLinkDeficitClearedIterator{contract: _FeeManagerNoNative.contract, event: "LinkDeficitCleared", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchLinkDeficitCleared(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeLinkDeficitCleared, configDigest [][32]byte) (event.Subscription, error) {

	var configDigestRule []interface{}
	for _, configDigestItem := range configDigest {
		configDigestRule = append(configDigestRule, configDigestItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "LinkDeficitCleared", configDigestRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeLinkDeficitCleared)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "LinkDeficitCleared", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseLinkDeficitCleared(log types.Log) (*FeeManagerNoNativeLinkDeficitCleared, error) {
	event := new(FeeManagerNoNativeLinkDeficitCleared)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "LinkDeficitCleared", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeNativeSurchargeUpdatedIterator struct {
	Event *FeeManagerNoNativeNativeSurchargeUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeNativeSurchargeUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeNativeSurchargeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeNativeSurchargeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeNativeSurchargeUpdatedIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeNativeSurchargeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeNativeSurchargeUpdated struct {
	NewSurcharge uint64
	Raw          types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterNativeSurchargeUpdated(opts *bind.FilterOpts) (*FeeManagerNoNativeNativeSurchargeUpdatedIterator, error) {

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "NativeSurchargeUpdated")
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeNativeSurchargeUpdatedIterator{contract: _FeeManagerNoNative.contract, event: "NativeSurchargeUpdated", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchNativeSurchargeUpdated(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeNativeSurchargeUpdated) (event.Subscription, error) {

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "NativeSurchargeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeNativeSurchargeUpdated)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "NativeSurchargeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseNativeSurchargeUpdated(log types.Log) (*FeeManagerNoNativeNativeSurchargeUpdated, error) {
	event := new(FeeManagerNoNativeNativeSurchargeUpdated)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "NativeSurchargeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeOwnershipTransferRequestedIterator struct {
	Event *FeeManagerNoNativeOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FeeManagerNoNativeOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeOwnershipTransferRequestedIterator{contract: _FeeManagerNoNative.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeOwnershipTransferRequested)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseOwnershipTransferRequested(log types.Log) (*FeeManagerNoNativeOwnershipTransferRequested, error) {
	event := new(FeeManagerNoNativeOwnershipTransferRequested)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeOwnershipTransferredIterator struct {
	Event *FeeManagerNoNativeOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FeeManagerNoNativeOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeOwnershipTransferredIterator{contract: _FeeManagerNoNative.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeOwnershipTransferred)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseOwnershipTransferred(log types.Log) (*FeeManagerNoNativeOwnershipTransferred, error) {
	event := new(FeeManagerNoNativeOwnershipTransferred)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeSubscriberDiscountUpdatedIterator struct {
	Event *FeeManagerNoNativeSubscriberDiscountUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeSubscriberDiscountUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeSubscriberDiscountUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeSubscriberDiscountUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeSubscriberDiscountUpdatedIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeSubscriberDiscountUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeSubscriberDiscountUpdated struct {
	Subscriber common.Address
	FeedId     [32]byte
	Token      common.Address
	Discount   uint64
	Raw        types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterSubscriberDiscountUpdated(opts *bind.FilterOpts, subscriber []common.Address, feedId [][32]byte) (*FeeManagerNoNativeSubscriberDiscountUpdatedIterator, error) {

	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}
	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "SubscriberDiscountUpdated", subscriberRule, feedIdRule)
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeSubscriberDiscountUpdatedIterator{contract: _FeeManagerNoNative.contract, event: "SubscriberDiscountUpdated", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchSubscriberDiscountUpdated(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeSubscriberDiscountUpdated, subscriber []common.Address, feedId [][32]byte) (event.Subscription, error) {

	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}
	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "SubscriberDiscountUpdated", subscriberRule, feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeSubscriberDiscountUpdated)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "SubscriberDiscountUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseSubscriberDiscountUpdated(log types.Log) (*FeeManagerNoNativeSubscriberDiscountUpdated, error) {
	event := new(FeeManagerNoNativeSubscriberDiscountUpdated)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "SubscriberDiscountUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FeeManagerNoNativeWithdrawIterator struct {
	Event *FeeManagerNoNativeWithdraw

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FeeManagerNoNativeWithdrawIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeManagerNoNativeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FeeManagerNoNativeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FeeManagerNoNativeWithdrawIterator) Error() error {
	return it.fail
}

func (it *FeeManagerNoNativeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FeeManagerNoNativeWithdraw struct {
	AdminAddress common.Address
	Recipient    common.Address
	AssetAddress common.Address
	Quantity     *big.Int
	Raw          types.Log
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*FeeManagerNoNativeWithdrawIterator, error) {

	logs, sub, err := _FeeManagerNoNative.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &FeeManagerNoNativeWithdrawIterator{contract: _FeeManagerNoNative.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeWithdraw) (event.Subscription, error) {

	logs, sub, err := _FeeManagerNoNative.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FeeManagerNoNativeWithdraw)
				if err := _FeeManagerNoNative.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FeeManagerNoNative *FeeManagerNoNativeFilterer) ParseWithdraw(log types.Log) (*FeeManagerNoNativeWithdraw, error) {
	event := new(FeeManagerNoNativeWithdraw)
	if err := _FeeManagerNoNative.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_FeeManagerNoNative *FeeManagerNoNative) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _FeeManagerNoNative.abi.Events["DiscountApplied"].ID:
		return _FeeManagerNoNative.ParseDiscountApplied(log)
	case _FeeManagerNoNative.abi.Events["InsufficientLink"].ID:
		return _FeeManagerNoNative.ParseInsufficientLink(log)
	case _FeeManagerNoNative.abi.Events["LinkDeficitCleared"].ID:
		return _FeeManagerNoNative.ParseLinkDeficitCleared(log)
	case _FeeManagerNoNative.abi.Events["NativeSurchargeUpdated"].ID:
		return _FeeManagerNoNative.ParseNativeSurchargeUpdated(log)
	case _FeeManagerNoNative.abi.Events["OwnershipTransferRequested"].ID:
		return _FeeManagerNoNative.ParseOwnershipTransferRequested(log)
	case _FeeManagerNoNative.abi.Events["OwnershipTransferred"].ID:
		return _FeeManagerNoNative.ParseOwnershipTransferred(log)
	case _FeeManagerNoNative.abi.Events["SubscriberDiscountUpdated"].ID:
		return _FeeManagerNoNative.ParseSubscriberDiscountUpdated(log)
	case _FeeManagerNoNative.abi.Events["Withdraw"].ID:
		return _FeeManagerNoNative.ParseWithdraw(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (FeeManagerNoNativeDiscountApplied) Topic() common.Hash {
	return common.HexToHash("0x88b15eb682210089cddf967648e2cb2a4535aeadc8f8f36050922e33c04e7125")
}

func (FeeManagerNoNativeInsufficientLink) Topic() common.Hash {
	return common.HexToHash("0xf52e5907b69d97c33392936c12d78b494463b78c5b72df50b4c497eee5720b67")
}

func (FeeManagerNoNativeLinkDeficitCleared) Topic() common.Hash {
	return common.HexToHash("0x843f0b103e50b42b08f9d30f12f961845a6d02623730872e24644899c0dd9895")
}

func (FeeManagerNoNativeNativeSurchargeUpdated) Topic() common.Hash {
	return common.HexToHash("0x08f7c0d17932ddb8523bc06754d42ff19ebc77d76a8b9bfde02c28ab1ed3d639")
}

func (FeeManagerNoNativeOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (FeeManagerNoNativeOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (FeeManagerNoNativeSubscriberDiscountUpdated) Topic() common.Hash {
	return common.HexToHash("0x5eba5a8afa39780f0f99b6cbeb95f3da6a7040ca00abd46bdc91a0a060134139")
}

func (FeeManagerNoNativeWithdraw) Topic() common.Hash {
	return common.HexToHash("0x7ff78a71698bdb18dcca96f52ab25e0a1b146fb6a49adf8e6845299e49021f29")
}

func (_FeeManagerNoNative *FeeManagerNoNative) Address() common.Address {
	return _FeeManagerNoNative.address
}

type FeeManagerNoNativeInterface interface {
	GetFeeAndReward(opts *bind.CallOpts, subscriber common.Address, report []byte, quoteAddress common.Address) (CommonAsset, CommonAsset, *big.Int, error)

	ILinkAddress(opts *bind.CallOpts) (common.Address, error)

	INativeAddress(opts *bind.CallOpts) (common.Address, error)

	IProxyAddress(opts *bind.CallOpts) (common.Address, error)

	IRewardManager(opts *bind.CallOpts) (common.Address, error)

	LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SLinkDeficit(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error)

	SNativeSurcharge(opts *bind.CallOpts) (*big.Int, error)

	SSubscriberDiscounts(opts *bind.CallOpts, arg0 common.Address, arg1 [32]byte, arg2 common.Address) (*big.Int, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	PayLinkDeficit(opts *bind.TransactOpts, configDigest [32]byte) (*types.Transaction, error)

	ProcessFee(opts *bind.TransactOpts, payload []byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error)

	ProcessFeeBulk(opts *bind.TransactOpts, payloads [][]byte, parameterPayload []byte, subscriber common.Address) (*types.Transaction, error)

	SetFeeRecipients(opts *bind.TransactOpts, configDigest [32]byte, rewardRecipientAndWeights []CommonAddressAndWeight) (*types.Transaction, error)

	SetNativeSurcharge(opts *bind.TransactOpts, surcharge uint64) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UpdateSubscriberDiscount(opts *bind.TransactOpts, subscriber common.Address, feedId [32]byte, token common.Address, discount uint64) (*types.Transaction, error)

	Withdraw(opts *bind.TransactOpts, assetAddress common.Address, recipient common.Address, quantity *big.Int) (*types.Transaction, error)

	FilterDiscountApplied(opts *bind.FilterOpts, configDigest [][32]byte, subscriber []common.Address) (*FeeManagerNoNativeDiscountAppliedIterator, error)

	WatchDiscountApplied(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeDiscountApplied, configDigest [][32]byte, subscriber []common.Address) (event.Subscription, error)

	ParseDiscountApplied(log types.Log) (*FeeManagerNoNativeDiscountApplied, error)

	FilterInsufficientLink(opts *bind.FilterOpts) (*FeeManagerNoNativeInsufficientLinkIterator, error)

	WatchInsufficientLink(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeInsufficientLink) (event.Subscription, error)

	ParseInsufficientLink(log types.Log) (*FeeManagerNoNativeInsufficientLink, error)

	FilterLinkDeficitCleared(opts *bind.FilterOpts, configDigest [][32]byte) (*FeeManagerNoNativeLinkDeficitClearedIterator, error)

	WatchLinkDeficitCleared(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeLinkDeficitCleared, configDigest [][32]byte) (event.Subscription, error)

	ParseLinkDeficitCleared(log types.Log) (*FeeManagerNoNativeLinkDeficitCleared, error)

	FilterNativeSurchargeUpdated(opts *bind.FilterOpts) (*FeeManagerNoNativeNativeSurchargeUpdatedIterator, error)

	WatchNativeSurchargeUpdated(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeNativeSurchargeUpdated) (event.Subscription, error)

	ParseNativeSurchargeUpdated(log types.Log) (*FeeManagerNoNativeNativeSurchargeUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FeeManagerNoNativeOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*FeeManagerNoNativeOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FeeManagerNoNativeOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*FeeManagerNoNativeOwnershipTransferred, error)

	FilterSubscriberDiscountUpdated(opts *bind.FilterOpts, subscriber []common.Address, feedId [][32]byte) (*FeeManagerNoNativeSubscriberDiscountUpdatedIterator, error)

	WatchSubscriberDiscountUpdated(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeSubscriberDiscountUpdated, subscriber []common.Address, feedId [][32]byte) (event.Subscription, error)

	ParseSubscriberDiscountUpdated(log types.Log) (*FeeManagerNoNativeSubscriberDiscountUpdated, error)

	FilterWithdraw(opts *bind.FilterOpts) (*FeeManagerNoNativeWithdrawIterator, error)

	WatchWithdraw(opts *bind.WatchOpts, sink chan<- *FeeManagerNoNativeWithdraw) (event.Subscription, error)

	ParseWithdraw(log types.Log) (*FeeManagerNoNativeWithdraw, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
