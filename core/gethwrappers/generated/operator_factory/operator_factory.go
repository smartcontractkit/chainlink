// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package operator_factory

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var OperatorFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AuthorizedForwarderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OperatorCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"created\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"deployNewForwarderAndTransferOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewOperatorAndForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

var OperatorFactoryABI = OperatorFactoryMetaData.ABI

var OperatorFactoryBin = OperatorFactoryMetaData.Bin

func DeployOperatorFactory(auth *bind.TransactOpts, backend bind.ContractBackend, linkAddress common.Address) (common.Address, *types.Transaction, *OperatorFactory, error) {
	parsed, err := OperatorFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OperatorFactoryBin), backend, linkAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OperatorFactory{address: address, abi: *parsed, OperatorFactoryCaller: OperatorFactoryCaller{contract: contract}, OperatorFactoryTransactor: OperatorFactoryTransactor{contract: contract}, OperatorFactoryFilterer: OperatorFactoryFilterer{contract: contract}}, nil
}

type OperatorFactory struct {
	address common.Address
	abi     abi.ABI
	OperatorFactoryCaller
	OperatorFactoryTransactor
	OperatorFactoryFilterer
}

type OperatorFactoryCaller struct {
	contract *bind.BoundContract
}

type OperatorFactoryTransactor struct {
	contract *bind.BoundContract
}

type OperatorFactoryFilterer struct {
	contract *bind.BoundContract
}

type OperatorFactorySession struct {
	Contract     *OperatorFactory
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type OperatorFactoryCallerSession struct {
	Contract *OperatorFactoryCaller
	CallOpts bind.CallOpts
}

type OperatorFactoryTransactorSession struct {
	Contract     *OperatorFactoryTransactor
	TransactOpts bind.TransactOpts
}

type OperatorFactoryRaw struct {
	Contract *OperatorFactory
}

type OperatorFactoryCallerRaw struct {
	Contract *OperatorFactoryCaller
}

type OperatorFactoryTransactorRaw struct {
	Contract *OperatorFactoryTransactor
}

func NewOperatorFactory(address common.Address, backend bind.ContractBackend) (*OperatorFactory, error) {
	abi, err := abi.JSON(strings.NewReader(OperatorFactoryABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindOperatorFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OperatorFactory{address: address, abi: abi, OperatorFactoryCaller: OperatorFactoryCaller{contract: contract}, OperatorFactoryTransactor: OperatorFactoryTransactor{contract: contract}, OperatorFactoryFilterer: OperatorFactoryFilterer{contract: contract}}, nil
}

func NewOperatorFactoryCaller(address common.Address, caller bind.ContractCaller) (*OperatorFactoryCaller, error) {
	contract, err := bindOperatorFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OperatorFactoryCaller{contract: contract}, nil
}

func NewOperatorFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*OperatorFactoryTransactor, error) {
	contract, err := bindOperatorFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OperatorFactoryTransactor{contract: contract}, nil
}

func NewOperatorFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*OperatorFactoryFilterer, error) {
	contract, err := bindOperatorFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OperatorFactoryFilterer{contract: contract}, nil
}

func bindOperatorFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OperatorFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_OperatorFactory *OperatorFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OperatorFactory.Contract.OperatorFactoryCaller.contract.Call(opts, result, method, params...)
}

func (_OperatorFactory *OperatorFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorFactory.Contract.OperatorFactoryTransactor.contract.Transfer(opts)
}

func (_OperatorFactory *OperatorFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OperatorFactory.Contract.OperatorFactoryTransactor.contract.Transact(opts, method, params...)
}

func (_OperatorFactory *OperatorFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OperatorFactory.Contract.contract.Call(opts, result, method, params...)
}

func (_OperatorFactory *OperatorFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorFactory.Contract.contract.Transfer(opts)
}

func (_OperatorFactory *OperatorFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OperatorFactory.Contract.contract.Transact(opts, method, params...)
}

func (_OperatorFactory *OperatorFactoryCaller) Created(opts *bind.CallOpts, query common.Address) (bool, error) {
	var out []interface{}
	err := _OperatorFactory.contract.Call(opts, &out, "created", query)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_OperatorFactory *OperatorFactorySession) Created(query common.Address) (bool, error) {
	return _OperatorFactory.Contract.Created(&_OperatorFactory.CallOpts, query)
}

func (_OperatorFactory *OperatorFactoryCallerSession) Created(query common.Address) (bool, error) {
	return _OperatorFactory.Contract.Created(&_OperatorFactory.CallOpts, query)
}

func (_OperatorFactory *OperatorFactoryCaller) LinkToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OperatorFactory.contract.Call(opts, &out, "linkToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OperatorFactory *OperatorFactorySession) LinkToken() (common.Address, error) {
	return _OperatorFactory.Contract.LinkToken(&_OperatorFactory.CallOpts)
}

func (_OperatorFactory *OperatorFactoryCallerSession) LinkToken() (common.Address, error) {
	return _OperatorFactory.Contract.LinkToken(&_OperatorFactory.CallOpts)
}

func (_OperatorFactory *OperatorFactoryCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OperatorFactory.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_OperatorFactory *OperatorFactorySession) TypeAndVersion() (string, error) {
	return _OperatorFactory.Contract.TypeAndVersion(&_OperatorFactory.CallOpts)
}

func (_OperatorFactory *OperatorFactoryCallerSession) TypeAndVersion() (string, error) {
	return _OperatorFactory.Contract.TypeAndVersion(&_OperatorFactory.CallOpts)
}

func (_OperatorFactory *OperatorFactoryTransactor) DeployNewForwarder(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorFactory.contract.Transact(opts, "deployNewForwarder")
}

func (_OperatorFactory *OperatorFactorySession) DeployNewForwarder() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewForwarder(&_OperatorFactory.TransactOpts)
}

func (_OperatorFactory *OperatorFactoryTransactorSession) DeployNewForwarder() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewForwarder(&_OperatorFactory.TransactOpts)
}

func (_OperatorFactory *OperatorFactoryTransactor) DeployNewForwarderAndTransferOwnership(opts *bind.TransactOpts, to common.Address, message []byte) (*types.Transaction, error) {
	return _OperatorFactory.contract.Transact(opts, "deployNewForwarderAndTransferOwnership", to, message)
}

func (_OperatorFactory *OperatorFactorySession) DeployNewForwarderAndTransferOwnership(to common.Address, message []byte) (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewForwarderAndTransferOwnership(&_OperatorFactory.TransactOpts, to, message)
}

func (_OperatorFactory *OperatorFactoryTransactorSession) DeployNewForwarderAndTransferOwnership(to common.Address, message []byte) (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewForwarderAndTransferOwnership(&_OperatorFactory.TransactOpts, to, message)
}

func (_OperatorFactory *OperatorFactoryTransactor) DeployNewOperator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorFactory.contract.Transact(opts, "deployNewOperator")
}

func (_OperatorFactory *OperatorFactorySession) DeployNewOperator() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewOperator(&_OperatorFactory.TransactOpts)
}

func (_OperatorFactory *OperatorFactoryTransactorSession) DeployNewOperator() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewOperator(&_OperatorFactory.TransactOpts)
}

func (_OperatorFactory *OperatorFactoryTransactor) DeployNewOperatorAndForwarder(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorFactory.contract.Transact(opts, "deployNewOperatorAndForwarder")
}

func (_OperatorFactory *OperatorFactorySession) DeployNewOperatorAndForwarder() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewOperatorAndForwarder(&_OperatorFactory.TransactOpts)
}

func (_OperatorFactory *OperatorFactoryTransactorSession) DeployNewOperatorAndForwarder() (*types.Transaction, error) {
	return _OperatorFactory.Contract.DeployNewOperatorAndForwarder(&_OperatorFactory.TransactOpts)
}

type OperatorFactoryAuthorizedForwarderCreatedIterator struct {
	Event *OperatorFactoryAuthorizedForwarderCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OperatorFactoryAuthorizedForwarderCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorFactoryAuthorizedForwarderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OperatorFactoryAuthorizedForwarderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OperatorFactoryAuthorizedForwarderCreatedIterator) Error() error {
	return it.fail
}

func (it *OperatorFactoryAuthorizedForwarderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OperatorFactoryAuthorizedForwarderCreated struct {
	Forwarder common.Address
	Owner     common.Address
	Sender    common.Address
	Raw       types.Log
}

func (_OperatorFactory *OperatorFactoryFilterer) FilterAuthorizedForwarderCreated(opts *bind.FilterOpts, forwarder []common.Address, owner []common.Address, sender []common.Address) (*OperatorFactoryAuthorizedForwarderCreatedIterator, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OperatorFactory.contract.FilterLogs(opts, "AuthorizedForwarderCreated", forwarderRule, ownerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OperatorFactoryAuthorizedForwarderCreatedIterator{contract: _OperatorFactory.contract, event: "AuthorizedForwarderCreated", logs: logs, sub: sub}, nil
}

func (_OperatorFactory *OperatorFactoryFilterer) WatchAuthorizedForwarderCreated(opts *bind.WatchOpts, sink chan<- *OperatorFactoryAuthorizedForwarderCreated, forwarder []common.Address, owner []common.Address, sender []common.Address) (event.Subscription, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OperatorFactory.contract.WatchLogs(opts, "AuthorizedForwarderCreated", forwarderRule, ownerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OperatorFactoryAuthorizedForwarderCreated)
				if err := _OperatorFactory.contract.UnpackLog(event, "AuthorizedForwarderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OperatorFactory *OperatorFactoryFilterer) ParseAuthorizedForwarderCreated(log types.Log) (*OperatorFactoryAuthorizedForwarderCreated, error) {
	event := new(OperatorFactoryAuthorizedForwarderCreated)
	if err := _OperatorFactory.contract.UnpackLog(event, "AuthorizedForwarderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OperatorFactoryOperatorCreatedIterator struct {
	Event *OperatorFactoryOperatorCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OperatorFactoryOperatorCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorFactoryOperatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OperatorFactoryOperatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OperatorFactoryOperatorCreatedIterator) Error() error {
	return it.fail
}

func (it *OperatorFactoryOperatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OperatorFactoryOperatorCreated struct {
	Operator common.Address
	Owner    common.Address
	Sender   common.Address
	Raw      types.Log
}

func (_OperatorFactory *OperatorFactoryFilterer) FilterOperatorCreated(opts *bind.FilterOpts, operator []common.Address, owner []common.Address, sender []common.Address) (*OperatorFactoryOperatorCreatedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OperatorFactory.contract.FilterLogs(opts, "OperatorCreated", operatorRule, ownerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OperatorFactoryOperatorCreatedIterator{contract: _OperatorFactory.contract, event: "OperatorCreated", logs: logs, sub: sub}, nil
}

func (_OperatorFactory *OperatorFactoryFilterer) WatchOperatorCreated(opts *bind.WatchOpts, sink chan<- *OperatorFactoryOperatorCreated, operator []common.Address, owner []common.Address, sender []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OperatorFactory.contract.WatchLogs(opts, "OperatorCreated", operatorRule, ownerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OperatorFactoryOperatorCreated)
				if err := _OperatorFactory.contract.UnpackLog(event, "OperatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OperatorFactory *OperatorFactoryFilterer) ParseOperatorCreated(log types.Log) (*OperatorFactoryOperatorCreated, error) {
	event := new(OperatorFactoryOperatorCreated)
	if err := _OperatorFactory.contract.UnpackLog(event, "OperatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_OperatorFactory *OperatorFactory) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _OperatorFactory.abi.Events["AuthorizedForwarderCreated"].ID:
		return _OperatorFactory.ParseAuthorizedForwarderCreated(log)
	case _OperatorFactory.abi.Events["OperatorCreated"].ID:
		return _OperatorFactory.ParseOperatorCreated(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (OperatorFactoryAuthorizedForwarderCreated) Topic() common.Hash {
	return common.HexToHash("0x1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b")
}

func (OperatorFactoryOperatorCreated) Topic() common.Hash {
	return common.HexToHash("0xd3bb727b2e716a1f142bc9c63c66fe0ae4c5fbc89234f8aa77d0c864a7b63bab")
}

func (_OperatorFactory *OperatorFactory) Address() common.Address {
	return _OperatorFactory.address
}

type OperatorFactoryInterface interface {
	Created(opts *bind.CallOpts, query common.Address) (bool, error)

	LinkToken(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	DeployNewForwarder(opts *bind.TransactOpts) (*types.Transaction, error)

	DeployNewForwarderAndTransferOwnership(opts *bind.TransactOpts, to common.Address, message []byte) (*types.Transaction, error)

	DeployNewOperator(opts *bind.TransactOpts) (*types.Transaction, error)

	DeployNewOperatorAndForwarder(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAuthorizedForwarderCreated(opts *bind.FilterOpts, forwarder []common.Address, owner []common.Address, sender []common.Address) (*OperatorFactoryAuthorizedForwarderCreatedIterator, error)

	WatchAuthorizedForwarderCreated(opts *bind.WatchOpts, sink chan<- *OperatorFactoryAuthorizedForwarderCreated, forwarder []common.Address, owner []common.Address, sender []common.Address) (event.Subscription, error)

	ParseAuthorizedForwarderCreated(log types.Log) (*OperatorFactoryAuthorizedForwarderCreated, error)

	FilterOperatorCreated(opts *bind.FilterOpts, operator []common.Address, owner []common.Address, sender []common.Address) (*OperatorFactoryOperatorCreatedIterator, error)

	WatchOperatorCreated(opts *bind.WatchOpts, sink chan<- *OperatorFactoryOperatorCreated, operator []common.Address, owner []common.Address, sender []common.Address) (event.Subscription, error)

	ParseOperatorCreated(log types.Log) (*OperatorFactoryOperatorCreated, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
