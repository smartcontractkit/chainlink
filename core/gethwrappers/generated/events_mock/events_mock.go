// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package events_mock

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type EventsMockFunctionsBillingRegistryWithInitCommitment struct {
	SubscriptionId uint64
	Client         common.Address
	GasLimit       uint32
	GasPrice       *big.Int
	Don            common.Address
	DonFee         *big.Int
	RegistryFee    *big.Int
	EstimatedCost  *big.Int
	Timestamp      *big.Int
}

type EventsMockFunctionsBillingRegistryCommitment struct {
	SubscriptionId uint64
	Client         common.Address
	GasLimit       uint32
	GasPrice       *big.Int
	Don            common.Address
	DonFee         *big.Int
	RegistryFee    *big.Int
	EstimatedCost  *big.Int
	Timestamp      *big.Int
}

type EventsMockKeeperRegistry12Config struct {
	PaymentPremiumPPB    uint32
	FlatFeeMicroLink     uint32
	BlockCountPerTurn    *big.Int
	CheckGasLimit        uint32
	StalenessSeconds     *big.Int
	GasCeilingMultiplier uint16
	MinUpkeepSpend       *big.Int
	MaxPerformGas        uint32
	FallbackGasPrice     *big.Int
	FallbackLinkPrice    *big.Int
	Transcoder           common.Address
	Registrar            common.Address
}

type EventsMockKeeperRegistry13Config struct {
	PaymentPremiumPPB    uint32
	FlatFeeMicroLink     uint32
	BlockCountPerTurn    *big.Int
	CheckGasLimit        uint32
	StalenessSeconds     *big.Int
	GasCeilingMultiplier uint16
	MinUpkeepSpend       *big.Int
	MaxPerformGas        uint32
	FallbackGasPrice     *big.Int
	FallbackLinkPrice    *big.Int
	Transcoder           common.Address
	Registrar            common.Address
}

type EventsMockKeeperRegistryBase13Config struct {
	PaymentPremiumPPB    uint32
	FlatFeeMicroLink     uint32
	BlockCountPerTurn    *big.Int
	CheckGasLimit        uint32
	StalenessSeconds     *big.Int
	GasCeilingMultiplier uint16
	MinUpkeepSpend       *big.Int
	MaxPerformGas        uint32
	FallbackGasPrice     *big.Int
	FallbackLinkPrice    *big.Int
	Transcoder           common.Address
	Registrar            common.Address
}

type EventsMockKeeperRegistryLogic13Config struct {
	PaymentPremiumPPB    uint32
	FlatFeeMicroLink     uint32
	BlockCountPerTurn    *big.Int
	CheckGasLimit        uint32
	StalenessSeconds     *big.Int
	GasCeilingMultiplier uint16
	MinUpkeepSpend       *big.Int
	MaxPerformGas        uint32
	FallbackGasPrice     *big.Int
	FallbackLinkPrice    *big.Int
	Transcoder           common.Address
	Registrar            common.Address
}

type EventsMockVRFCoordinatorV2TestHelperFeeConfig struct {
	FulfillmentFlatFeeLinkPPMTier1 uint32
	FulfillmentFlatFeeLinkPPMTier2 uint32
	FulfillmentFlatFeeLinkPPMTier3 uint32
	FulfillmentFlatFeeLinkPPMTier4 uint32
	FulfillmentFlatFeeLinkPPMTier5 uint32
	ReqsForTier2                   *big.Int
	ReqsForTier3                   *big.Int
	ReqsForTier4                   *big.Int
	ReqsForTier5                   *big.Int
}

type EventsMockVRFCoordinatorV2FeeConfig struct {
	FulfillmentFlatFeeLinkPPMTier1 uint32
	FulfillmentFlatFeeLinkPPMTier2 uint32
	FulfillmentFlatFeeLinkPPMTier3 uint32
	FulfillmentFlatFeeLinkPPMTier4 uint32
	FulfillmentFlatFeeLinkPPMTier5 uint32
	ReqsForTier2                   *big.Int
	ReqsForTier3                   *big.Int
	ReqsForTier4                   *big.Int
	ReqsForTier5                   *big.Int
}

var EventsMockMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AggregatorInterface_AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"AggregatorInterface_NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AggregatorV2V3Interface_AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"AggregatorV2V3Interface_NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexInBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ArbSys_L2ToL1Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ArbSys_L2ToL1Tx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"ArbSys_SendMerkleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AuthorizedOriginReceiverUpgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedReceiver_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BatchVRFCoordinatorV2_ErrorReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"BatchVRFCoordinatorV2_RawErrorReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkClient_ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkClient_ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkClient_ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"ConfirmedOwnerUpgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwnerUpgradeable_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwnerUpgradeable_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwnerWithProposal_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwnerWithProposal_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwner_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConfirmedOwner_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"ContextUpgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upkeep\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CronUpkeepFactory_NewCronUpkeepCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CronUpkeepFactory_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CronUpkeepFactory_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handler\",\"type\":\"bytes\"}],\"name\":\"CronUpkeep_CronJobCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CronUpkeep_CronJobDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CronUpkeep_CronJobExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handler\",\"type\":\"bytes\"}],\"name\":\"CronUpkeep_CronJobUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CronUpkeep_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CronUpkeep_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CronUpkeep_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CronUpkeep_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ENSInterface_NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ENSInterface_NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"ENSInterface_NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ENSInterface_Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ERC1967Proxy_AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"ERC1967Proxy_BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967Proxy_Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ERC1967Upgrade_AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"ERC1967Upgrade_BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967Upgrade_Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"signerPayment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"transmitterPayment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalCost\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"FunctionsBillingRegistryWithInit_BillingEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"don\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"donFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"registryFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"estimatedCost\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structEventsMock.FunctionsBillingRegistryWithInit_Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"FunctionsBillingRegistryWithInit_BillingStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasOverhead\",\"type\":\"uint32\"}],\"name\":\"FunctionsBillingRegistryWithInit_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistryWithInit_FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"FunctionsBillingRegistryWithInit_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsBillingRegistryWithInit_RequestTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistryWithInit_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"signerPayment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"transmitterPayment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalCost\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"FunctionsBillingRegistry_BillingEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"don\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"donFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"registryFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"estimatedCost\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structEventsMock.FunctionsBillingRegistry_Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"FunctionsBillingRegistry_BillingStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasOverhead\",\"type\":\"uint32\"}],\"name\":\"FunctionsBillingRegistry_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistry_FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"FunctionsBillingRegistry_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsBillingRegistry_RequestTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsBillingRegistry_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsClientExample_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsClientExample_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FunctionsClientExample_RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FunctionsClientExample_RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FunctionsClient_RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FunctionsClient_RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsOracleWithInit_AuthorizedSendersActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FunctionsOracleWithInit_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsOracleWithInit_AuthorizedSendersDeactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracleWithInit_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"FunctionsOracleWithInit_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsOracleWithInit_InvalidRequestID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriptionOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracleWithInit_OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsOracleWithInit_OracleResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsOracleWithInit_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsOracleWithInit_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"FunctionsOracleWithInit_Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FunctionsOracleWithInit_UserCallbackError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracleWithInit_UserCallbackRawError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsOracle_AuthorizedSendersActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"FunctionsOracle_AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FunctionsOracle_AuthorizedSendersDeactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracle_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"FunctionsOracle_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsOracle_InvalidRequestID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriptionOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracle_OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FunctionsOracle_OracleResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsOracle_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FunctionsOracle_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"FunctionsOracle_Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FunctionsOracle_UserCallbackError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"FunctionsOracle_UserCallbackRawError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initializable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperRegistrar2_0_AutoApproveAllowedSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"autoApproveConfigType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"autoApproveMaxAllowed\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeperRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minLINKJuels\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistrar2_0_ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistrar2_0_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistrar2_0_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"displayName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistrar2_0_RegistrationApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"KeeperRegistrar2_0_RegistrationRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistrar2_0_RegistrationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"KeeperRegistrar_AutoApproveAllowedSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"autoApproveConfigType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"autoApproveMaxAllowed\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeperRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minLINKJuels\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistrar_ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistrar_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistrar_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"displayName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistrar_RegistrationApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"KeeperRegistrar_RegistrationRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"source\",\"type\":\"uint8\"}],\"name\":\"KeeperRegistrar_RegistrationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structEventsMock.KeeperRegistry1_2_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"KeeperRegistry1_2_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_2_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistry1_2_KeepersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_2_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistry1_2_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_2_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry1_2_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_2_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structEventsMock.KeeperRegistry1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"KeeperRegistry1_3_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_3_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistry1_3_KeepersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_3_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistry1_3_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry1_3_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry1_3_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry1_3_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry1_3_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistry1_3_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry1_3_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_CancelledUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry2_0_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry2_0_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_InsufficientFundsUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry2_0_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistry2_0_PayeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_ReorgedUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_StaleUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"KeeperRegistry2_0_Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistry2_0_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry2_0_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry2_0_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistry2_0_UpkeepOffchainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistry2_0_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistry2_0_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistry2_0_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structEventsMock.KeeperRegistryBase1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"KeeperRegistryBase1_3_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase1_3_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistryBase1_3_KeepersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase1_3_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase1_3_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_CancelledUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase2_0_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_InsufficientFundsUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase2_0_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistryBase2_0_PayeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_ReorgedUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_StaleUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepOffchainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryBase2_0_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structEventsMock.KeeperRegistryLogic1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"KeeperRegistryLogic1_3_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic1_3_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistryLogic1_3_KeepersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic1_3_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic1_3_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_CancelledUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic2_0_FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic2_0_OwnerFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeeperRegistryLogic2_0_PayeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_ReorgedUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_StaleUpkeepReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepAdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepCheckDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepOffchainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"KeeperRegistryLogic2_0_UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"LogEmitter_Log1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"LogEmitter_Log2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param1\",\"type\":\"string\"}],\"name\":\"LogEmitter_Log3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"OCR2Abstract_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"OCR2Abstract_Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"OCR2BaseUpgradeable_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OCR2BaseUpgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OCR2BaseUpgradeable_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OCR2BaseUpgradeable_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"OCR2BaseUpgradeable_Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"OVM_GasPriceOracle_DecimalsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"OVM_GasPriceOracle_GasPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"OVM_GasPriceOracle_L1BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"OVM_GasPriceOracle_OverheadUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OVM_GasPriceOracle_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"OVM_GasPriceOracle_ScalarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Ownable_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"PausableUpgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausableUpgradeable_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausableUpgradeable_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Pausable_Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Pausable_Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyAdmin_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransparentUpgradeableProxy_AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"TransparentUpgradeableProxy_BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"TransparentUpgradeableProxy_Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"VRFConsumerBaseV2Upgradeable_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"VRFConsumerV2UpgradeableExample_Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorMock_RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structEventsMock.VRFCoordinatorV2TestHelper_FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"VRFCoordinatorV2TestHelper_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2TestHelper_FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_ProvingKeyDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_ProvingKeyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"VRFCoordinatorV2TestHelper_RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structEventsMock.VRFCoordinatorV2_FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"VRFCoordinatorV2_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2_FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_ProvingKeyDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_ProvingKeyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"VRFCoordinatorV2_RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2_SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VRFCoordinatorV2_SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFCoordinatorV2_SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFLoadTestExternalSubOwner_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFLoadTestExternalSubOwner_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"VRFV2ProxyAdmin_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"VRFV2TransparentUpgradeableProxy_AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"VRFV2TransparentUpgradeableProxy_BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VRFV2TransparentUpgradeableProxy_Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFV2WrapperConsumerExample_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFV2WrapperConsumerExample_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"VRFV2WrapperConsumerExample_WrappedRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"VRFV2WrapperConsumerExample_WrapperRequestMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFV2Wrapper_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VRFV2Wrapper_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"VRFV2Wrapper_WrapperFulfillmentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"VerifierProxy_AccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VerifierProxy_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VerifierProxy_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldConfigDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newConfigDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierProxy_VerifierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierProxy_VerifierUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"Verifier_ConfigActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"Verifier_ConfigDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"offchainTransmitters\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"Verifier_ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Verifier_OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Verifier_OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reportHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"Verifier_ReportVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"emitAggregatorInterface_AnswerUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"emitAggregatorInterface_NewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"emitAggregatorV2V3Interface_AnswerUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"emitAggregatorV2V3Interface_NewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"emitArbSys_L2ToL1Transaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"emitArbSys_L2ToL1Tx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"emitArbSys_SendMerkleUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitAuthorizedOriginReceiverUpgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitAuthorizedReceiver_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"emitBatchVRFCoordinatorV2_ErrorReturned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"emitBatchVRFCoordinatorV2_RawErrorReturned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitChainlinkClient_ChainlinkCancelled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitChainlinkClient_ChainlinkFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitChainlinkClient_ChainlinkRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitConfirmedOwnerUpgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwnerUpgradeable_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwnerUpgradeable_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwnerWithProposal_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwnerWithProposal_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwner_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitConfirmedOwner_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitContextUpgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upkeep\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitCronUpkeepFactory_NewCronUpkeepCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitCronUpkeepFactory_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitCronUpkeepFactory_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"handler\",\"type\":\"bytes\"}],\"name\":\"emitCronUpkeep_CronJobCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitCronUpkeep_CronJobDeleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"emitCronUpkeep_CronJobExecuted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"handler\",\"type\":\"bytes\"}],\"name\":\"emitCronUpkeep_CronJobUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitCronUpkeep_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitCronUpkeep_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitCronUpkeep_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitCronUpkeep_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitENSInterface_NewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"emitENSInterface_NewResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"emitENSInterface_NewTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitENSInterface_Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"emitERC1967Proxy_AdminChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"emitERC1967Proxy_BeaconUpgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"emitERC1967Proxy_Upgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"emitERC1967Upgrade_AdminChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"emitERC1967Upgrade_BeaconUpgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"emitERC1967Upgrade_Upgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"signerPayment\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"transmitterPayment\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalCost\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_BillingEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"don\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"donFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"registryFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"estimatedCost\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structEventsMock.FunctionsBillingRegistryWithInit_Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_BillingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"gasOverhead\",\"type\":\"uint32\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_FundsRecovered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_RequestTimedOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionConsumerAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionFunded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistryWithInit_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"signerPayment\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"transmitterPayment\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalCost\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"emitFunctionsBillingRegistry_BillingEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"don\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"donFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"registryFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"estimatedCost\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structEventsMock.FunctionsBillingRegistry_Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"emitFunctionsBillingRegistry_BillingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"gasOverhead\",\"type\":\"uint32\"}],\"name\":\"emitFunctionsBillingRegistry_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistry_FundsRecovered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitFunctionsBillingRegistry_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsBillingRegistry_RequestTimedOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionConsumerAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionConsumerRemoved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionFunded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionOwnerTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_SubscriptionOwnerTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsBillingRegistry_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsClientExample_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsClientExample_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsClientExample_RequestFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsClientExample_RequestSent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsClient_RequestFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsClient_RequestSent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracleWithInit_AuthorizedSendersActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracleWithInit_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracleWithInit_AuthorizedSendersDeactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracleWithInit_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitFunctionsOracleWithInit_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsOracleWithInit_InvalidRequestID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestInitiator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"subscriptionOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracleWithInit_OracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsOracleWithInit_OracleResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracleWithInit_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracleWithInit_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"emitFunctionsOracleWithInit_Transmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"emitFunctionsOracleWithInit_UserCallbackError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracleWithInit_UserCallbackRawError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracle_AuthorizedSendersActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracle_AuthorizedSendersChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracle_AuthorizedSendersDeactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracle_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitFunctionsOracle_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsOracle_InvalidRequestID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestInitiator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"subscriptionOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracle_OracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"emitFunctionsOracle_OracleResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracle_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFunctionsOracle_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"emitFunctionsOracle_Transmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"emitFunctionsOracle_UserCallbackError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"emitFunctionsOracle_UserCallbackRawError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitInitializable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"emitKeeperRegistrar2_0_AutoApproveAllowedSenderSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"autoApproveConfigType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"autoApproveMaxAllowed\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"keeperRegistry\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minLINKJuels\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistrar2_0_ConfigChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistrar2_0_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistrar2_0_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"displayName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistrar2_0_RegistrationApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"emitKeeperRegistrar2_0_RegistrationRejected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistrar2_0_RegistrationRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"emitKeeperRegistrar_AutoApproveAllowedSenderSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"autoApproveConfigType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"autoApproveMaxAllowed\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"keeperRegistry\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minLINKJuels\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistrar_ConfigChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistrar_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistrar_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"displayName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistrar_RegistrationApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"emitKeeperRegistrar_RegistrationRejected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"source\",\"type\":\"uint8\"}],\"name\":\"emitKeeperRegistrar_RegistrationRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"structEventsMock.KeeperRegistry1_2_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"emitKeeperRegistry1_2_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_2_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistry1_2_KeepersUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_2_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_2_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"structEventsMock.KeeperRegistry1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"emitKeeperRegistry1_3_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_3_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistry1_3_KeepersUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_3_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry1_3_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_CancelledUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry2_0_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry2_0_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_InsufficientFundsUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry2_0_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistry2_0_PayeesUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_ReorgedUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_StaleUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"emitKeeperRegistry2_0_Transmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepOffchainConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistry2_0_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"structEventsMock.KeeperRegistryBase1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"emitKeeperRegistryBase1_3_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase1_3_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistryBase1_3_KeepersUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase1_3_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase1_3_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_CancelledUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase2_0_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_InsufficientFundsUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase2_0_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistryBase2_0_PayeesUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_ReorgedUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_StaleUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepOffchainConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryBase2_0_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"structEventsMock.KeeperRegistryLogic1_3_Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"emitKeeperRegistryLogic1_3_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic1_3_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistryLogic1_3_KeepersUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic1_3_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic1_3_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_CancelledUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic2_0_FundsAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_FundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_InsufficientFundsUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic2_0_OwnerFundsWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"emitKeeperRegistryLogic2_0_PayeesUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_PayeeshipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_PayeeshipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_PaymentWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_ReorgedUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_StaleUpkeepReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepAdminTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepAdminTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepCheckDataUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"gasLimit\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepGasLimitSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepOffchainConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"checkBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalPayment\",\"type\":\"uint96\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepPerformed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"importedFrom\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitKeeperRegistryLogic2_0_UpkeepUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitLogEmitter_Log1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitLogEmitter_Log2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"param1\",\"type\":\"string\"}],\"name\":\"emitLogEmitter_Log3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitOCR2Abstract_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"emitOCR2Abstract_Transmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitOCR2BaseUpgradeable_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitOCR2BaseUpgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitOCR2BaseUpgradeable_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitOCR2BaseUpgradeable_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"emitOCR2BaseUpgradeable_Transmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitOVM_GasPriceOracle_DecimalsUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitOVM_GasPriceOracle_GasPriceUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitOVM_GasPriceOracle_L1BaseFeeUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitOVM_GasPriceOracle_OverheadUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emitOVM_GasPriceOracle_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"emitOVM_GasPriceOracle_ScalarUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emitOwnable_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitPausableUpgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitPausableUpgradeable_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitPausableUpgradeable_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitPausable_Paused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"emitPausable_Unpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emitProxyAdmin_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"emitTransparentUpgradeableProxy_AdminChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"emitTransparentUpgradeableProxy_BeaconUpgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"emitTransparentUpgradeableProxy_Upgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitVRFConsumerBaseV2Upgradeable_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"emitVRFConsumerV2UpgradeableExample_Initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorMock_RandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"structEventsMock.VRFCoordinatorV2TestHelper_FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_FundsRecovered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_ProvingKeyDeregistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_ProvingKeyRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_RandomWordsFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_RandomWordsRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionConsumerAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionFunded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"fallbackWeiPerUnitLink\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"structEventsMock.VRFCoordinatorV2_FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"emitVRFCoordinatorV2_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2_FundsRecovered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_ProvingKeyDeregistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_ProvingKeyRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"emitVRFCoordinatorV2_RandomWordsFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_RandomWordsRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionConsumerAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionConsumerRemoved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionFunded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionOwnerTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFCoordinatorV2_SubscriptionOwnerTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFLoadTestExternalSubOwner_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFLoadTestExternalSubOwner_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emitVRFV2ProxyAdmin_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"emitVRFV2TransparentUpgradeableProxy_AdminChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"emitVRFV2TransparentUpgradeableProxy_BeaconUpgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"emitVRFV2TransparentUpgradeableProxy_Upgraded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFV2WrapperConsumerExample_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFV2WrapperConsumerExample_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"emitVRFV2WrapperConsumerExample_WrappedRequestFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"emitVRFV2WrapperConsumerExample_WrapperRequestMade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFV2Wrapper_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVRFV2Wrapper_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"emitVRFV2Wrapper_WrapperFulfillmentFailed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAccessController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"emitVerifierProxy_AccessControllerSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVerifierProxy_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVerifierProxy_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oldConfigDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newConfigDigest\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"emitVerifierProxy_VerifierSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"emitVerifierProxy_VerifierUnset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"emitVerifier_ConfigActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"name\":\"emitVerifier_ConfigDeactivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"offchainTransmitters\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"emitVerifier_ConfigSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVerifier_OwnershipTransferRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitVerifier_OwnershipTransferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"reportHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"emitVerifier_ReportVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

var EventsMockABI = EventsMockMetaData.ABI

var EventsMockBin = EventsMockMetaData.Bin

func DeployEventsMock(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EventsMock, error) {
	parsed, err := EventsMockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EventsMockBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EventsMock{EventsMockCaller: EventsMockCaller{contract: contract}, EventsMockTransactor: EventsMockTransactor{contract: contract}, EventsMockFilterer: EventsMockFilterer{contract: contract}}, nil
}

type EventsMock struct {
	address common.Address
	abi     abi.ABI
	EventsMockCaller
	EventsMockTransactor
	EventsMockFilterer
}

type EventsMockCaller struct {
	contract *bind.BoundContract
}

type EventsMockTransactor struct {
	contract *bind.BoundContract
}

type EventsMockFilterer struct {
	contract *bind.BoundContract
}

type EventsMockSession struct {
	Contract     *EventsMock
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type EventsMockCallerSession struct {
	Contract *EventsMockCaller
	CallOpts bind.CallOpts
}

type EventsMockTransactorSession struct {
	Contract     *EventsMockTransactor
	TransactOpts bind.TransactOpts
}

type EventsMockRaw struct {
	Contract *EventsMock
}

type EventsMockCallerRaw struct {
	Contract *EventsMockCaller
}

type EventsMockTransactorRaw struct {
	Contract *EventsMockTransactor
}

func NewEventsMock(address common.Address, backend bind.ContractBackend) (*EventsMock, error) {
	abi, err := abi.JSON(strings.NewReader(EventsMockABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindEventsMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EventsMock{address: address, abi: abi, EventsMockCaller: EventsMockCaller{contract: contract}, EventsMockTransactor: EventsMockTransactor{contract: contract}, EventsMockFilterer: EventsMockFilterer{contract: contract}}, nil
}

func NewEventsMockCaller(address common.Address, caller bind.ContractCaller) (*EventsMockCaller, error) {
	contract, err := bindEventsMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EventsMockCaller{contract: contract}, nil
}

func NewEventsMockTransactor(address common.Address, transactor bind.ContractTransactor) (*EventsMockTransactor, error) {
	contract, err := bindEventsMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EventsMockTransactor{contract: contract}, nil
}

func NewEventsMockFilterer(address common.Address, filterer bind.ContractFilterer) (*EventsMockFilterer, error) {
	contract, err := bindEventsMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EventsMockFilterer{contract: contract}, nil
}

func bindEventsMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EventsMockABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_EventsMock *EventsMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EventsMock.Contract.EventsMockCaller.contract.Call(opts, result, method, params...)
}

func (_EventsMock *EventsMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EventsMock.Contract.EventsMockTransactor.contract.Transfer(opts)
}

func (_EventsMock *EventsMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EventsMock.Contract.EventsMockTransactor.contract.Transact(opts, method, params...)
}

func (_EventsMock *EventsMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EventsMock.Contract.contract.Call(opts, result, method, params...)
}

func (_EventsMock *EventsMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EventsMock.Contract.contract.Transfer(opts)
}

func (_EventsMock *EventsMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EventsMock.Contract.contract.Transact(opts, method, params...)
}

func (_EventsMock *EventsMockTransactor) EmitAggregatorInterfaceAnswerUpdated(opts *bind.TransactOpts, current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAggregatorInterface_AnswerUpdated", current, roundId, updatedAt)
}

func (_EventsMock *EventsMockSession) EmitAggregatorInterfaceAnswerUpdated(current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorInterfaceAnswerUpdated(&_EventsMock.TransactOpts, current, roundId, updatedAt)
}

func (_EventsMock *EventsMockTransactorSession) EmitAggregatorInterfaceAnswerUpdated(current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorInterfaceAnswerUpdated(&_EventsMock.TransactOpts, current, roundId, updatedAt)
}

func (_EventsMock *EventsMockTransactor) EmitAggregatorInterfaceNewRound(opts *bind.TransactOpts, roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAggregatorInterface_NewRound", roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockSession) EmitAggregatorInterfaceNewRound(roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorInterfaceNewRound(&_EventsMock.TransactOpts, roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockTransactorSession) EmitAggregatorInterfaceNewRound(roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorInterfaceNewRound(&_EventsMock.TransactOpts, roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockTransactor) EmitAggregatorV2V3InterfaceAnswerUpdated(opts *bind.TransactOpts, current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAggregatorV2V3Interface_AnswerUpdated", current, roundId, updatedAt)
}

func (_EventsMock *EventsMockSession) EmitAggregatorV2V3InterfaceAnswerUpdated(current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorV2V3InterfaceAnswerUpdated(&_EventsMock.TransactOpts, current, roundId, updatedAt)
}

func (_EventsMock *EventsMockTransactorSession) EmitAggregatorV2V3InterfaceAnswerUpdated(current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorV2V3InterfaceAnswerUpdated(&_EventsMock.TransactOpts, current, roundId, updatedAt)
}

func (_EventsMock *EventsMockTransactor) EmitAggregatorV2V3InterfaceNewRound(opts *bind.TransactOpts, roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAggregatorV2V3Interface_NewRound", roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockSession) EmitAggregatorV2V3InterfaceNewRound(roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorV2V3InterfaceNewRound(&_EventsMock.TransactOpts, roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockTransactorSession) EmitAggregatorV2V3InterfaceNewRound(roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAggregatorV2V3InterfaceNewRound(&_EventsMock.TransactOpts, roundId, startedBy, startedAt)
}

func (_EventsMock *EventsMockTransactor) EmitArbSysL2ToL1Transaction(opts *bind.TransactOpts, caller common.Address, destination common.Address, uniqueId *big.Int, batchNumber *big.Int, indexInBatch *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitArbSys_L2ToL1Transaction", caller, destination, uniqueId, batchNumber, indexInBatch, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockSession) EmitArbSysL2ToL1Transaction(caller common.Address, destination common.Address, uniqueId *big.Int, batchNumber *big.Int, indexInBatch *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysL2ToL1Transaction(&_EventsMock.TransactOpts, caller, destination, uniqueId, batchNumber, indexInBatch, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockTransactorSession) EmitArbSysL2ToL1Transaction(caller common.Address, destination common.Address, uniqueId *big.Int, batchNumber *big.Int, indexInBatch *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysL2ToL1Transaction(&_EventsMock.TransactOpts, caller, destination, uniqueId, batchNumber, indexInBatch, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockTransactor) EmitArbSysL2ToL1Tx(opts *bind.TransactOpts, caller common.Address, destination common.Address, hash *big.Int, position *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitArbSys_L2ToL1Tx", caller, destination, hash, position, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockSession) EmitArbSysL2ToL1Tx(caller common.Address, destination common.Address, hash *big.Int, position *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysL2ToL1Tx(&_EventsMock.TransactOpts, caller, destination, hash, position, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockTransactorSession) EmitArbSysL2ToL1Tx(caller common.Address, destination common.Address, hash *big.Int, position *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysL2ToL1Tx(&_EventsMock.TransactOpts, caller, destination, hash, position, arbBlockNum, ethBlockNum, timestamp, callvalue, data)
}

func (_EventsMock *EventsMockTransactor) EmitArbSysSendMerkleUpdate(opts *bind.TransactOpts, reserved *big.Int, hash [32]byte, position *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitArbSys_SendMerkleUpdate", reserved, hash, position)
}

func (_EventsMock *EventsMockSession) EmitArbSysSendMerkleUpdate(reserved *big.Int, hash [32]byte, position *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysSendMerkleUpdate(&_EventsMock.TransactOpts, reserved, hash, position)
}

func (_EventsMock *EventsMockTransactorSession) EmitArbSysSendMerkleUpdate(reserved *big.Int, hash [32]byte, position *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitArbSysSendMerkleUpdate(&_EventsMock.TransactOpts, reserved, hash, position)
}

func (_EventsMock *EventsMockTransactor) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive", account)
}

func (_EventsMock *EventsMockSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive", account)
}

func (_EventsMock *EventsMockSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAuthorizedOriginReceiverUpgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitAuthorizedOriginReceiverUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitAuthorizedOriginReceiverUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedOriginReceiverUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitAuthorizedReceiverAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitAuthorizedReceiver_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitAuthorizedReceiverAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedReceiverAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitAuthorizedReceiverAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitAuthorizedReceiverAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitBatchVRFCoordinatorV2ErrorReturned(opts *bind.TransactOpts, requestId *big.Int, reason string) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitBatchVRFCoordinatorV2_ErrorReturned", requestId, reason)
}

func (_EventsMock *EventsMockSession) EmitBatchVRFCoordinatorV2ErrorReturned(requestId *big.Int, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitBatchVRFCoordinatorV2ErrorReturned(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactorSession) EmitBatchVRFCoordinatorV2ErrorReturned(requestId *big.Int, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitBatchVRFCoordinatorV2ErrorReturned(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactor) EmitBatchVRFCoordinatorV2RawErrorReturned(opts *bind.TransactOpts, requestId *big.Int, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitBatchVRFCoordinatorV2_RawErrorReturned", requestId, lowLevelData)
}

func (_EventsMock *EventsMockSession) EmitBatchVRFCoordinatorV2RawErrorReturned(requestId *big.Int, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitBatchVRFCoordinatorV2RawErrorReturned(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactorSession) EmitBatchVRFCoordinatorV2RawErrorReturned(requestId *big.Int, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitBatchVRFCoordinatorV2RawErrorReturned(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactor) EmitChainlinkClientChainlinkCancelled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitChainlinkClient_ChainlinkCancelled", id)
}

func (_EventsMock *EventsMockSession) EmitChainlinkClientChainlinkCancelled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkCancelled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitChainlinkClientChainlinkCancelled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkCancelled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitChainlinkClientChainlinkFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitChainlinkClient_ChainlinkFulfilled", id)
}

func (_EventsMock *EventsMockSession) EmitChainlinkClientChainlinkFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitChainlinkClientChainlinkFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitChainlinkClientChainlinkRequested(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitChainlinkClient_ChainlinkRequested", id)
}

func (_EventsMock *EventsMockSession) EmitChainlinkClientChainlinkRequested(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkRequested(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitChainlinkClientChainlinkRequested(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitChainlinkClientChainlinkRequested(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwnerUpgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwnerUpgradeable_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwnerUpgradeable_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerUpgradeableOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerUpgradeableOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerUpgradeableOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwnerWithProposal_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerWithProposalOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerWithProposalOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerWithProposalOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerWithProposalOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwnerWithProposal_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerWithProposalOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerWithProposalOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerWithProposalOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerWithProposalOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwner_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitConfirmedOwnerOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitConfirmedOwner_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitConfirmedOwnerOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitConfirmedOwnerOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitConfirmedOwnerOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitContextUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitContextUpgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitContextUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitContextUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitContextUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitContextUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.TransactOpts, upkeep common.Address, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeepFactory_NewCronUpkeepCreated", upkeep, owner)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepFactoryNewCronUpkeepCreated(upkeep common.Address, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryNewCronUpkeepCreated(&_EventsMock.TransactOpts, upkeep, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepFactoryNewCronUpkeepCreated(upkeep common.Address, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryNewCronUpkeepCreated(&_EventsMock.TransactOpts, upkeep, owner)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepFactoryOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeepFactory_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepFactoryOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepFactoryOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepFactoryOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeepFactory_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepFactoryOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepFactoryOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepFactoryOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepCronJobCreated(opts *bind.TransactOpts, id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_CronJobCreated", id, target, handler)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepCronJobCreated(id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobCreated(&_EventsMock.TransactOpts, id, target, handler)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepCronJobCreated(id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobCreated(&_EventsMock.TransactOpts, id, target, handler)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepCronJobDeleted(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_CronJobDeleted", id)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepCronJobDeleted(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobDeleted(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepCronJobDeleted(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobDeleted(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepCronJobExecuted(opts *bind.TransactOpts, id *big.Int, timestamp *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_CronJobExecuted", id, timestamp)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepCronJobExecuted(id *big.Int, timestamp *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobExecuted(&_EventsMock.TransactOpts, id, timestamp)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepCronJobExecuted(id *big.Int, timestamp *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobExecuted(&_EventsMock.TransactOpts, id, timestamp)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepCronJobUpdated(opts *bind.TransactOpts, id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_CronJobUpdated", id, target, handler)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepCronJobUpdated(id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobUpdated(&_EventsMock.TransactOpts, id, target, handler)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepCronJobUpdated(id *big.Int, target common.Address, handler []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepCronJobUpdated(&_EventsMock.TransactOpts, id, target, handler)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitCronUpkeepUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitCronUpkeep_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitCronUpkeepUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitCronUpkeepUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitCronUpkeepUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitENSInterfaceNewOwner(opts *bind.TransactOpts, node [32]byte, label [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitENSInterface_NewOwner", node, label, owner)
}

func (_EventsMock *EventsMockSession) EmitENSInterfaceNewOwner(node [32]byte, label [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewOwner(&_EventsMock.TransactOpts, node, label, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitENSInterfaceNewOwner(node [32]byte, label [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewOwner(&_EventsMock.TransactOpts, node, label, owner)
}

func (_EventsMock *EventsMockTransactor) EmitENSInterfaceNewResolver(opts *bind.TransactOpts, node [32]byte, resolver common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitENSInterface_NewResolver", node, resolver)
}

func (_EventsMock *EventsMockSession) EmitENSInterfaceNewResolver(node [32]byte, resolver common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewResolver(&_EventsMock.TransactOpts, node, resolver)
}

func (_EventsMock *EventsMockTransactorSession) EmitENSInterfaceNewResolver(node [32]byte, resolver common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewResolver(&_EventsMock.TransactOpts, node, resolver)
}

func (_EventsMock *EventsMockTransactor) EmitENSInterfaceNewTTL(opts *bind.TransactOpts, node [32]byte, ttl uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitENSInterface_NewTTL", node, ttl)
}

func (_EventsMock *EventsMockSession) EmitENSInterfaceNewTTL(node [32]byte, ttl uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewTTL(&_EventsMock.TransactOpts, node, ttl)
}

func (_EventsMock *EventsMockTransactorSession) EmitENSInterfaceNewTTL(node [32]byte, ttl uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceNewTTL(&_EventsMock.TransactOpts, node, ttl)
}

func (_EventsMock *EventsMockTransactor) EmitENSInterfaceTransfer(opts *bind.TransactOpts, node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitENSInterface_Transfer", node, owner)
}

func (_EventsMock *EventsMockSession) EmitENSInterfaceTransfer(node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceTransfer(&_EventsMock.TransactOpts, node, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitENSInterfaceTransfer(node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitENSInterfaceTransfer(&_EventsMock.TransactOpts, node, owner)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967ProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Proxy_AdminChanged", previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockSession) EmitERC1967ProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967ProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967ProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Proxy_BeaconUpgraded", beacon)
}

func (_EventsMock *EventsMockSession) EmitERC1967ProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967ProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967ProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Proxy_Upgraded", implementation)
}

func (_EventsMock *EventsMockSession) EmitERC1967ProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967ProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967ProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967UpgradeAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Upgrade_AdminChanged", previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockSession) EmitERC1967UpgradeAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967UpgradeAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967UpgradeBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Upgrade_BeaconUpgraded", beacon)
}

func (_EventsMock *EventsMockSession) EmitERC1967UpgradeBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967UpgradeBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactor) EmitERC1967UpgradeUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitERC1967Upgrade_Upgraded", implementation)
}

func (_EventsMock *EventsMockSession) EmitERC1967UpgradeUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactorSession) EmitERC1967UpgradeUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitERC1967UpgradeUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitBillingEnd(opts *bind.TransactOpts, requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_BillingEnd", requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitBillingEnd(requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitBillingEnd(&_EventsMock.TransactOpts, requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitBillingEnd(requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitBillingEnd(&_EventsMock.TransactOpts, requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitBillingStart(opts *bind.TransactOpts, requestId [32]byte, commitment EventsMockFunctionsBillingRegistryWithInitCommitment) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_BillingStart", requestId, commitment)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitBillingStart(requestId [32]byte, commitment EventsMockFunctionsBillingRegistryWithInitCommitment) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitBillingStart(&_EventsMock.TransactOpts, requestId, commitment)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitBillingStart(requestId [32]byte, commitment EventsMockFunctionsBillingRegistryWithInitCommitment) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitBillingStart(&_EventsMock.TransactOpts, requestId, commitment)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitConfigSet(opts *bind.TransactOpts, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_ConfigSet", maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitConfigSet(maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitConfigSet(&_EventsMock.TransactOpts, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitConfigSet(maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitConfigSet(&_EventsMock.TransactOpts, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_FundsRecovered", to, amount)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_RequestTimedOut", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitRequestTimedOut(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitRequestTimedOut(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitRequestTimedOut(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitRequestTimedOut(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.TransactOpts, subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionCanceled", subscriptionId, to, amount)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(&_EventsMock.TransactOpts, subscriptionId, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(&_EventsMock.TransactOpts, subscriptionId, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", subscriptionId, consumer)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", subscriptionId, consumer)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.TransactOpts, subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionCreated", subscriptionId, owner)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionCreated(subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionCreated(&_EventsMock.TransactOpts, subscriptionId, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionCreated(subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionCreated(&_EventsMock.TransactOpts, subscriptionId, owner)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.TransactOpts, subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionFunded", subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionFunded(subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionFunded(&_EventsMock.TransactOpts, subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionFunded(subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionFunded(&_EventsMock.TransactOpts, subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", subscriptionId, from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", subscriptionId, from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryWithInitUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistryWithInit_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryWithInitUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryWithInitUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryWithInitUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryBillingEnd(opts *bind.TransactOpts, requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_BillingEnd", requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryBillingEnd(requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryBillingEnd(&_EventsMock.TransactOpts, requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryBillingEnd(requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryBillingEnd(&_EventsMock.TransactOpts, requestId, subscriptionId, signerPayment, transmitterPayment, totalCost, success)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryBillingStart(opts *bind.TransactOpts, requestId [32]byte, commitment EventsMockFunctionsBillingRegistryCommitment) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_BillingStart", requestId, commitment)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryBillingStart(requestId [32]byte, commitment EventsMockFunctionsBillingRegistryCommitment) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryBillingStart(&_EventsMock.TransactOpts, requestId, commitment)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryBillingStart(requestId [32]byte, commitment EventsMockFunctionsBillingRegistryCommitment) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryBillingStart(&_EventsMock.TransactOpts, requestId, commitment)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryConfigSet(opts *bind.TransactOpts, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_ConfigSet", maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryConfigSet(maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryConfigSet(&_EventsMock.TransactOpts, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryConfigSet(maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryConfigSet(&_EventsMock.TransactOpts, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, gasOverhead)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_FundsRecovered", to, amount)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryPaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryPaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryRequestTimedOut(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_RequestTimedOut", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryRequestTimedOut(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryRequestTimedOut(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryRequestTimedOut(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryRequestTimedOut(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionCanceled(opts *bind.TransactOpts, subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionCanceled", subscriptionId, to, amount)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionCanceled(subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionCanceled(&_EventsMock.TransactOpts, subscriptionId, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionCanceled(subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionCanceled(&_EventsMock.TransactOpts, subscriptionId, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionConsumerAdded", subscriptionId, consumer)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionConsumerAdded(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionConsumerAdded(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionConsumerAdded(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionConsumerAdded(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionConsumerRemoved", subscriptionId, consumer)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(subscriptionId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subscriptionId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionCreated(opts *bind.TransactOpts, subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionCreated", subscriptionId, owner)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionCreated(subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionCreated(&_EventsMock.TransactOpts, subscriptionId, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionCreated(subscriptionId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionCreated(&_EventsMock.TransactOpts, subscriptionId, owner)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionFunded(opts *bind.TransactOpts, subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionFunded", subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionFunded(subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionFunded(&_EventsMock.TransactOpts, subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionFunded(subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionFunded(&_EventsMock.TransactOpts, subscriptionId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionOwnerTransferRequested", subscriptionId, from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_SubscriptionOwnerTransferred", subscriptionId, from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subscriptionId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsBillingRegistryUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsBillingRegistry_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsBillingRegistryUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsBillingRegistryUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsBillingRegistryUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientExampleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClientExample_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientExampleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientExampleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientExampleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClientExample_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientExampleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientExampleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientExampleRequestFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClientExample_RequestFulfilled", id)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientExampleRequestFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleRequestFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientExampleRequestFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleRequestFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientExampleRequestSent(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClientExample_RequestSent", id)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientExampleRequestSent(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleRequestSent(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientExampleRequestSent(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientExampleRequestSent(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientRequestFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClient_RequestFulfilled", id)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientRequestFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientRequestFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientRequestFulfilled(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientRequestFulfilled(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsClientRequestSent(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsClient_RequestSent", id)
}

func (_EventsMock *EventsMockSession) EmitFunctionsClientRequestSent(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientRequestSent(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsClientRequestSent(id [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsClientRequestSent(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_AuthorizedSendersActive", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_AuthorizedSendersDeactive", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_ConfigSet", previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitInvalidRequestID(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_InvalidRequestID", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitInvalidRequestID(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitInvalidRequestID(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitInvalidRequestID(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitInvalidRequestID(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitOracleRequest(opts *bind.TransactOpts, requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_OracleRequest", requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitOracleRequest(requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOracleRequest(&_EventsMock.TransactOpts, requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitOracleRequest(requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOracleRequest(&_EventsMock.TransactOpts, requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitOracleResponse(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_OracleResponse", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitOracleResponse(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOracleResponse(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitOracleResponse(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOracleResponse(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_Transmitted", configDigest, epoch)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitUserCallbackError(opts *bind.TransactOpts, requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_UserCallbackError", requestId, reason)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitUserCallbackError(requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitUserCallbackError(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitUserCallbackError(requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitUserCallbackError(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleWithInitUserCallbackRawError(opts *bind.TransactOpts, requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracleWithInit_UserCallbackRawError", requestId, lowLevelData)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleWithInitUserCallbackRawError(requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitUserCallbackRawError(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleWithInitUserCallbackRawError(requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleWithInitUserCallbackRawError(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_AuthorizedSendersActive", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleAuthorizedSendersActive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersActive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_AuthorizedSendersChanged", senders, changedBy)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleAuthorizedSendersChanged(senders []common.Address, changedBy common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersChanged(&_EventsMock.TransactOpts, senders, changedBy)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_AuthorizedSendersDeactive", account)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleAuthorizedSendersDeactive(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleAuthorizedSendersDeactive(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_ConfigSet", previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleInvalidRequestID(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_InvalidRequestID", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleInvalidRequestID(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleInvalidRequestID(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleInvalidRequestID(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleInvalidRequestID(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleOracleRequest(opts *bind.TransactOpts, requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_OracleRequest", requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleOracleRequest(requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOracleRequest(&_EventsMock.TransactOpts, requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleOracleRequest(requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOracleRequest(&_EventsMock.TransactOpts, requestId, requestingContract, requestInitiator, subscriptionId, subscriptionOwner, data)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleOracleResponse(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_OracleResponse", requestId)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleOracleResponse(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOracleResponse(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleOracleResponse(requestId [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOracleResponse(&_EventsMock.TransactOpts, requestId)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_Transmitted", configDigest, epoch)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleUserCallbackError(opts *bind.TransactOpts, requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_UserCallbackError", requestId, reason)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleUserCallbackError(requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleUserCallbackError(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleUserCallbackError(requestId [32]byte, reason string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleUserCallbackError(&_EventsMock.TransactOpts, requestId, reason)
}

func (_EventsMock *EventsMockTransactor) EmitFunctionsOracleUserCallbackRawError(opts *bind.TransactOpts, requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitFunctionsOracle_UserCallbackRawError", requestId, lowLevelData)
}

func (_EventsMock *EventsMockSession) EmitFunctionsOracleUserCallbackRawError(requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleUserCallbackRawError(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactorSession) EmitFunctionsOracleUserCallbackRawError(requestId [32]byte, lowLevelData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitFunctionsOracleUserCallbackRawError(&_EventsMock.TransactOpts, requestId, lowLevelData)
}

func (_EventsMock *EventsMockTransactor) EmitInitializableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitInitializable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitInitializableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitInitializableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitInitializableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitInitializableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.TransactOpts, senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_AutoApproveAllowedSenderSet", senderAddress, allowed)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20AutoApproveAllowedSenderSet(senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20AutoApproveAllowedSenderSet(&_EventsMock.TransactOpts, senderAddress, allowed)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20AutoApproveAllowedSenderSet(senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20AutoApproveAllowedSenderSet(&_EventsMock.TransactOpts, senderAddress, allowed)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20ConfigChanged(opts *bind.TransactOpts, autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_ConfigChanged", autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20ConfigChanged(autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20ConfigChanged(&_EventsMock.TransactOpts, autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20ConfigChanged(autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20ConfigChanged(&_EventsMock.TransactOpts, autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20RegistrationApproved(opts *bind.TransactOpts, hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_RegistrationApproved", hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20RegistrationApproved(hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationApproved(&_EventsMock.TransactOpts, hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20RegistrationApproved(hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationApproved(&_EventsMock.TransactOpts, hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20RegistrationRejected(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_RegistrationRejected", hash)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20RegistrationRejected(hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationRejected(&_EventsMock.TransactOpts, hash)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20RegistrationRejected(hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationRejected(&_EventsMock.TransactOpts, hash)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrar20RegistrationRequested(opts *bind.TransactOpts, hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar2_0_RegistrationRequested", hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrar20RegistrationRequested(hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationRequested(&_EventsMock.TransactOpts, hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrar20RegistrationRequested(hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrar20RegistrationRequested(&_EventsMock.TransactOpts, hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.TransactOpts, senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_AutoApproveAllowedSenderSet", senderAddress, allowed)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarAutoApproveAllowedSenderSet(senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarAutoApproveAllowedSenderSet(&_EventsMock.TransactOpts, senderAddress, allowed)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarAutoApproveAllowedSenderSet(senderAddress common.Address, allowed bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarAutoApproveAllowedSenderSet(&_EventsMock.TransactOpts, senderAddress, allowed)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarConfigChanged(opts *bind.TransactOpts, autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_ConfigChanged", autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarConfigChanged(autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarConfigChanged(&_EventsMock.TransactOpts, autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarConfigChanged(autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarConfigChanged(&_EventsMock.TransactOpts, autoApproveConfigType, autoApproveMaxAllowed, keeperRegistry, minLINKJuels)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarRegistrationApproved(opts *bind.TransactOpts, hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_RegistrationApproved", hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarRegistrationApproved(hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationApproved(&_EventsMock.TransactOpts, hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarRegistrationApproved(hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationApproved(&_EventsMock.TransactOpts, hash, displayName, upkeepId)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarRegistrationRejected(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_RegistrationRejected", hash)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarRegistrationRejected(hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationRejected(&_EventsMock.TransactOpts, hash)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarRegistrationRejected(hash [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationRejected(&_EventsMock.TransactOpts, hash)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistrarRegistrationRequested(opts *bind.TransactOpts, hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int, source uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistrar_RegistrationRequested", hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount, source)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistrarRegistrationRequested(hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int, source uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationRequested(&_EventsMock.TransactOpts, hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount, source)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistrarRegistrationRequested(hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int, source uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistrarRegistrationRequested(&_EventsMock.TransactOpts, hash, name, encryptedEmail, upkeepContract, gasLimit, adminAddress, checkData, amount, source)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistry12Config) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_ConfigSet", config)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12ConfigSet(config EventsMockKeeperRegistry12Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12ConfigSet(config EventsMockKeeperRegistry12Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_KeepersUpdated", keepers, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_PayeeshipTransferRequested", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_PayeeshipTransferred", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_PaymentWithdrawn", keeper, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepPerformed", id, success, from, payment, performData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry12UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_2_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry12UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry12UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry12UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistry13Config) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_ConfigSet", config)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13ConfigSet(config EventsMockKeeperRegistry13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13ConfigSet(config EventsMockKeeperRegistry13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_KeepersUpdated", keepers, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_PayeeshipTransferRequested", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_PayeeshipTransferred", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_PaymentWithdrawn", keeper, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepPerformed", id, success, from, payment, performData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry1_3_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_CancelledUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20ConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_ConfigSet", previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20ConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20ConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20ConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20ConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_InsufficientFundsUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_PayeesUpdated", transmitters, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_PayeeshipTransferRequested", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_PayeeshipTransferred", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_PaymentWithdrawn", transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_ReorgedUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_StaleUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20Transmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_Transmitted", configDigest, epoch)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20Transmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Transmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20Transmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Transmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepOffchainConfigSet", id, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepPerformed", id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistry20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistry2_0_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistry20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistry20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistry20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistryBase13Config) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_ConfigSet", config)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13ConfigSet(config EventsMockKeeperRegistryBase13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13ConfigSet(config EventsMockKeeperRegistryBase13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_KeepersUpdated", keepers, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_PayeeshipTransferRequested", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_PayeeshipTransferred", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_PaymentWithdrawn", keeper, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepPerformed", id, success, from, payment, performData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase1_3_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_CancelledUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_InsufficientFundsUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_PayeesUpdated", transmitters, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_PayeeshipTransferRequested", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_PayeeshipTransferred", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_PaymentWithdrawn", transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_ReorgedUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_StaleUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepOffchainConfigSet", id, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepPerformed", id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryBase20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryBase2_0_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryBase20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryBase20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryBase20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistryLogic13Config) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_ConfigSet", config)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13ConfigSet(config EventsMockKeeperRegistryLogic13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13ConfigSet(config EventsMockKeeperRegistryLogic13Config) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13ConfigSet(&_EventsMock.TransactOpts, config)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_KeepersUpdated", keepers, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13KeepersUpdated(keepers []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13KeepersUpdated(&_EventsMock.TransactOpts, keepers, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_PayeeshipTransferRequested", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13PayeeshipTransferRequested(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PayeeshipTransferRequested(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_PayeeshipTransferred", keeper, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13PayeeshipTransferred(keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PayeeshipTransferred(&_EventsMock.TransactOpts, keeper, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_PaymentWithdrawn", keeper, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13PaymentWithdrawn(keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13PaymentWithdrawn(&_EventsMock.TransactOpts, keeper, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepPerformed", id, success, from, payment, performData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepPerformed(id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepPerformed(&_EventsMock.TransactOpts, id, success, from, payment, performData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic1_3_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic13UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic13UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_CancelledUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20CancelledUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20CancelledUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_FundsAdded", id, from, amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20FundsAdded(id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20FundsAdded(&_EventsMock.TransactOpts, id, from, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_FundsWithdrawn", id, amount, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20FundsWithdrawn(id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20FundsWithdrawn(&_EventsMock.TransactOpts, id, amount, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_OwnerFundsWithdrawn", amount)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20OwnerFundsWithdrawn(amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnerFundsWithdrawn(&_EventsMock.TransactOpts, amount)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20Paused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20Paused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_PayeesUpdated", transmitters, payees)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20PayeesUpdated(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeesUpdated(&_EventsMock.TransactOpts, transmitters, payees)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_PayeeshipTransferRequested", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20PayeeshipTransferRequested(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeeshipTransferRequested(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_PayeeshipTransferred", transmitter, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20PayeeshipTransferred(transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PayeeshipTransferred(&_EventsMock.TransactOpts, transmitter, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_PaymentWithdrawn", transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20PaymentWithdrawn(transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20PaymentWithdrawn(&_EventsMock.TransactOpts, transmitter, amount, to, payee)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_ReorgedUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20ReorgedUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20ReorgedUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_StaleUpkeepReport", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20StaleUpkeepReport(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20StaleUpkeepReport(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20Unpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20Unpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepAdminTransferRequested", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepAdminTransferred", id, from, to)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepAdminTransferred(id *big.Int, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepAdminTransferred(&_EventsMock.TransactOpts, id, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepCanceled", id, atBlockHeight)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepCanceled(id *big.Int, atBlockHeight uint64) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepCanceled(&_EventsMock.TransactOpts, id, atBlockHeight)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepCheckDataUpdated", id, newCheckData)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(&_EventsMock.TransactOpts, id, newCheckData)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepGasLimitSet", id, gasLimit)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepGasLimitSet(id *big.Int, gasLimit *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepGasLimitSet(&_EventsMock.TransactOpts, id, gasLimit)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepMigrated", id, remainingBalance, destination)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepMigrated(id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepMigrated(&_EventsMock.TransactOpts, id, remainingBalance, destination)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepOffchainConfigSet", id, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(id *big.Int, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(&_EventsMock.TransactOpts, id, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepPaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepPaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepPaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepPerformed", id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepPerformed(id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepPerformed(&_EventsMock.TransactOpts, id, success, checkBlockNumber, gasUsed, gasOverhead, totalPayment)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepReceived", id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepReceived(id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepReceived(&_EventsMock.TransactOpts, id, startingBalance, importedFrom)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepRegistered", id, executeGas, admin)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepRegistered(id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepRegistered(&_EventsMock.TransactOpts, id, executeGas, admin)
}

func (_EventsMock *EventsMockTransactor) EmitKeeperRegistryLogic20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitKeeperRegistryLogic2_0_UpkeepUnpaused", id)
}

func (_EventsMock *EventsMockSession) EmitKeeperRegistryLogic20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactorSession) EmitKeeperRegistryLogic20UpkeepUnpaused(id *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitKeeperRegistryLogic20UpkeepUnpaused(&_EventsMock.TransactOpts, id)
}

func (_EventsMock *EventsMockTransactor) EmitLogEmitterLog1(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitLogEmitter_Log1", param1)
}

func (_EventsMock *EventsMockSession) EmitLogEmitterLog1(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog1(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitLogEmitterLog1(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog1(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitLogEmitterLog2(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitLogEmitter_Log2", param1)
}

func (_EventsMock *EventsMockSession) EmitLogEmitterLog2(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog2(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitLogEmitterLog2(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog2(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitLogEmitterLog3(opts *bind.TransactOpts, param1 string) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitLogEmitter_Log3", param1)
}

func (_EventsMock *EventsMockSession) EmitLogEmitterLog3(param1 string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog3(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitLogEmitterLog3(param1 string) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitLogEmitterLog3(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2AbstractConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2Abstract_ConfigSet", previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitOCR2AbstractConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2AbstractConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2AbstractConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2AbstractConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2AbstractTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2Abstract_Transmitted", configDigest, epoch)
}

func (_EventsMock *EventsMockSession) EmitOCR2AbstractTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2AbstractTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2AbstractTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2AbstractTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2BaseUpgradeableConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2BaseUpgradeable_ConfigSet", previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitOCR2BaseUpgradeableConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2BaseUpgradeableConfigSet(previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableConfigSet(&_EventsMock.TransactOpts, previousConfigBlockNumber, configDigest, configCount, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2BaseUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2BaseUpgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitOCR2BaseUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2BaseUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2BaseUpgradeable_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitOCR2BaseUpgradeableOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2BaseUpgradeableOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2BaseUpgradeableOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2BaseUpgradeable_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitOCR2BaseUpgradeableOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2BaseUpgradeableOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitOCR2BaseUpgradeableTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOCR2BaseUpgradeable_Transmitted", configDigest, epoch)
}

func (_EventsMock *EventsMockSession) EmitOCR2BaseUpgradeableTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactorSession) EmitOCR2BaseUpgradeableTransmitted(configDigest [32]byte, epoch uint32) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOCR2BaseUpgradeableTransmitted(&_EventsMock.TransactOpts, configDigest, epoch)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleDecimalsUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_DecimalsUpdated", param1)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleDecimalsUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleDecimalsUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleDecimalsUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleDecimalsUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleGasPriceUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_GasPriceUpdated", param1)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleGasPriceUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleGasPriceUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleGasPriceUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleGasPriceUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_L1BaseFeeUpdated", param1)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleL1BaseFeeUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleL1BaseFeeUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleL1BaseFeeUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleL1BaseFeeUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleOverheadUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_OverheadUpdated", param1)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleOverheadUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleOverheadUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleOverheadUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleOverheadUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_OwnershipTransferred", previousOwner, newOwner)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactor) EmitOVMGasPriceOracleScalarUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOVM_GasPriceOracle_ScalarUpdated", param1)
}

func (_EventsMock *EventsMockSession) EmitOVMGasPriceOracleScalarUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleScalarUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactorSession) EmitOVMGasPriceOracleScalarUpdated(param1 *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOVMGasPriceOracleScalarUpdated(&_EventsMock.TransactOpts, param1)
}

func (_EventsMock *EventsMockTransactor) EmitOwnableOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitOwnable_OwnershipTransferred", previousOwner, newOwner)
}

func (_EventsMock *EventsMockSession) EmitOwnableOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOwnableOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactorSession) EmitOwnableOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitOwnableOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactor) EmitPausableUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitPausableUpgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitPausableUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitPausableUpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitPausableUpgradeablePaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitPausableUpgradeable_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitPausableUpgradeablePaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeablePaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitPausableUpgradeablePaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeablePaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitPausableUpgradeableUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitPausableUpgradeable_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitPausableUpgradeableUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeableUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitPausableUpgradeableUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUpgradeableUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitPausablePaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitPausable_Paused", account)
}

func (_EventsMock *EventsMockSession) EmitPausablePaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausablePaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitPausablePaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausablePaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitPausableUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitPausable_Unpaused", account)
}

func (_EventsMock *EventsMockSession) EmitPausableUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactorSession) EmitPausableUnpaused(account common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitPausableUnpaused(&_EventsMock.TransactOpts, account)
}

func (_EventsMock *EventsMockTransactor) EmitProxyAdminOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitProxyAdmin_OwnershipTransferred", previousOwner, newOwner)
}

func (_EventsMock *EventsMockSession) EmitProxyAdminOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitProxyAdminOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactorSession) EmitProxyAdminOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitProxyAdminOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactor) EmitTransparentUpgradeableProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitTransparentUpgradeableProxy_AdminChanged", previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockSession) EmitTransparentUpgradeableProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactorSession) EmitTransparentUpgradeableProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactor) EmitTransparentUpgradeableProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitTransparentUpgradeableProxy_BeaconUpgraded", beacon)
}

func (_EventsMock *EventsMockSession) EmitTransparentUpgradeableProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactorSession) EmitTransparentUpgradeableProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactor) EmitTransparentUpgradeableProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitTransparentUpgradeableProxy_Upgraded", implementation)
}

func (_EventsMock *EventsMockSession) EmitTransparentUpgradeableProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactorSession) EmitTransparentUpgradeableProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitTransparentUpgradeableProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactor) EmitVRFConsumerBaseV2UpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFConsumerBaseV2Upgradeable_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitVRFConsumerBaseV2UpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFConsumerBaseV2UpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFConsumerBaseV2UpgradeableInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFConsumerBaseV2UpgradeableInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitVRFConsumerV2UpgradeableExampleInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFConsumerV2UpgradeableExample_Initialized", version)
}

func (_EventsMock *EventsMockSession) EmitVRFConsumerV2UpgradeableExampleInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFConsumerV2UpgradeableExampleInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFConsumerV2UpgradeableExampleInitialized(version uint8) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFConsumerV2UpgradeableExampleInitialized(&_EventsMock.TransactOpts, version)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorMockRandomnessRequest(opts *bind.TransactOpts, sender common.Address, keyHash [32]byte, seed *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorMock_RandomnessRequest", sender, keyHash, seed)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorMockRandomnessRequest(sender common.Address, keyHash [32]byte, seed *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorMockRandomnessRequest(&_EventsMock.TransactOpts, sender, keyHash, seed)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorMockRandomnessRequest(sender common.Address, keyHash [32]byte, seed *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorMockRandomnessRequest(&_EventsMock.TransactOpts, sender, keyHash, seed)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperConfigSet(opts *bind.TransactOpts, minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2TestHelperFeeConfig) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_ConfigSet", minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperConfigSet(minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2TestHelperFeeConfig) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperConfigSet(&_EventsMock.TransactOpts, minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperConfigSet(minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2TestHelperFeeConfig) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperConfigSet(&_EventsMock.TransactOpts, minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_FundsRecovered", to, amount)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperFundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperFundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_ProvingKeyDeregistered", keyHash, oracle)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_ProvingKeyRegistered", keyHash, oracle)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.TransactOpts, requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_RandomWordsFulfilled", requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(&_EventsMock.TransactOpts, requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(&_EventsMock.TransactOpts, requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.TransactOpts, keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_RandomWordsRequested", keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperRandomWordsRequested(keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperRandomWordsRequested(&_EventsMock.TransactOpts, keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperRandomWordsRequested(keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperRandomWordsRequested(&_EventsMock.TransactOpts, keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionCanceled", subId, to, amount)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(&_EventsMock.TransactOpts, subId, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(&_EventsMock.TransactOpts, subId, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", subId, consumer)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", subId, consumer)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.TransactOpts, subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionCreated", subId, owner)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionCreated(subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionCreated(&_EventsMock.TransactOpts, subId, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionCreated(subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionCreated(&_EventsMock.TransactOpts, subId, owner)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.TransactOpts, subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionFunded", subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionFunded(subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionFunded(&_EventsMock.TransactOpts, subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionFunded(subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionFunded(&_EventsMock.TransactOpts, subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", subId, from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", subId, from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2ConfigSet(opts *bind.TransactOpts, minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2FeeConfig) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_ConfigSet", minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2ConfigSet(minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2FeeConfig) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ConfigSet(&_EventsMock.TransactOpts, minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2ConfigSet(minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2FeeConfig) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ConfigSet(&_EventsMock.TransactOpts, minimumRequestConfirmations, maxGasLimit, stalenessSeconds, gasAfterPaymentCalculation, fallbackWeiPerUnitLink, feeConfig)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2FundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_FundsRecovered", to, amount)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2FundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2FundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2FundsRecovered(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2FundsRecovered(&_EventsMock.TransactOpts, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2OwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2OwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2OwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2OwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_ProvingKeyDeregistered", keyHash, oracle)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2ProvingKeyDeregistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ProvingKeyDeregistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2ProvingKeyDeregistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ProvingKeyDeregistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2ProvingKeyRegistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_ProvingKeyRegistered", keyHash, oracle)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2ProvingKeyRegistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ProvingKeyRegistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2ProvingKeyRegistered(keyHash [32]byte, oracle common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2ProvingKeyRegistered(&_EventsMock.TransactOpts, keyHash, oracle)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2RandomWordsFulfilled(opts *bind.TransactOpts, requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_RandomWordsFulfilled", requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2RandomWordsFulfilled(requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2RandomWordsFulfilled(&_EventsMock.TransactOpts, requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2RandomWordsFulfilled(requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2RandomWordsFulfilled(&_EventsMock.TransactOpts, requestId, outputSeed, payment, success)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2RandomWordsRequested(opts *bind.TransactOpts, keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_RandomWordsRequested", keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2RandomWordsRequested(keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2RandomWordsRequested(&_EventsMock.TransactOpts, keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2RandomWordsRequested(keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2RandomWordsRequested(&_EventsMock.TransactOpts, keyHash, requestId, preSeed, subId, minimumRequestConfirmations, callbackGasLimit, numWords, sender)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionCanceled(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionCanceled", subId, to, amount)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionCanceled(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionCanceled(&_EventsMock.TransactOpts, subId, to, amount)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionCanceled(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionCanceled(&_EventsMock.TransactOpts, subId, to, amount)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionConsumerAdded", subId, consumer)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionConsumerAdded(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionConsumerAdded(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionConsumerAdded(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionConsumerAdded(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionConsumerRemoved", subId, consumer)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionConsumerRemoved(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionConsumerRemoved(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionConsumerRemoved(&_EventsMock.TransactOpts, subId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionCreated(opts *bind.TransactOpts, subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionCreated", subId, owner)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionCreated(subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionCreated(&_EventsMock.TransactOpts, subId, owner)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionCreated(subId uint64, owner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionCreated(&_EventsMock.TransactOpts, subId, owner)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionFunded(opts *bind.TransactOpts, subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionFunded", subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionFunded(subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionFunded(&_EventsMock.TransactOpts, subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionFunded(subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionFunded(&_EventsMock.TransactOpts, subId, oldBalance, newBalance)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionOwnerTransferRequested", subId, from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFCoordinatorV2_SubscriptionOwnerTransferred", subId, from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFCoordinatorV2SubscriptionOwnerTransferred(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFCoordinatorV2SubscriptionOwnerTransferred(subId uint64, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFCoordinatorV2SubscriptionOwnerTransferred(&_EventsMock.TransactOpts, subId, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFLoadTestExternalSubOwner_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFLoadTestExternalSubOwner_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2ProxyAdminOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2ProxyAdmin_OwnershipTransferred", previousOwner, newOwner)
}

func (_EventsMock *EventsMockSession) EmitVRFV2ProxyAdminOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2ProxyAdminOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2ProxyAdminOwnershipTransferred(previousOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2ProxyAdminOwnershipTransferred(&_EventsMock.TransactOpts, previousOwner, newOwner)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2TransparentUpgradeableProxy_AdminChanged", previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockSession) EmitVRFV2TransparentUpgradeableProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2TransparentUpgradeableProxyAdminChanged(previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyAdminChanged(&_EventsMock.TransactOpts, previousAdmin, newAdmin)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2TransparentUpgradeableProxy_BeaconUpgraded", beacon)
}

func (_EventsMock *EventsMockSession) EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(beacon common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(&_EventsMock.TransactOpts, beacon)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2TransparentUpgradeableProxy_Upgraded", implementation)
}

func (_EventsMock *EventsMockSession) EmitVRFV2TransparentUpgradeableProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2TransparentUpgradeableProxyUpgraded(implementation common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2TransparentUpgradeableProxyUpgraded(&_EventsMock.TransactOpts, implementation)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2WrapperConsumerExample_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2WrapperConsumerExample_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperConsumerExampleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperConsumerExampleOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int, payment *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2WrapperConsumerExample_WrappedRequestFulfilled", requestId, randomWords, payment)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(requestId *big.Int, randomWords []*big.Int, payment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(&_EventsMock.TransactOpts, requestId, randomWords, payment)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(requestId *big.Int, randomWords []*big.Int, payment *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(&_EventsMock.TransactOpts, requestId, randomWords, payment)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.TransactOpts, requestId *big.Int, paid *big.Int) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2WrapperConsumerExample_WrapperRequestMade", requestId, paid)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperConsumerExampleWrapperRequestMade(requestId *big.Int, paid *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleWrapperRequestMade(&_EventsMock.TransactOpts, requestId, paid)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperConsumerExampleWrapperRequestMade(requestId *big.Int, paid *big.Int) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperConsumerExampleWrapperRequestMade(&_EventsMock.TransactOpts, requestId, paid)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2Wrapper_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2Wrapper_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVRFV2WrapperWrapperFulfillmentFailed(opts *bind.TransactOpts, requestId *big.Int, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVRFV2Wrapper_WrapperFulfillmentFailed", requestId, consumer)
}

func (_EventsMock *EventsMockSession) EmitVRFV2WrapperWrapperFulfillmentFailed(requestId *big.Int, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperWrapperFulfillmentFailed(&_EventsMock.TransactOpts, requestId, consumer)
}

func (_EventsMock *EventsMockTransactorSession) EmitVRFV2WrapperWrapperFulfillmentFailed(requestId *big.Int, consumer common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVRFV2WrapperWrapperFulfillmentFailed(&_EventsMock.TransactOpts, requestId, consumer)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierProxyAccessControllerSet(opts *bind.TransactOpts, oldAccessController common.Address, newAccessController common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifierProxy_AccessControllerSet", oldAccessController, newAccessController)
}

func (_EventsMock *EventsMockSession) EmitVerifierProxyAccessControllerSet(oldAccessController common.Address, newAccessController common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyAccessControllerSet(&_EventsMock.TransactOpts, oldAccessController, newAccessController)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierProxyAccessControllerSet(oldAccessController common.Address, newAccessController common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyAccessControllerSet(&_EventsMock.TransactOpts, oldAccessController, newAccessController)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierProxyOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifierProxy_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVerifierProxyOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierProxyOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierProxyOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifierProxy_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVerifierProxyOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierProxyOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierProxyVerifierSet(opts *bind.TransactOpts, oldConfigDigest [32]byte, newConfigDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifierProxy_VerifierSet", oldConfigDigest, newConfigDigest, verifierAddress)
}

func (_EventsMock *EventsMockSession) EmitVerifierProxyVerifierSet(oldConfigDigest [32]byte, newConfigDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyVerifierSet(&_EventsMock.TransactOpts, oldConfigDigest, newConfigDigest, verifierAddress)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierProxyVerifierSet(oldConfigDigest [32]byte, newConfigDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyVerifierSet(&_EventsMock.TransactOpts, oldConfigDigest, newConfigDigest, verifierAddress)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierProxyVerifierUnset(opts *bind.TransactOpts, configDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifierProxy_VerifierUnset", configDigest, verifierAddress)
}

func (_EventsMock *EventsMockSession) EmitVerifierProxyVerifierUnset(configDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyVerifierUnset(&_EventsMock.TransactOpts, configDigest, verifierAddress)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierProxyVerifierUnset(configDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierProxyVerifierUnset(&_EventsMock.TransactOpts, configDigest, verifierAddress)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierConfigActivated(opts *bind.TransactOpts, feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_ConfigActivated", feedId, configDigest)
}

func (_EventsMock *EventsMockSession) EmitVerifierConfigActivated(feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigActivated(&_EventsMock.TransactOpts, feedId, configDigest)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierConfigActivated(feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigActivated(&_EventsMock.TransactOpts, feedId, configDigest)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierConfigDeactivated(opts *bind.TransactOpts, feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_ConfigDeactivated", feedId, configDigest)
}

func (_EventsMock *EventsMockSession) EmitVerifierConfigDeactivated(feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigDeactivated(&_EventsMock.TransactOpts, feedId, configDigest)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierConfigDeactivated(feedId [32]byte, configDigest [32]byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigDeactivated(&_EventsMock.TransactOpts, feedId, configDigest)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierConfigSet(opts *bind.TransactOpts, feedId [32]byte, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, offchainTransmitters [][32]byte, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_ConfigSet", feedId, previousConfigBlockNumber, configDigest, configCount, signers, offchainTransmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockSession) EmitVerifierConfigSet(feedId [32]byte, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, offchainTransmitters [][32]byte, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigSet(&_EventsMock.TransactOpts, feedId, previousConfigBlockNumber, configDigest, configCount, signers, offchainTransmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierConfigSet(feedId [32]byte, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, offchainTransmitters [][32]byte, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierConfigSet(&_EventsMock.TransactOpts, feedId, previousConfigBlockNumber, configDigest, configCount, signers, offchainTransmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_OwnershipTransferRequested", from, to)
}

func (_EventsMock *EventsMockSession) EmitVerifierOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierOwnershipTransferRequested(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierOwnershipTransferRequested(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_OwnershipTransferred", from, to)
}

func (_EventsMock *EventsMockSession) EmitVerifierOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierOwnershipTransferred(from common.Address, to common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierOwnershipTransferred(&_EventsMock.TransactOpts, from, to)
}

func (_EventsMock *EventsMockTransactor) EmitVerifierReportVerified(opts *bind.TransactOpts, feedId [32]byte, reportHash [32]byte, requester common.Address) (*types.Transaction, error) {
	return _EventsMock.contract.Transact(opts, "emitVerifier_ReportVerified", feedId, reportHash, requester)
}

func (_EventsMock *EventsMockSession) EmitVerifierReportVerified(feedId [32]byte, reportHash [32]byte, requester common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierReportVerified(&_EventsMock.TransactOpts, feedId, reportHash, requester)
}

func (_EventsMock *EventsMockTransactorSession) EmitVerifierReportVerified(feedId [32]byte, reportHash [32]byte, requester common.Address) (*types.Transaction, error) {
	return _EventsMock.Contract.EmitVerifierReportVerified(&_EventsMock.TransactOpts, feedId, reportHash, requester)
}

type EventsMockAggregatorInterfaceAnswerUpdatedIterator struct {
	Event *EventsMockAggregatorInterfaceAnswerUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAggregatorInterfaceAnswerUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAggregatorInterfaceAnswerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAggregatorInterfaceAnswerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAggregatorInterfaceAnswerUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockAggregatorInterfaceAnswerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAggregatorInterfaceAnswerUpdated struct {
	Current   *big.Int
	RoundId   *big.Int
	UpdatedAt *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAggregatorInterfaceAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*EventsMockAggregatorInterfaceAnswerUpdatedIterator, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AggregatorInterface_AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockAggregatorInterfaceAnswerUpdatedIterator{contract: _EventsMock.contract, event: "AggregatorInterface_AnswerUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAggregatorInterfaceAnswerUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorInterfaceAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AggregatorInterface_AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAggregatorInterfaceAnswerUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "AggregatorInterface_AnswerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAggregatorInterfaceAnswerUpdated(log types.Log) (*EventsMockAggregatorInterfaceAnswerUpdated, error) {
	event := new(EventsMockAggregatorInterfaceAnswerUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "AggregatorInterface_AnswerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAggregatorInterfaceNewRoundIterator struct {
	Event *EventsMockAggregatorInterfaceNewRound

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAggregatorInterfaceNewRoundIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAggregatorInterfaceNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAggregatorInterfaceNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAggregatorInterfaceNewRoundIterator) Error() error {
	return it.fail
}

func (it *EventsMockAggregatorInterfaceNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAggregatorInterfaceNewRound struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAggregatorInterfaceNewRound(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*EventsMockAggregatorInterfaceNewRoundIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AggregatorInterface_NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockAggregatorInterfaceNewRoundIterator{contract: _EventsMock.contract, event: "AggregatorInterface_NewRound", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAggregatorInterfaceNewRound(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorInterfaceNewRound, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AggregatorInterface_NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAggregatorInterfaceNewRound)
				if err := _EventsMock.contract.UnpackLog(event, "AggregatorInterface_NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAggregatorInterfaceNewRound(log types.Log) (*EventsMockAggregatorInterfaceNewRound, error) {
	event := new(EventsMockAggregatorInterfaceNewRound)
	if err := _EventsMock.contract.UnpackLog(event, "AggregatorInterface_NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator struct {
	Event *EventsMockAggregatorV2V3InterfaceAnswerUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAggregatorV2V3InterfaceAnswerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAggregatorV2V3InterfaceAnswerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAggregatorV2V3InterfaceAnswerUpdated struct {
	Current   *big.Int
	RoundId   *big.Int
	UpdatedAt *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAggregatorV2V3InterfaceAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AggregatorV2V3Interface_AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator{contract: _EventsMock.contract, event: "AggregatorV2V3Interface_AnswerUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAggregatorV2V3InterfaceAnswerUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorV2V3InterfaceAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AggregatorV2V3Interface_AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAggregatorV2V3InterfaceAnswerUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "AggregatorV2V3Interface_AnswerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAggregatorV2V3InterfaceAnswerUpdated(log types.Log) (*EventsMockAggregatorV2V3InterfaceAnswerUpdated, error) {
	event := new(EventsMockAggregatorV2V3InterfaceAnswerUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "AggregatorV2V3Interface_AnswerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAggregatorV2V3InterfaceNewRoundIterator struct {
	Event *EventsMockAggregatorV2V3InterfaceNewRound

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAggregatorV2V3InterfaceNewRoundIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAggregatorV2V3InterfaceNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAggregatorV2V3InterfaceNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAggregatorV2V3InterfaceNewRoundIterator) Error() error {
	return it.fail
}

func (it *EventsMockAggregatorV2V3InterfaceNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAggregatorV2V3InterfaceNewRound struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAggregatorV2V3InterfaceNewRound(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*EventsMockAggregatorV2V3InterfaceNewRoundIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AggregatorV2V3Interface_NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockAggregatorV2V3InterfaceNewRoundIterator{contract: _EventsMock.contract, event: "AggregatorV2V3Interface_NewRound", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAggregatorV2V3InterfaceNewRound(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorV2V3InterfaceNewRound, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AggregatorV2V3Interface_NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAggregatorV2V3InterfaceNewRound)
				if err := _EventsMock.contract.UnpackLog(event, "AggregatorV2V3Interface_NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAggregatorV2V3InterfaceNewRound(log types.Log) (*EventsMockAggregatorV2V3InterfaceNewRound, error) {
	event := new(EventsMockAggregatorV2V3InterfaceNewRound)
	if err := _EventsMock.contract.UnpackLog(event, "AggregatorV2V3Interface_NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockArbSysL2ToL1TransactionIterator struct {
	Event *EventsMockArbSysL2ToL1Transaction

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockArbSysL2ToL1TransactionIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockArbSysL2ToL1Transaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockArbSysL2ToL1Transaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockArbSysL2ToL1TransactionIterator) Error() error {
	return it.fail
}

func (it *EventsMockArbSysL2ToL1TransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockArbSysL2ToL1Transaction struct {
	Caller       common.Address
	Destination  common.Address
	UniqueId     *big.Int
	BatchNumber  *big.Int
	IndexInBatch *big.Int
	ArbBlockNum  *big.Int
	EthBlockNum  *big.Int
	Timestamp    *big.Int
	Callvalue    *big.Int
	Data         []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterArbSysL2ToL1Transaction(opts *bind.FilterOpts, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (*EventsMockArbSysL2ToL1TransactionIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var uniqueIdRule []interface{}
	for _, uniqueIdItem := range uniqueId {
		uniqueIdRule = append(uniqueIdRule, uniqueIdItem)
	}
	var batchNumberRule []interface{}
	for _, batchNumberItem := range batchNumber {
		batchNumberRule = append(batchNumberRule, batchNumberItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ArbSys_L2ToL1Transaction", destinationRule, uniqueIdRule, batchNumberRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockArbSysL2ToL1TransactionIterator{contract: _EventsMock.contract, event: "ArbSys_L2ToL1Transaction", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchArbSysL2ToL1Transaction(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysL2ToL1Transaction, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var uniqueIdRule []interface{}
	for _, uniqueIdItem := range uniqueId {
		uniqueIdRule = append(uniqueIdRule, uniqueIdItem)
	}
	var batchNumberRule []interface{}
	for _, batchNumberItem := range batchNumber {
		batchNumberRule = append(batchNumberRule, batchNumberItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ArbSys_L2ToL1Transaction", destinationRule, uniqueIdRule, batchNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockArbSysL2ToL1Transaction)
				if err := _EventsMock.contract.UnpackLog(event, "ArbSys_L2ToL1Transaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseArbSysL2ToL1Transaction(log types.Log) (*EventsMockArbSysL2ToL1Transaction, error) {
	event := new(EventsMockArbSysL2ToL1Transaction)
	if err := _EventsMock.contract.UnpackLog(event, "ArbSys_L2ToL1Transaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockArbSysL2ToL1TxIterator struct {
	Event *EventsMockArbSysL2ToL1Tx

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockArbSysL2ToL1TxIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockArbSysL2ToL1Tx)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockArbSysL2ToL1Tx)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockArbSysL2ToL1TxIterator) Error() error {
	return it.fail
}

func (it *EventsMockArbSysL2ToL1TxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockArbSysL2ToL1Tx struct {
	Caller      common.Address
	Destination common.Address
	Hash        *big.Int
	Position    *big.Int
	ArbBlockNum *big.Int
	EthBlockNum *big.Int
	Timestamp   *big.Int
	Callvalue   *big.Int
	Data        []byte
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterArbSysL2ToL1Tx(opts *bind.FilterOpts, destination []common.Address, hash []*big.Int, position []*big.Int) (*EventsMockArbSysL2ToL1TxIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ArbSys_L2ToL1Tx", destinationRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockArbSysL2ToL1TxIterator{contract: _EventsMock.contract, event: "ArbSys_L2ToL1Tx", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchArbSysL2ToL1Tx(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysL2ToL1Tx, destination []common.Address, hash []*big.Int, position []*big.Int) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ArbSys_L2ToL1Tx", destinationRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockArbSysL2ToL1Tx)
				if err := _EventsMock.contract.UnpackLog(event, "ArbSys_L2ToL1Tx", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseArbSysL2ToL1Tx(log types.Log) (*EventsMockArbSysL2ToL1Tx, error) {
	event := new(EventsMockArbSysL2ToL1Tx)
	if err := _EventsMock.contract.UnpackLog(event, "ArbSys_L2ToL1Tx", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockArbSysSendMerkleUpdateIterator struct {
	Event *EventsMockArbSysSendMerkleUpdate

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockArbSysSendMerkleUpdateIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockArbSysSendMerkleUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockArbSysSendMerkleUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockArbSysSendMerkleUpdateIterator) Error() error {
	return it.fail
}

func (it *EventsMockArbSysSendMerkleUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockArbSysSendMerkleUpdate struct {
	Reserved *big.Int
	Hash     [32]byte
	Position *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterArbSysSendMerkleUpdate(opts *bind.FilterOpts, reserved []*big.Int, hash [][32]byte, position []*big.Int) (*EventsMockArbSysSendMerkleUpdateIterator, error) {

	var reservedRule []interface{}
	for _, reservedItem := range reserved {
		reservedRule = append(reservedRule, reservedItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ArbSys_SendMerkleUpdate", reservedRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockArbSysSendMerkleUpdateIterator{contract: _EventsMock.contract, event: "ArbSys_SendMerkleUpdate", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchArbSysSendMerkleUpdate(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysSendMerkleUpdate, reserved []*big.Int, hash [][32]byte, position []*big.Int) (event.Subscription, error) {

	var reservedRule []interface{}
	for _, reservedItem := range reserved {
		reservedRule = append(reservedRule, reservedItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ArbSys_SendMerkleUpdate", reservedRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockArbSysSendMerkleUpdate)
				if err := _EventsMock.contract.UnpackLog(event, "ArbSys_SendMerkleUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseArbSysSendMerkleUpdate(log types.Log) (*EventsMockArbSysSendMerkleUpdate, error) {
	event := new(EventsMockArbSysSendMerkleUpdate)
	if err := _EventsMock.contract.UnpackLog(event, "ArbSys_SendMerkleUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator struct {
	Event *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return &EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator{contract: _EventsMock.contract, event: "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive)
				if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive, error) {
	event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive)
	if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersActive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator struct {
	Event *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged, error) {
	event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator struct {
	Event *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return &EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator{contract: _EventsMock.contract, event: "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive)
				if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive, error) {
	event := new(EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive)
	if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_AuthorizedSendersDeactive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator struct {
	Event *EventsMockAuthorizedOriginReceiverUpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAuthorizedOriginReceiverUpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAuthorizedOriginReceiverUpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AuthorizedOriginReceiverUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator{contract: _EventsMock.contract, event: "AuthorizedOriginReceiverUpgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AuthorizedOriginReceiverUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAuthorizedOriginReceiverUpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAuthorizedOriginReceiverUpgradeableInitialized(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableInitialized, error) {
	event := new(EventsMockAuthorizedOriginReceiverUpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "AuthorizedOriginReceiverUpgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator struct {
	Event *EventsMockAuthorizedReceiverAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockAuthorizedReceiverAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockAuthorizedReceiverAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockAuthorizedReceiverAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterAuthorizedReceiverAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "AuthorizedReceiver_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "AuthorizedReceiver_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchAuthorizedReceiverAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedReceiverAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "AuthorizedReceiver_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockAuthorizedReceiverAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "AuthorizedReceiver_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseAuthorizedReceiverAuthorizedSendersChanged(log types.Log) (*EventsMockAuthorizedReceiverAuthorizedSendersChanged, error) {
	event := new(EventsMockAuthorizedReceiverAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "AuthorizedReceiver_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator struct {
	Event *EventsMockBatchVRFCoordinatorV2ErrorReturned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockBatchVRFCoordinatorV2ErrorReturned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockBatchVRFCoordinatorV2ErrorReturned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator) Error() error {
	return it.fail
}

func (it *EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockBatchVRFCoordinatorV2ErrorReturned struct {
	RequestId *big.Int
	Reason    string
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterBatchVRFCoordinatorV2ErrorReturned(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "BatchVRFCoordinatorV2_ErrorReturned", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator{contract: _EventsMock.contract, event: "BatchVRFCoordinatorV2_ErrorReturned", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchBatchVRFCoordinatorV2ErrorReturned(opts *bind.WatchOpts, sink chan<- *EventsMockBatchVRFCoordinatorV2ErrorReturned, requestId []*big.Int) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "BatchVRFCoordinatorV2_ErrorReturned", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockBatchVRFCoordinatorV2ErrorReturned)
				if err := _EventsMock.contract.UnpackLog(event, "BatchVRFCoordinatorV2_ErrorReturned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseBatchVRFCoordinatorV2ErrorReturned(log types.Log) (*EventsMockBatchVRFCoordinatorV2ErrorReturned, error) {
	event := new(EventsMockBatchVRFCoordinatorV2ErrorReturned)
	if err := _EventsMock.contract.UnpackLog(event, "BatchVRFCoordinatorV2_ErrorReturned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator struct {
	Event *EventsMockBatchVRFCoordinatorV2RawErrorReturned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockBatchVRFCoordinatorV2RawErrorReturned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockBatchVRFCoordinatorV2RawErrorReturned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator) Error() error {
	return it.fail
}

func (it *EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockBatchVRFCoordinatorV2RawErrorReturned struct {
	RequestId    *big.Int
	LowLevelData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterBatchVRFCoordinatorV2RawErrorReturned(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "BatchVRFCoordinatorV2_RawErrorReturned", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator{contract: _EventsMock.contract, event: "BatchVRFCoordinatorV2_RawErrorReturned", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchBatchVRFCoordinatorV2RawErrorReturned(opts *bind.WatchOpts, sink chan<- *EventsMockBatchVRFCoordinatorV2RawErrorReturned, requestId []*big.Int) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "BatchVRFCoordinatorV2_RawErrorReturned", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockBatchVRFCoordinatorV2RawErrorReturned)
				if err := _EventsMock.contract.UnpackLog(event, "BatchVRFCoordinatorV2_RawErrorReturned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseBatchVRFCoordinatorV2RawErrorReturned(log types.Log) (*EventsMockBatchVRFCoordinatorV2RawErrorReturned, error) {
	event := new(EventsMockBatchVRFCoordinatorV2RawErrorReturned)
	if err := _EventsMock.contract.UnpackLog(event, "BatchVRFCoordinatorV2_RawErrorReturned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockChainlinkClientChainlinkCancelledIterator struct {
	Event *EventsMockChainlinkClientChainlinkCancelled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockChainlinkClientChainlinkCancelledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockChainlinkClientChainlinkCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockChainlinkClientChainlinkCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockChainlinkClientChainlinkCancelledIterator) Error() error {
	return it.fail
}

func (it *EventsMockChainlinkClientChainlinkCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockChainlinkClientChainlinkCancelled struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterChainlinkClientChainlinkCancelled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkCancelledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ChainlinkClient_ChainlinkCancelled", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockChainlinkClientChainlinkCancelledIterator{contract: _EventsMock.contract, event: "ChainlinkClient_ChainlinkCancelled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchChainlinkClientChainlinkCancelled(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkCancelled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ChainlinkClient_ChainlinkCancelled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockChainlinkClientChainlinkCancelled)
				if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseChainlinkClientChainlinkCancelled(log types.Log) (*EventsMockChainlinkClientChainlinkCancelled, error) {
	event := new(EventsMockChainlinkClientChainlinkCancelled)
	if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockChainlinkClientChainlinkFulfilledIterator struct {
	Event *EventsMockChainlinkClientChainlinkFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockChainlinkClientChainlinkFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockChainlinkClientChainlinkFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockChainlinkClientChainlinkFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockChainlinkClientChainlinkFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockChainlinkClientChainlinkFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockChainlinkClientChainlinkFulfilled struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterChainlinkClientChainlinkFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkFulfilledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ChainlinkClient_ChainlinkFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockChainlinkClientChainlinkFulfilledIterator{contract: _EventsMock.contract, event: "ChainlinkClient_ChainlinkFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchChainlinkClientChainlinkFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkFulfilled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ChainlinkClient_ChainlinkFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockChainlinkClientChainlinkFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseChainlinkClientChainlinkFulfilled(log types.Log) (*EventsMockChainlinkClientChainlinkFulfilled, error) {
	event := new(EventsMockChainlinkClientChainlinkFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockChainlinkClientChainlinkRequestedIterator struct {
	Event *EventsMockChainlinkClientChainlinkRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockChainlinkClientChainlinkRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockChainlinkClientChainlinkRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockChainlinkClientChainlinkRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockChainlinkClientChainlinkRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockChainlinkClientChainlinkRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockChainlinkClientChainlinkRequested struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterChainlinkClientChainlinkRequested(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ChainlinkClient_ChainlinkRequested", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockChainlinkClientChainlinkRequestedIterator{contract: _EventsMock.contract, event: "ChainlinkClient_ChainlinkRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchChainlinkClientChainlinkRequested(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkRequested, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ChainlinkClient_ChainlinkRequested", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockChainlinkClientChainlinkRequested)
				if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseChainlinkClientChainlinkRequested(log types.Log) (*EventsMockChainlinkClientChainlinkRequested, error) {
	event := new(EventsMockChainlinkClientChainlinkRequested)
	if err := _EventsMock.contract.UnpackLog(event, "ChainlinkClient_ChainlinkRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerUpgradeableInitializedIterator struct {
	Event *EventsMockConfirmedOwnerUpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerUpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerUpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerUpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerUpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerUpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerUpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockConfirmedOwnerUpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwnerUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerUpgradeableInitializedIterator{contract: _EventsMock.contract, event: "ConfirmedOwnerUpgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwnerUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerUpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerUpgradeableInitialized(log types.Log) (*EventsMockConfirmedOwnerUpgradeableInitialized, error) {
	event := new(EventsMockConfirmedOwnerUpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator struct {
	Event *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwnerUpgradeable_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "ConfirmedOwnerUpgradeable_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwnerUpgradeable_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerUpgradeableOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested, error) {
	event := new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator struct {
	Event *EventsMockConfirmedOwnerUpgradeableOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerUpgradeableOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwnerUpgradeable_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator{contract: _EventsMock.contract, event: "ConfirmedOwnerUpgradeable_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwnerUpgradeable_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerUpgradeableOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferred, error) {
	event := new(EventsMockConfirmedOwnerUpgradeableOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerUpgradeable_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator struct {
	Event *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwnerWithProposal_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "ConfirmedOwnerWithProposal_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwnerWithProposal_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerWithProposal_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerWithProposalOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested, error) {
	event := new(EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerWithProposal_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator struct {
	Event *EventsMockConfirmedOwnerWithProposalOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerWithProposalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerWithProposalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerWithProposalOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwnerWithProposal_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator{contract: _EventsMock.contract, event: "ConfirmedOwnerWithProposal_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerWithProposalOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwnerWithProposal_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerWithProposalOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerWithProposal_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerWithProposalOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferred, error) {
	event := new(EventsMockConfirmedOwnerWithProposalOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwnerWithProposal_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerOwnershipTransferRequestedIterator struct {
	Event *EventsMockConfirmedOwnerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwner_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "ConfirmedOwner_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwner_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwner_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerOwnershipTransferRequested, error) {
	event := new(EventsMockConfirmedOwnerOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwner_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockConfirmedOwnerOwnershipTransferredIterator struct {
	Event *EventsMockConfirmedOwnerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockConfirmedOwnerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockConfirmedOwnerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockConfirmedOwnerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockConfirmedOwnerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockConfirmedOwnerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockConfirmedOwnerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterConfirmedOwnerOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ConfirmedOwner_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockConfirmedOwnerOwnershipTransferredIterator{contract: _EventsMock.contract, event: "ConfirmedOwner_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchConfirmedOwnerOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ConfirmedOwner_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockConfirmedOwnerOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwner_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseConfirmedOwnerOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerOwnershipTransferred, error) {
	event := new(EventsMockConfirmedOwnerOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "ConfirmedOwner_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockContextUpgradeableInitializedIterator struct {
	Event *EventsMockContextUpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockContextUpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockContextUpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockContextUpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockContextUpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockContextUpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockContextUpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterContextUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockContextUpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ContextUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockContextUpgradeableInitializedIterator{contract: _EventsMock.contract, event: "ContextUpgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchContextUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockContextUpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ContextUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockContextUpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "ContextUpgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseContextUpgradeableInitialized(log types.Log) (*EventsMockContextUpgradeableInitialized, error) {
	event := new(EventsMockContextUpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "ContextUpgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator struct {
	Event *EventsMockCronUpkeepFactoryNewCronUpkeepCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepFactoryNewCronUpkeepCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepFactoryNewCronUpkeepCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepFactoryNewCronUpkeepCreated struct {
	Upkeep common.Address
	Owner  common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.FilterOpts) (*EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeepFactory_NewCronUpkeepCreated")
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator{contract: _EventsMock.contract, event: "CronUpkeepFactory_NewCronUpkeepCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryNewCronUpkeepCreated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeepFactory_NewCronUpkeepCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepFactoryNewCronUpkeepCreated)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_NewCronUpkeepCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepFactoryNewCronUpkeepCreated(log types.Log) (*EventsMockCronUpkeepFactoryNewCronUpkeepCreated, error) {
	event := new(EventsMockCronUpkeepFactoryNewCronUpkeepCreated)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_NewCronUpkeepCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator struct {
	Event *EventsMockCronUpkeepFactoryOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepFactoryOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepFactoryOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepFactoryOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepFactoryOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeepFactory_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "CronUpkeepFactory_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepFactoryOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeepFactory_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepFactoryOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepFactoryOwnershipTransferRequested(log types.Log) (*EventsMockCronUpkeepFactoryOwnershipTransferRequested, error) {
	event := new(EventsMockCronUpkeepFactoryOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepFactoryOwnershipTransferredIterator struct {
	Event *EventsMockCronUpkeepFactoryOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepFactoryOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepFactoryOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepFactoryOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeepFactory_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepFactoryOwnershipTransferredIterator{contract: _EventsMock.contract, event: "CronUpkeepFactory_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepFactoryOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeepFactory_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepFactoryOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepFactoryOwnershipTransferred(log types.Log) (*EventsMockCronUpkeepFactoryOwnershipTransferred, error) {
	event := new(EventsMockCronUpkeepFactoryOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeepFactory_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepCronJobCreatedIterator struct {
	Event *EventsMockCronUpkeepCronJobCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepCronJobCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepCronJobCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepCronJobCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepCronJobCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepCronJobCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepCronJobCreated struct {
	Id      *big.Int
	Target  common.Address
	Handler []byte
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepCronJobCreated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobCreatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_CronJobCreated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepCronJobCreatedIterator{contract: _EventsMock.contract, event: "CronUpkeep_CronJobCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepCronJobCreated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobCreated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_CronJobCreated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepCronJobCreated)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepCronJobCreated(log types.Log) (*EventsMockCronUpkeepCronJobCreated, error) {
	event := new(EventsMockCronUpkeepCronJobCreated)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepCronJobDeletedIterator struct {
	Event *EventsMockCronUpkeepCronJobDeleted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepCronJobDeletedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepCronJobDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepCronJobDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepCronJobDeletedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepCronJobDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepCronJobDeleted struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepCronJobDeleted(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobDeletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_CronJobDeleted", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepCronJobDeletedIterator{contract: _EventsMock.contract, event: "CronUpkeep_CronJobDeleted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepCronJobDeleted(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobDeleted, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_CronJobDeleted", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepCronJobDeleted)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepCronJobDeleted(log types.Log) (*EventsMockCronUpkeepCronJobDeleted, error) {
	event := new(EventsMockCronUpkeepCronJobDeleted)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepCronJobExecutedIterator struct {
	Event *EventsMockCronUpkeepCronJobExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepCronJobExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepCronJobExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepCronJobExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepCronJobExecutedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepCronJobExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepCronJobExecuted struct {
	Id        *big.Int
	Timestamp *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepCronJobExecuted(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobExecutedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_CronJobExecuted", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepCronJobExecutedIterator{contract: _EventsMock.contract, event: "CronUpkeep_CronJobExecuted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepCronJobExecuted(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobExecuted, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_CronJobExecuted", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepCronJobExecuted)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepCronJobExecuted(log types.Log) (*EventsMockCronUpkeepCronJobExecuted, error) {
	event := new(EventsMockCronUpkeepCronJobExecuted)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepCronJobUpdatedIterator struct {
	Event *EventsMockCronUpkeepCronJobUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepCronJobUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepCronJobUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepCronJobUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepCronJobUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepCronJobUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepCronJobUpdated struct {
	Id      *big.Int
	Target  common.Address
	Handler []byte
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepCronJobUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_CronJobUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepCronJobUpdatedIterator{contract: _EventsMock.contract, event: "CronUpkeep_CronJobUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepCronJobUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_CronJobUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepCronJobUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepCronJobUpdated(log types.Log) (*EventsMockCronUpkeepCronJobUpdated, error) {
	event := new(EventsMockCronUpkeepCronJobUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_CronJobUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepOwnershipTransferRequestedIterator struct {
	Event *EventsMockCronUpkeepOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "CronUpkeep_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepOwnershipTransferRequested(log types.Log) (*EventsMockCronUpkeepOwnershipTransferRequested, error) {
	event := new(EventsMockCronUpkeepOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepOwnershipTransferredIterator struct {
	Event *EventsMockCronUpkeepOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepOwnershipTransferredIterator{contract: _EventsMock.contract, event: "CronUpkeep_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepOwnershipTransferred(log types.Log) (*EventsMockCronUpkeepOwnershipTransferred, error) {
	event := new(EventsMockCronUpkeepOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepPausedIterator struct {
	Event *EventsMockCronUpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepPaused(opts *bind.FilterOpts) (*EventsMockCronUpkeepPausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepPausedIterator{contract: _EventsMock.contract, event: "CronUpkeep_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepPaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepPaused(log types.Log) (*EventsMockCronUpkeepPaused, error) {
	event := new(EventsMockCronUpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockCronUpkeepUnpausedIterator struct {
	Event *EventsMockCronUpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockCronUpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockCronUpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockCronUpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockCronUpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockCronUpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockCronUpkeepUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterCronUpkeepUnpaused(opts *bind.FilterOpts) (*EventsMockCronUpkeepUnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "CronUpkeep_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockCronUpkeepUnpausedIterator{contract: _EventsMock.contract, event: "CronUpkeep_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchCronUpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepUnpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "CronUpkeep_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockCronUpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseCronUpkeepUnpaused(log types.Log) (*EventsMockCronUpkeepUnpaused, error) {
	event := new(EventsMockCronUpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "CronUpkeep_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockENSInterfaceNewOwnerIterator struct {
	Event *EventsMockENSInterfaceNewOwner

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockENSInterfaceNewOwnerIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockENSInterfaceNewOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockENSInterfaceNewOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockENSInterfaceNewOwnerIterator) Error() error {
	return it.fail
}

func (it *EventsMockENSInterfaceNewOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockENSInterfaceNewOwner struct {
	Node  [32]byte
	Label [32]byte
	Owner common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterENSInterfaceNewOwner(opts *bind.FilterOpts, node [][32]byte, label [][32]byte) (*EventsMockENSInterfaceNewOwnerIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ENSInterface_NewOwner", nodeRule, labelRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockENSInterfaceNewOwnerIterator{contract: _EventsMock.contract, event: "ENSInterface_NewOwner", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchENSInterfaceNewOwner(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewOwner, node [][32]byte, label [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ENSInterface_NewOwner", nodeRule, labelRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockENSInterfaceNewOwner)
				if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseENSInterfaceNewOwner(log types.Log) (*EventsMockENSInterfaceNewOwner, error) {
	event := new(EventsMockENSInterfaceNewOwner)
	if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockENSInterfaceNewResolverIterator struct {
	Event *EventsMockENSInterfaceNewResolver

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockENSInterfaceNewResolverIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockENSInterfaceNewResolver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockENSInterfaceNewResolver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockENSInterfaceNewResolverIterator) Error() error {
	return it.fail
}

func (it *EventsMockENSInterfaceNewResolverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockENSInterfaceNewResolver struct {
	Node     [32]byte
	Resolver common.Address
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterENSInterfaceNewResolver(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceNewResolverIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ENSInterface_NewResolver", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockENSInterfaceNewResolverIterator{contract: _EventsMock.contract, event: "ENSInterface_NewResolver", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchENSInterfaceNewResolver(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewResolver, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ENSInterface_NewResolver", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockENSInterfaceNewResolver)
				if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewResolver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseENSInterfaceNewResolver(log types.Log) (*EventsMockENSInterfaceNewResolver, error) {
	event := new(EventsMockENSInterfaceNewResolver)
	if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewResolver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockENSInterfaceNewTTLIterator struct {
	Event *EventsMockENSInterfaceNewTTL

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockENSInterfaceNewTTLIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockENSInterfaceNewTTL)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockENSInterfaceNewTTL)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockENSInterfaceNewTTLIterator) Error() error {
	return it.fail
}

func (it *EventsMockENSInterfaceNewTTLIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockENSInterfaceNewTTL struct {
	Node [32]byte
	Ttl  uint64
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterENSInterfaceNewTTL(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceNewTTLIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ENSInterface_NewTTL", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockENSInterfaceNewTTLIterator{contract: _EventsMock.contract, event: "ENSInterface_NewTTL", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchENSInterfaceNewTTL(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewTTL, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ENSInterface_NewTTL", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockENSInterfaceNewTTL)
				if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewTTL", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseENSInterfaceNewTTL(log types.Log) (*EventsMockENSInterfaceNewTTL, error) {
	event := new(EventsMockENSInterfaceNewTTL)
	if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_NewTTL", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockENSInterfaceTransferIterator struct {
	Event *EventsMockENSInterfaceTransfer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockENSInterfaceTransferIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockENSInterfaceTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockENSInterfaceTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockENSInterfaceTransferIterator) Error() error {
	return it.fail
}

func (it *EventsMockENSInterfaceTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockENSInterfaceTransfer struct {
	Node  [32]byte
	Owner common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterENSInterfaceTransfer(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceTransferIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ENSInterface_Transfer", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockENSInterfaceTransferIterator{contract: _EventsMock.contract, event: "ENSInterface_Transfer", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchENSInterfaceTransfer(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceTransfer, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ENSInterface_Transfer", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockENSInterfaceTransfer)
				if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseENSInterfaceTransfer(log types.Log) (*EventsMockENSInterfaceTransfer, error) {
	event := new(EventsMockENSInterfaceTransfer)
	if err := _EventsMock.contract.UnpackLog(event, "ENSInterface_Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967ProxyAdminChangedIterator struct {
	Event *EventsMockERC1967ProxyAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967ProxyAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967ProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967ProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967ProxyAdminChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967ProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967ProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967ProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockERC1967ProxyAdminChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Proxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967ProxyAdminChangedIterator{contract: _EventsMock.contract, event: "ERC1967Proxy_AdminChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967ProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Proxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967ProxyAdminChanged)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967ProxyAdminChanged(log types.Log) (*EventsMockERC1967ProxyAdminChanged, error) {
	event := new(EventsMockERC1967ProxyAdminChanged)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967ProxyBeaconUpgradedIterator struct {
	Event *EventsMockERC1967ProxyBeaconUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967ProxyBeaconUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967ProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967ProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967ProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967ProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967ProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967ProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockERC1967ProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Proxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967ProxyBeaconUpgradedIterator{contract: _EventsMock.contract, event: "ERC1967Proxy_BeaconUpgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967ProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Proxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967ProxyBeaconUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967ProxyBeaconUpgraded(log types.Log) (*EventsMockERC1967ProxyBeaconUpgraded, error) {
	event := new(EventsMockERC1967ProxyBeaconUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967ProxyUpgradedIterator struct {
	Event *EventsMockERC1967ProxyUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967ProxyUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967ProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967ProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967ProxyUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967ProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967ProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967ProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockERC1967ProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Proxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967ProxyUpgradedIterator{contract: _EventsMock.contract, event: "ERC1967Proxy_Upgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967ProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Proxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967ProxyUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967ProxyUpgraded(log types.Log) (*EventsMockERC1967ProxyUpgraded, error) {
	event := new(EventsMockERC1967ProxyUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Proxy_Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967UpgradeAdminChangedIterator struct {
	Event *EventsMockERC1967UpgradeAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967UpgradeAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967UpgradeAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967UpgradeAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967UpgradeAdminChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967UpgradeAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967UpgradeAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967UpgradeAdminChanged(opts *bind.FilterOpts) (*EventsMockERC1967UpgradeAdminChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Upgrade_AdminChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967UpgradeAdminChangedIterator{contract: _EventsMock.contract, event: "ERC1967Upgrade_AdminChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967UpgradeAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeAdminChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Upgrade_AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967UpgradeAdminChanged)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967UpgradeAdminChanged(log types.Log) (*EventsMockERC1967UpgradeAdminChanged, error) {
	event := new(EventsMockERC1967UpgradeAdminChanged)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967UpgradeBeaconUpgradedIterator struct {
	Event *EventsMockERC1967UpgradeBeaconUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967UpgradeBeaconUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967UpgradeBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967UpgradeBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967UpgradeBeaconUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967UpgradeBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967UpgradeBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967UpgradeBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockERC1967UpgradeBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Upgrade_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967UpgradeBeaconUpgradedIterator{contract: _EventsMock.contract, event: "ERC1967Upgrade_BeaconUpgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967UpgradeBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Upgrade_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967UpgradeBeaconUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967UpgradeBeaconUpgraded(log types.Log) (*EventsMockERC1967UpgradeBeaconUpgraded, error) {
	event := new(EventsMockERC1967UpgradeBeaconUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockERC1967UpgradeUpgradedIterator struct {
	Event *EventsMockERC1967UpgradeUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockERC1967UpgradeUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockERC1967UpgradeUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockERC1967UpgradeUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockERC1967UpgradeUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockERC1967UpgradeUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockERC1967UpgradeUpgraded struct {
	Implementation common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterERC1967UpgradeUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockERC1967UpgradeUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ERC1967Upgrade_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockERC1967UpgradeUpgradedIterator{contract: _EventsMock.contract, event: "ERC1967Upgrade_Upgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchERC1967UpgradeUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ERC1967Upgrade_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockERC1967UpgradeUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseERC1967UpgradeUpgraded(log types.Log) (*EventsMockERC1967UpgradeUpgraded, error) {
	event := new(EventsMockERC1967UpgradeUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "ERC1967Upgrade_Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitBillingEndIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitBillingEnd

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingEndIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitBillingEnd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitBillingEnd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingEndIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingEndIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitBillingEnd struct {
	RequestId          [32]byte
	SubscriptionId     uint64
	SignerPayment      *big.Int
	TransmitterPayment *big.Int
	TotalCost          *big.Int
	Success            bool
	Raw                types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitBillingEnd(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitBillingEndIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_BillingEnd", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitBillingEndIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_BillingEnd", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitBillingEnd(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitBillingEnd, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_BillingEnd", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitBillingEnd)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_BillingEnd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitBillingEnd(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitBillingEnd, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitBillingEnd)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_BillingEnd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitBillingStartIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitBillingStart

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingStartIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitBillingStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitBillingStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingStartIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitBillingStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitBillingStart struct {
	RequestId  [32]byte
	Commitment EventsMockFunctionsBillingRegistryWithInitCommitment
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitBillingStart(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitBillingStartIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_BillingStart", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitBillingStartIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_BillingStart", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitBillingStart(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitBillingStart, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_BillingStart", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitBillingStart)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_BillingStart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitBillingStart(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitBillingStart, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitBillingStart)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_BillingStart", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitConfigSetIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitConfigSet struct {
	MaxGasLimit                uint32
	StalenessSeconds           uint32
	GasAfterPaymentCalculation *big.Int
	FallbackWeiPerUnitLink     *big.Int
	GasOverhead                uint32
	Raw                        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitConfigSetIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitConfigSet(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitConfigSet, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitFundsRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitFundsRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitFundsRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitFundsRecovered struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_FundsRecovered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitFundsRecovered) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitFundsRecovered)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_FundsRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitFundsRecovered(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitFundsRecovered, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitFundsRecovered)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_FundsRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitInitializedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitInitializedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitInitialized(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitInitialized, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitOwnershipTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitPausedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitPaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitPausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitPausedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitPaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitPaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitPaused)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitPaused(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitPaused, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitPaused)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitRequestTimedOut

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitRequestTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitRequestTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitRequestTimedOut struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_RequestTimedOut", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_RequestTimedOut", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitRequestTimedOut, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_RequestTimedOut", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitRequestTimedOut)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_RequestTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitRequestTimedOut(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitRequestTimedOut, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitRequestTimedOut)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_RequestTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled struct {
	SubscriptionId uint64
	To             common.Address
	Amount         *big.Int
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionCanceled", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionCanceled", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionCanceled(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded struct {
	SubscriptionId uint64
	Consumer       common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved struct {
	SubscriptionId uint64
	Consumer       common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated struct {
	SubscriptionId uint64
	Owner          common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionCreated", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionCreated", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionCreated(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded struct {
	SubscriptionId uint64
	OldBalance     *big.Int
	NewBalance     *big.Int
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionFunded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionFunded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionFunded(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested struct {
	SubscriptionId uint64
	From           common.Address
	To             common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred struct {
	SubscriptionId uint64
	From           common.Address
	To             common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryWithInitUnpausedIterator struct {
	Event *EventsMockFunctionsBillingRegistryWithInitUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryWithInitUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryWithInitUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryWithInitUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryWithInitUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryWithInitUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryWithInitUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryWithInitUnpaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitUnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistryWithInit_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryWithInitUnpausedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistryWithInit_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryWithInitUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitUnpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistryWithInit_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryWithInitUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryWithInitUnpaused(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitUnpaused, error) {
	event := new(EventsMockFunctionsBillingRegistryWithInitUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistryWithInit_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator struct {
	Event *EventsMockFunctionsBillingRegistryAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsBillingRegistryAuthorizedSendersChanged, error) {
	event := new(EventsMockFunctionsBillingRegistryAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryBillingEndIterator struct {
	Event *EventsMockFunctionsBillingRegistryBillingEnd

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryBillingEndIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryBillingEnd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryBillingEnd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryBillingEndIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryBillingEndIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryBillingEnd struct {
	RequestId          [32]byte
	SubscriptionId     uint64
	SignerPayment      *big.Int
	TransmitterPayment *big.Int
	TotalCost          *big.Int
	Success            bool
	Raw                types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryBillingEnd(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryBillingEndIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_BillingEnd", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryBillingEndIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_BillingEnd", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryBillingEnd(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryBillingEnd, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_BillingEnd", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryBillingEnd)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_BillingEnd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryBillingEnd(log types.Log) (*EventsMockFunctionsBillingRegistryBillingEnd, error) {
	event := new(EventsMockFunctionsBillingRegistryBillingEnd)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_BillingEnd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryBillingStartIterator struct {
	Event *EventsMockFunctionsBillingRegistryBillingStart

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryBillingStartIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryBillingStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryBillingStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryBillingStartIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryBillingStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryBillingStart struct {
	RequestId  [32]byte
	Commitment EventsMockFunctionsBillingRegistryCommitment
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryBillingStart(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryBillingStartIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_BillingStart", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryBillingStartIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_BillingStart", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryBillingStart(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryBillingStart, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_BillingStart", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryBillingStart)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_BillingStart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryBillingStart(log types.Log) (*EventsMockFunctionsBillingRegistryBillingStart, error) {
	event := new(EventsMockFunctionsBillingRegistryBillingStart)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_BillingStart", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryConfigSetIterator struct {
	Event *EventsMockFunctionsBillingRegistryConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryConfigSet struct {
	MaxGasLimit                uint32
	StalenessSeconds           uint32
	GasAfterPaymentCalculation *big.Int
	FallbackWeiPerUnitLink     *big.Int
	GasOverhead                uint32
	Raw                        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryConfigSetIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryConfigSet(log types.Log) (*EventsMockFunctionsBillingRegistryConfigSet, error) {
	event := new(EventsMockFunctionsBillingRegistryConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryFundsRecoveredIterator struct {
	Event *EventsMockFunctionsBillingRegistryFundsRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryFundsRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryFundsRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryFundsRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryFundsRecoveredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryFundsRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryFundsRecovered struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryFundsRecovered(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryFundsRecoveredIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryFundsRecoveredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_FundsRecovered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryFundsRecovered) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryFundsRecovered)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_FundsRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryFundsRecovered(log types.Log) (*EventsMockFunctionsBillingRegistryFundsRecovered, error) {
	event := new(EventsMockFunctionsBillingRegistryFundsRecovered)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_FundsRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryInitializedIterator struct {
	Event *EventsMockFunctionsBillingRegistryInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryInitializedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryInitialized(log types.Log) (*EventsMockFunctionsBillingRegistryInitialized, error) {
	event := new(EventsMockFunctionsBillingRegistryInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator struct {
	Event *EventsMockFunctionsBillingRegistryOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryOwnershipTransferRequested, error) {
	event := new(EventsMockFunctionsBillingRegistryOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryOwnershipTransferredIterator struct {
	Event *EventsMockFunctionsBillingRegistryOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryOwnershipTransferredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryOwnershipTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryOwnershipTransferred, error) {
	event := new(EventsMockFunctionsBillingRegistryOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryPausedIterator struct {
	Event *EventsMockFunctionsBillingRegistryPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryPaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryPausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryPausedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryPaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryPaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryPaused)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryPaused(log types.Log) (*EventsMockFunctionsBillingRegistryPaused, error) {
	event := new(EventsMockFunctionsBillingRegistryPaused)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryRequestTimedOutIterator struct {
	Event *EventsMockFunctionsBillingRegistryRequestTimedOut

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryRequestTimedOutIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryRequestTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryRequestTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryRequestTimedOutIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryRequestTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryRequestTimedOut struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryRequestTimedOut(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryRequestTimedOutIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_RequestTimedOut", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryRequestTimedOutIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_RequestTimedOut", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryRequestTimedOut(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryRequestTimedOut, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_RequestTimedOut", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryRequestTimedOut)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_RequestTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryRequestTimedOut(log types.Log) (*EventsMockFunctionsBillingRegistryRequestTimedOut, error) {
	event := new(EventsMockFunctionsBillingRegistryRequestTimedOut)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_RequestTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionCanceled struct {
	SubscriptionId uint64
	To             common.Address
	Amount         *big.Int
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionCanceled(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionCanceled", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionCanceled, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionCanceled", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionCanceled(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionCanceled, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded struct {
	SubscriptionId uint64
	Consumer       common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionConsumerAdded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionConsumerAdded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionConsumerAdded(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved struct {
	SubscriptionId uint64
	Consumer       common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionConsumerRemoved", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionConsumerRemoved", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionConsumerRemoved(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionCreated struct {
	SubscriptionId uint64
	Owner          common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionCreated(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionCreated", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionCreated, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionCreated", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionCreated)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionCreated(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionCreated, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionCreated)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionFundedIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionFunded struct {
	SubscriptionId uint64
	OldBalance     *big.Int
	NewBalance     *big.Int
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionFunded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionFundedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionFunded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionFundedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionFunded, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionFunded", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionFunded)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionFunded(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionFunded, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionFunded)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested struct {
	SubscriptionId uint64
	From           common.Address
	To             common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionOwnerTransferRequested", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionOwnerTransferRequested", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionOwnerTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator struct {
	Event *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred struct {
	SubscriptionId uint64
	From           common.Address
	To             common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_SubscriptionOwnerTransferred", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred, subscriptionId []uint64) (event.Subscription, error) {

	var subscriptionIdRule []interface{}
	for _, subscriptionIdItem := range subscriptionId {
		subscriptionIdRule = append(subscriptionIdRule, subscriptionIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_SubscriptionOwnerTransferred", subscriptionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistrySubscriptionOwnerTransferred(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred, error) {
	event := new(EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsBillingRegistryUnpausedIterator struct {
	Event *EventsMockFunctionsBillingRegistryUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsBillingRegistryUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsBillingRegistryUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsBillingRegistryUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsBillingRegistryUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsBillingRegistryUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsBillingRegistryUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsBillingRegistryUnpaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryUnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsBillingRegistry_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsBillingRegistryUnpausedIterator{contract: _EventsMock.contract, event: "FunctionsBillingRegistry_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsBillingRegistryUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryUnpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsBillingRegistry_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsBillingRegistryUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsBillingRegistryUnpaused(log types.Log) (*EventsMockFunctionsBillingRegistryUnpaused, error) {
	event := new(EventsMockFunctionsBillingRegistryUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsBillingRegistry_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator struct {
	Event *EventsMockFunctionsClientExampleOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientExampleOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientExampleOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientExampleOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientExampleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClientExample_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsClientExample_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientExampleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClientExample_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientExampleOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientExampleOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsClientExampleOwnershipTransferRequested, error) {
	event := new(EventsMockFunctionsClientExampleOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientExampleOwnershipTransferredIterator struct {
	Event *EventsMockFunctionsClientExampleOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientExampleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientExampleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientExampleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientExampleOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientExampleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsClientExampleOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClientExample_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientExampleOwnershipTransferredIterator{contract: _EventsMock.contract, event: "FunctionsClientExample_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientExampleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClientExample_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientExampleOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientExampleOwnershipTransferred(log types.Log) (*EventsMockFunctionsClientExampleOwnershipTransferred, error) {
	event := new(EventsMockFunctionsClientExampleOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientExampleRequestFulfilledIterator struct {
	Event *EventsMockFunctionsClientExampleRequestFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientExampleRequestFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientExampleRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientExampleRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientExampleRequestFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientExampleRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientExampleRequestFulfilled struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientExampleRequestFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientExampleRequestFulfilledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClientExample_RequestFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientExampleRequestFulfilledIterator{contract: _EventsMock.contract, event: "FunctionsClientExample_RequestFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientExampleRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleRequestFulfilled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClientExample_RequestFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientExampleRequestFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_RequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientExampleRequestFulfilled(log types.Log) (*EventsMockFunctionsClientExampleRequestFulfilled, error) {
	event := new(EventsMockFunctionsClientExampleRequestFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_RequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientExampleRequestSentIterator struct {
	Event *EventsMockFunctionsClientExampleRequestSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientExampleRequestSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientExampleRequestSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientExampleRequestSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientExampleRequestSentIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientExampleRequestSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientExampleRequestSent struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientExampleRequestSent(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientExampleRequestSentIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClientExample_RequestSent", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientExampleRequestSentIterator{contract: _EventsMock.contract, event: "FunctionsClientExample_RequestSent", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientExampleRequestSent(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleRequestSent, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClientExample_RequestSent", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientExampleRequestSent)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_RequestSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientExampleRequestSent(log types.Log) (*EventsMockFunctionsClientExampleRequestSent, error) {
	event := new(EventsMockFunctionsClientExampleRequestSent)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClientExample_RequestSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientRequestFulfilledIterator struct {
	Event *EventsMockFunctionsClientRequestFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientRequestFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientRequestFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientRequestFulfilled struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientRequestFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientRequestFulfilledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClient_RequestFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientRequestFulfilledIterator{contract: _EventsMock.contract, event: "FunctionsClient_RequestFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientRequestFulfilled, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClient_RequestFulfilled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientRequestFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClient_RequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientRequestFulfilled(log types.Log) (*EventsMockFunctionsClientRequestFulfilled, error) {
	event := new(EventsMockFunctionsClientRequestFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClient_RequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsClientRequestSentIterator struct {
	Event *EventsMockFunctionsClientRequestSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsClientRequestSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsClientRequestSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsClientRequestSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsClientRequestSentIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsClientRequestSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsClientRequestSent struct {
	Id  [32]byte
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsClientRequestSent(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientRequestSentIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsClient_RequestSent", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsClientRequestSentIterator{contract: _EventsMock.contract, event: "FunctionsClient_RequestSent", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsClientRequestSent(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientRequestSent, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsClient_RequestSent", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsClientRequestSent)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsClient_RequestSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsClientRequestSent(log types.Log) (*EventsMockFunctionsClientRequestSent, error) {
	event := new(EventsMockFunctionsClientRequestSent)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsClient_RequestSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator struct {
	Event *EventsMockFunctionsOracleWithInitAuthorizedSendersActive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersActive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_AuthorizedSendersActive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersActive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersActive)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitAuthorizedSendersActive(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersActive, error) {
	event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersActive)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersActive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator struct {
	Event *EventsMockFunctionsOracleWithInitAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersChanged, error) {
	event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator struct {
	Event *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_AuthorizedSendersDeactive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersDeactive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitAuthorizedSendersDeactive(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive, error) {
	event := new(EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_AuthorizedSendersDeactive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitConfigSetIterator struct {
	Event *EventsMockFunctionsOracleWithInitConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitConfigSetIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitConfigSet(log types.Log) (*EventsMockFunctionsOracleWithInitConfigSet, error) {
	event := new(EventsMockFunctionsOracleWithInitConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitInitializedIterator struct {
	Event *EventsMockFunctionsOracleWithInitInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitInitializedIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitInitialized(log types.Log) (*EventsMockFunctionsOracleWithInitInitialized, error) {
	event := new(EventsMockFunctionsOracleWithInitInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitInvalidRequestIDIterator struct {
	Event *EventsMockFunctionsOracleWithInitInvalidRequestID

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitInvalidRequestIDIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitInvalidRequestID)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitInvalidRequestID)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitInvalidRequestIDIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitInvalidRequestIDIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitInvalidRequestID struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitInvalidRequestID(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitInvalidRequestIDIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_InvalidRequestID", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitInvalidRequestIDIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_InvalidRequestID", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitInvalidRequestID(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitInvalidRequestID, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_InvalidRequestID", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitInvalidRequestID)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_InvalidRequestID", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitInvalidRequestID(log types.Log) (*EventsMockFunctionsOracleWithInitInvalidRequestID, error) {
	event := new(EventsMockFunctionsOracleWithInitInvalidRequestID)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_InvalidRequestID", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitOracleRequestIterator struct {
	Event *EventsMockFunctionsOracleWithInitOracleRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitOracleRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitOracleRequestIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitOracleRequest struct {
	RequestId          [32]byte
	RequestingContract common.Address
	RequestInitiator   common.Address
	SubscriptionId     uint64
	SubscriptionOwner  common.Address
	Data               []byte
	Raw                types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitOracleRequest(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitOracleRequestIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_OracleRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitOracleRequestIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_OracleRequest", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitOracleRequest(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOracleRequest, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_OracleRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitOracleRequest)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitOracleRequest(log types.Log) (*EventsMockFunctionsOracleWithInitOracleRequest, error) {
	event := new(EventsMockFunctionsOracleWithInitOracleRequest)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitOracleResponseIterator struct {
	Event *EventsMockFunctionsOracleWithInitOracleResponse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitOracleResponseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitOracleResponse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitOracleResponse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitOracleResponseIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitOracleResponseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitOracleResponse struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitOracleResponse(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitOracleResponseIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_OracleResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitOracleResponseIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_OracleResponse", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitOracleResponse(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOracleResponse, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_OracleResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitOracleResponse)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OracleResponse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitOracleResponse(log types.Log) (*EventsMockFunctionsOracleWithInitOracleResponse, error) {
	event := new(EventsMockFunctionsOracleWithInitOracleResponse)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OracleResponse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator struct {
	Event *EventsMockFunctionsOracleWithInitOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsOracleWithInitOwnershipTransferRequested, error) {
	event := new(EventsMockFunctionsOracleWithInitOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitOwnershipTransferredIterator struct {
	Event *EventsMockFunctionsOracleWithInitOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleWithInitOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitOwnershipTransferredIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitOwnershipTransferred(log types.Log) (*EventsMockFunctionsOracleWithInitOwnershipTransferred, error) {
	event := new(EventsMockFunctionsOracleWithInitOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitTransmittedIterator struct {
	Event *EventsMockFunctionsOracleWithInitTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitTransmittedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitTransmitted(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitTransmittedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_Transmitted")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitTransmittedIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_Transmitted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitTransmitted) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitTransmitted)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitTransmitted(log types.Log) (*EventsMockFunctionsOracleWithInitTransmitted, error) {
	event := new(EventsMockFunctionsOracleWithInitTransmitted)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitUserCallbackErrorIterator struct {
	Event *EventsMockFunctionsOracleWithInitUserCallbackError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitUserCallbackError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitUserCallbackError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackErrorIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitUserCallbackError struct {
	RequestId [32]byte
	Reason    string
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitUserCallbackErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitUserCallbackErrorIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_UserCallbackError", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitUserCallbackError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitUserCallbackError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitUserCallbackError)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_UserCallbackError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitUserCallbackError(log types.Log) (*EventsMockFunctionsOracleWithInitUserCallbackError, error) {
	event := new(EventsMockFunctionsOracleWithInitUserCallbackError)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_UserCallbackError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator struct {
	Event *EventsMockFunctionsOracleWithInitUserCallbackRawError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleWithInitUserCallbackRawError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleWithInitUserCallbackRawError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleWithInitUserCallbackRawError struct {
	RequestId    [32]byte
	LowLevelData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleWithInitUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracleWithInit_UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator{contract: _EventsMock.contract, event: "FunctionsOracleWithInit_UserCallbackRawError", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleWithInitUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitUserCallbackRawError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracleWithInit_UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleWithInitUserCallbackRawError)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_UserCallbackRawError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleWithInitUserCallbackRawError(log types.Log) (*EventsMockFunctionsOracleWithInitUserCallbackRawError, error) {
	event := new(EventsMockFunctionsOracleWithInitUserCallbackRawError)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracleWithInit_UserCallbackRawError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleAuthorizedSendersActiveIterator struct {
	Event *EventsMockFunctionsOracleAuthorizedSendersActive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleAuthorizedSendersActiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleAuthorizedSendersActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleAuthorizedSendersActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleAuthorizedSendersActiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleAuthorizedSendersActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleAuthorizedSendersActive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersActiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleAuthorizedSendersActiveIterator{contract: _EventsMock.contract, event: "FunctionsOracle_AuthorizedSendersActive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersActive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleAuthorizedSendersActive)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleAuthorizedSendersActive(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersActive, error) {
	event := new(EventsMockFunctionsOracleAuthorizedSendersActive)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersActive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleAuthorizedSendersChangedIterator struct {
	Event *EventsMockFunctionsOracleAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleAuthorizedSendersChangedIterator{contract: _EventsMock.contract, event: "FunctionsOracle_AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleAuthorizedSendersChanged)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersChanged, error) {
	event := new(EventsMockFunctionsOracleAuthorizedSendersChanged)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator struct {
	Event *EventsMockFunctionsOracleAuthorizedSendersDeactive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleAuthorizedSendersDeactive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleAuthorizedSendersDeactive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleAuthorizedSendersDeactive struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator{contract: _EventsMock.contract, event: "FunctionsOracle_AuthorizedSendersDeactive", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersDeactive) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleAuthorizedSendersDeactive)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersDeactive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleAuthorizedSendersDeactive(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersDeactive, error) {
	event := new(EventsMockFunctionsOracleAuthorizedSendersDeactive)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_AuthorizedSendersDeactive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleConfigSetIterator struct {
	Event *EventsMockFunctionsOracleConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsOracleConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleConfigSetIterator{contract: _EventsMock.contract, event: "FunctionsOracle_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleConfigSet(log types.Log) (*EventsMockFunctionsOracleConfigSet, error) {
	event := new(EventsMockFunctionsOracleConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleInitializedIterator struct {
	Event *EventsMockFunctionsOracleInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsOracleInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleInitializedIterator{contract: _EventsMock.contract, event: "FunctionsOracle_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleInitialized(log types.Log) (*EventsMockFunctionsOracleInitialized, error) {
	event := new(EventsMockFunctionsOracleInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleInvalidRequestIDIterator struct {
	Event *EventsMockFunctionsOracleInvalidRequestID

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleInvalidRequestIDIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleInvalidRequestID)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleInvalidRequestID)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleInvalidRequestIDIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleInvalidRequestIDIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleInvalidRequestID struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleInvalidRequestID(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleInvalidRequestIDIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_InvalidRequestID", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleInvalidRequestIDIterator{contract: _EventsMock.contract, event: "FunctionsOracle_InvalidRequestID", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleInvalidRequestID(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleInvalidRequestID, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_InvalidRequestID", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleInvalidRequestID)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_InvalidRequestID", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleInvalidRequestID(log types.Log) (*EventsMockFunctionsOracleInvalidRequestID, error) {
	event := new(EventsMockFunctionsOracleInvalidRequestID)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_InvalidRequestID", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleOracleRequestIterator struct {
	Event *EventsMockFunctionsOracleOracleRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleOracleRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleOracleRequestIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleOracleRequest struct {
	RequestId          [32]byte
	RequestingContract common.Address
	RequestInitiator   common.Address
	SubscriptionId     uint64
	SubscriptionOwner  common.Address
	Data               []byte
	Raw                types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleOracleRequest(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleOracleRequestIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_OracleRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleOracleRequestIterator{contract: _EventsMock.contract, event: "FunctionsOracle_OracleRequest", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleOracleRequest(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOracleRequest, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_OracleRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleOracleRequest)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleOracleRequest(log types.Log) (*EventsMockFunctionsOracleOracleRequest, error) {
	event := new(EventsMockFunctionsOracleOracleRequest)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleOracleResponseIterator struct {
	Event *EventsMockFunctionsOracleOracleResponse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleOracleResponseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleOracleResponse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleOracleResponse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleOracleResponseIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleOracleResponseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleOracleResponse struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleOracleResponse(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleOracleResponseIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_OracleResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleOracleResponseIterator{contract: _EventsMock.contract, event: "FunctionsOracle_OracleResponse", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleOracleResponse(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOracleResponse, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_OracleResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleOracleResponse)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OracleResponse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleOracleResponse(log types.Log) (*EventsMockFunctionsOracleOracleResponse, error) {
	event := new(EventsMockFunctionsOracleOracleResponse)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OracleResponse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleOwnershipTransferRequestedIterator struct {
	Event *EventsMockFunctionsOracleOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "FunctionsOracle_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsOracleOwnershipTransferRequested, error) {
	event := new(EventsMockFunctionsOracleOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleOwnershipTransferredIterator struct {
	Event *EventsMockFunctionsOracleOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleOwnershipTransferredIterator{contract: _EventsMock.contract, event: "FunctionsOracle_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleOwnershipTransferred(log types.Log) (*EventsMockFunctionsOracleOwnershipTransferred, error) {
	event := new(EventsMockFunctionsOracleOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleTransmittedIterator struct {
	Event *EventsMockFunctionsOracleTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleTransmittedIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleTransmitted(opts *bind.FilterOpts) (*EventsMockFunctionsOracleTransmittedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_Transmitted")
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleTransmittedIterator{contract: _EventsMock.contract, event: "FunctionsOracle_Transmitted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleTransmitted) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleTransmitted)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleTransmitted(log types.Log) (*EventsMockFunctionsOracleTransmitted, error) {
	event := new(EventsMockFunctionsOracleTransmitted)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleUserCallbackErrorIterator struct {
	Event *EventsMockFunctionsOracleUserCallbackError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleUserCallbackErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleUserCallbackError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleUserCallbackError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleUserCallbackErrorIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleUserCallbackErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleUserCallbackError struct {
	RequestId [32]byte
	Reason    string
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleUserCallbackErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleUserCallbackErrorIterator{contract: _EventsMock.contract, event: "FunctionsOracle_UserCallbackError", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleUserCallbackError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleUserCallbackError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleUserCallbackError)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_UserCallbackError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleUserCallbackError(log types.Log) (*EventsMockFunctionsOracleUserCallbackError, error) {
	event := new(EventsMockFunctionsOracleUserCallbackError)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_UserCallbackError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockFunctionsOracleUserCallbackRawErrorIterator struct {
	Event *EventsMockFunctionsOracleUserCallbackRawError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockFunctionsOracleUserCallbackRawErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockFunctionsOracleUserCallbackRawError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockFunctionsOracleUserCallbackRawError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockFunctionsOracleUserCallbackRawErrorIterator) Error() error {
	return it.fail
}

func (it *EventsMockFunctionsOracleUserCallbackRawErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockFunctionsOracleUserCallbackRawError struct {
	RequestId    [32]byte
	LowLevelData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterFunctionsOracleUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleUserCallbackRawErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "FunctionsOracle_UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockFunctionsOracleUserCallbackRawErrorIterator{contract: _EventsMock.contract, event: "FunctionsOracle_UserCallbackRawError", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchFunctionsOracleUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleUserCallbackRawError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "FunctionsOracle_UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockFunctionsOracleUserCallbackRawError)
				if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_UserCallbackRawError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseFunctionsOracleUserCallbackRawError(log types.Log) (*EventsMockFunctionsOracleUserCallbackRawError, error) {
	event := new(EventsMockFunctionsOracleUserCallbackRawError)
	if err := _EventsMock.contract.UnpackLog(event, "FunctionsOracle_UserCallbackRawError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockInitializableInitializedIterator struct {
	Event *EventsMockInitializableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockInitializableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockInitializableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockInitializableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockInitializableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockInitializableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockInitializableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterInitializableInitialized(opts *bind.FilterOpts) (*EventsMockInitializableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Initializable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockInitializableInitializedIterator{contract: _EventsMock.contract, event: "Initializable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchInitializableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockInitializableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Initializable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockInitializableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "Initializable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseInitializableInitialized(log types.Log) (*EventsMockInitializableInitialized, error) {
	event := new(EventsMockInitializableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "Initializable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator struct {
	Event *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet struct {
	SenderAddress common.Address
	Allowed       bool
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.FilterOpts, senderAddress []common.Address) (*EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator, error) {

	var senderAddressRule []interface{}
	for _, senderAddressItem := range senderAddress {
		senderAddressRule = append(senderAddressRule, senderAddressItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_AutoApproveAllowedSenderSet", senderAddressRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_AutoApproveAllowedSenderSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet, senderAddress []common.Address) (event.Subscription, error) {

	var senderAddressRule []interface{}
	for _, senderAddressItem := range senderAddress {
		senderAddressRule = append(senderAddressRule, senderAddressItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_AutoApproveAllowedSenderSet", senderAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_AutoApproveAllowedSenderSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20AutoApproveAllowedSenderSet(log types.Log) (*EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet, error) {
	event := new(EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_AutoApproveAllowedSenderSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20ConfigChangedIterator struct {
	Event *EventsMockKeeperRegistrar20ConfigChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20ConfigChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20ConfigChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20ConfigChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20ConfigChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20ConfigChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20ConfigChanged struct {
	AutoApproveConfigType uint8
	AutoApproveMaxAllowed uint32
	KeeperRegistry        common.Address
	MinLINKJuels          *big.Int
	Raw                   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20ConfigChanged(opts *bind.FilterOpts) (*EventsMockKeeperRegistrar20ConfigChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_ConfigChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20ConfigChangedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_ConfigChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20ConfigChanged(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20ConfigChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_ConfigChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20ConfigChanged)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_ConfigChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20ConfigChanged(log types.Log) (*EventsMockKeeperRegistrar20ConfigChanged, error) {
	event := new(EventsMockKeeperRegistrar20ConfigChanged)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_ConfigChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistrar20OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistrar20OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistrar20OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistrar20OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrar20OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistrar20OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistrar20OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20RegistrationApprovedIterator struct {
	Event *EventsMockKeeperRegistrar20RegistrationApproved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20RegistrationApprovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20RegistrationApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20RegistrationApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20RegistrationApprovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20RegistrationApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20RegistrationApproved struct {
	Hash        [32]byte
	DisplayName string
	UpkeepId    *big.Int
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20RegistrationApproved(opts *bind.FilterOpts, hash [][32]byte, upkeepId []*big.Int) (*EventsMockKeeperRegistrar20RegistrationApprovedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepIdRule []interface{}
	for _, upkeepIdItem := range upkeepId {
		upkeepIdRule = append(upkeepIdRule, upkeepIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_RegistrationApproved", hashRule, upkeepIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20RegistrationApprovedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_RegistrationApproved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20RegistrationApproved(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationApproved, hash [][32]byte, upkeepId []*big.Int) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepIdRule []interface{}
	for _, upkeepIdItem := range upkeepId {
		upkeepIdRule = append(upkeepIdRule, upkeepIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_RegistrationApproved", hashRule, upkeepIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20RegistrationApproved)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20RegistrationApproved(log types.Log) (*EventsMockKeeperRegistrar20RegistrationApproved, error) {
	event := new(EventsMockKeeperRegistrar20RegistrationApproved)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20RegistrationRejectedIterator struct {
	Event *EventsMockKeeperRegistrar20RegistrationRejected

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20RegistrationRejectedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20RegistrationRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20RegistrationRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20RegistrationRejectedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20RegistrationRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20RegistrationRejected struct {
	Hash [32]byte
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20RegistrationRejected(opts *bind.FilterOpts, hash [][32]byte) (*EventsMockKeeperRegistrar20RegistrationRejectedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_RegistrationRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20RegistrationRejectedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_RegistrationRejected", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20RegistrationRejected(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationRejected, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_RegistrationRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20RegistrationRejected)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20RegistrationRejected(log types.Log) (*EventsMockKeeperRegistrar20RegistrationRejected, error) {
	event := new(EventsMockKeeperRegistrar20RegistrationRejected)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrar20RegistrationRequestedIterator struct {
	Event *EventsMockKeeperRegistrar20RegistrationRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrar20RegistrationRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrar20RegistrationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrar20RegistrationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrar20RegistrationRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrar20RegistrationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrar20RegistrationRequested struct {
	Hash           [32]byte
	Name           string
	EncryptedEmail []byte
	UpkeepContract common.Address
	GasLimit       uint32
	AdminAddress   common.Address
	CheckData      []byte
	Amount         *big.Int
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrar20RegistrationRequested(opts *bind.FilterOpts, hash [][32]byte, upkeepContract []common.Address) (*EventsMockKeeperRegistrar20RegistrationRequestedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepContractRule []interface{}
	for _, upkeepContractItem := range upkeepContract {
		upkeepContractRule = append(upkeepContractRule, upkeepContractItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar2_0_RegistrationRequested", hashRule, upkeepContractRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrar20RegistrationRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar2_0_RegistrationRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrar20RegistrationRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationRequested, hash [][32]byte, upkeepContract []common.Address) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepContractRule []interface{}
	for _, upkeepContractItem := range upkeepContract {
		upkeepContractRule = append(upkeepContractRule, upkeepContractItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar2_0_RegistrationRequested", hashRule, upkeepContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrar20RegistrationRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrar20RegistrationRequested(log types.Log) (*EventsMockKeeperRegistrar20RegistrationRequested, error) {
	event := new(EventsMockKeeperRegistrar20RegistrationRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar2_0_RegistrationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator struct {
	Event *EventsMockKeeperRegistrarAutoApproveAllowedSenderSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarAutoApproveAllowedSenderSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarAutoApproveAllowedSenderSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarAutoApproveAllowedSenderSet struct {
	SenderAddress common.Address
	Allowed       bool
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.FilterOpts, senderAddress []common.Address) (*EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator, error) {

	var senderAddressRule []interface{}
	for _, senderAddressItem := range senderAddress {
		senderAddressRule = append(senderAddressRule, senderAddressItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_AutoApproveAllowedSenderSet", senderAddressRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_AutoApproveAllowedSenderSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarAutoApproveAllowedSenderSet, senderAddress []common.Address) (event.Subscription, error) {

	var senderAddressRule []interface{}
	for _, senderAddressItem := range senderAddress {
		senderAddressRule = append(senderAddressRule, senderAddressItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_AutoApproveAllowedSenderSet", senderAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarAutoApproveAllowedSenderSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_AutoApproveAllowedSenderSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarAutoApproveAllowedSenderSet(log types.Log) (*EventsMockKeeperRegistrarAutoApproveAllowedSenderSet, error) {
	event := new(EventsMockKeeperRegistrarAutoApproveAllowedSenderSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_AutoApproveAllowedSenderSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarConfigChangedIterator struct {
	Event *EventsMockKeeperRegistrarConfigChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarConfigChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarConfigChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarConfigChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarConfigChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarConfigChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarConfigChanged struct {
	AutoApproveConfigType uint8
	AutoApproveMaxAllowed uint32
	KeeperRegistry        common.Address
	MinLINKJuels          *big.Int
	Raw                   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarConfigChanged(opts *bind.FilterOpts) (*EventsMockKeeperRegistrarConfigChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_ConfigChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarConfigChangedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_ConfigChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarConfigChanged(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarConfigChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_ConfigChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarConfigChanged)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_ConfigChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarConfigChanged(log types.Log) (*EventsMockKeeperRegistrarConfigChanged, error) {
	event := new(EventsMockKeeperRegistrarConfigChanged)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_ConfigChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarOwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistrarOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrarOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarOwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistrarOwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistrarOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarOwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistrarOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrarOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarOwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarOwnershipTransferred(log types.Log) (*EventsMockKeeperRegistrarOwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistrarOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarRegistrationApprovedIterator struct {
	Event *EventsMockKeeperRegistrarRegistrationApproved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarRegistrationApprovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarRegistrationApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarRegistrationApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarRegistrationApprovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarRegistrationApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarRegistrationApproved struct {
	Hash        [32]byte
	DisplayName string
	UpkeepId    *big.Int
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarRegistrationApproved(opts *bind.FilterOpts, hash [][32]byte, upkeepId []*big.Int) (*EventsMockKeeperRegistrarRegistrationApprovedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepIdRule []interface{}
	for _, upkeepIdItem := range upkeepId {
		upkeepIdRule = append(upkeepIdRule, upkeepIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_RegistrationApproved", hashRule, upkeepIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarRegistrationApprovedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_RegistrationApproved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarRegistrationApproved(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationApproved, hash [][32]byte, upkeepId []*big.Int) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepIdRule []interface{}
	for _, upkeepIdItem := range upkeepId {
		upkeepIdRule = append(upkeepIdRule, upkeepIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_RegistrationApproved", hashRule, upkeepIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarRegistrationApproved)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarRegistrationApproved(log types.Log) (*EventsMockKeeperRegistrarRegistrationApproved, error) {
	event := new(EventsMockKeeperRegistrarRegistrationApproved)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarRegistrationRejectedIterator struct {
	Event *EventsMockKeeperRegistrarRegistrationRejected

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarRegistrationRejectedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarRegistrationRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarRegistrationRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarRegistrationRejectedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarRegistrationRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarRegistrationRejected struct {
	Hash [32]byte
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarRegistrationRejected(opts *bind.FilterOpts, hash [][32]byte) (*EventsMockKeeperRegistrarRegistrationRejectedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_RegistrationRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarRegistrationRejectedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_RegistrationRejected", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarRegistrationRejected(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationRejected, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_RegistrationRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarRegistrationRejected)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarRegistrationRejected(log types.Log) (*EventsMockKeeperRegistrarRegistrationRejected, error) {
	event := new(EventsMockKeeperRegistrarRegistrationRejected)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistrarRegistrationRequestedIterator struct {
	Event *EventsMockKeeperRegistrarRegistrationRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistrarRegistrationRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistrarRegistrationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistrarRegistrationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistrarRegistrationRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistrarRegistrationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistrarRegistrationRequested struct {
	Hash           [32]byte
	Name           string
	EncryptedEmail []byte
	UpkeepContract common.Address
	GasLimit       uint32
	AdminAddress   common.Address
	CheckData      []byte
	Amount         *big.Int
	Source         uint8
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistrarRegistrationRequested(opts *bind.FilterOpts, hash [][32]byte, upkeepContract []common.Address, source []uint8) (*EventsMockKeeperRegistrarRegistrationRequestedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepContractRule []interface{}
	for _, upkeepContractItem := range upkeepContract {
		upkeepContractRule = append(upkeepContractRule, upkeepContractItem)
	}

	var sourceRule []interface{}
	for _, sourceItem := range source {
		sourceRule = append(sourceRule, sourceItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistrar_RegistrationRequested", hashRule, upkeepContractRule, sourceRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistrarRegistrationRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistrar_RegistrationRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistrarRegistrationRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationRequested, hash [][32]byte, upkeepContract []common.Address, source []uint8) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	var upkeepContractRule []interface{}
	for _, upkeepContractItem := range upkeepContract {
		upkeepContractRule = append(upkeepContractRule, upkeepContractItem)
	}

	var sourceRule []interface{}
	for _, sourceItem := range source {
		sourceRule = append(sourceRule, sourceItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistrar_RegistrationRequested", hashRule, upkeepContractRule, sourceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistrarRegistrationRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistrarRegistrationRequested(log types.Log) (*EventsMockKeeperRegistrarRegistrationRequested, error) {
	event := new(EventsMockKeeperRegistrarRegistrationRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistrar_RegistrationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12ConfigSetIterator struct {
	Event *EventsMockKeeperRegistry12ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12ConfigSet struct {
	Config EventsMockKeeperRegistry12Config
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12ConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12ConfigSet(log types.Log) (*EventsMockKeeperRegistry12ConfigSet, error) {
	event := new(EventsMockKeeperRegistry12ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12FundsAddedIterator struct {
	Event *EventsMockKeeperRegistry12FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry12FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12FundsAdded(log types.Log) (*EventsMockKeeperRegistry12FundsAdded, error) {
	event := new(EventsMockKeeperRegistry12FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry12FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry12FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry12FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12KeepersUpdatedIterator struct {
	Event *EventsMockKeeperRegistry12KeepersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12KeepersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12KeepersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12KeepersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12KeepersUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12KeepersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12KeepersUpdated struct {
	Keepers []common.Address
	Payees  []common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12KeepersUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12KeepersUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_KeepersUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12KeepersUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12KeepersUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_KeepersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12KeepersUpdated(log types.Log) (*EventsMockKeeperRegistry12KeepersUpdated, error) {
	event := new(EventsMockKeeperRegistry12KeepersUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_KeepersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry12OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry12OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry12OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry12OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry12OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry12OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistry12OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry12OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistry12OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12PausedIterator struct {
	Event *EventsMockKeeperRegistry12Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12Paused(log types.Log) (*EventsMockKeeperRegistry12Paused, error) {
	event := new(EventsMockKeeperRegistry12Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry12PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12PayeeshipTransferRequested struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry12PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry12PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistry12PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12PayeeshipTransferred struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12PayeeshipTransferredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry12PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistry12PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry12PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12PaymentWithdrawn struct {
	Keeper common.Address
	Amount *big.Int
	To     common.Address
	Payee  common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry12PaymentWithdrawnIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry12PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistry12PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UnpausedIterator struct {
	Event *EventsMockKeeperRegistry12Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12Unpaused(log types.Log) (*EventsMockKeeperRegistry12Unpaused, error) {
	event := new(EventsMockKeeperRegistry12Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry12UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry12UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistry12UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry12UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistry12UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry12UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistry12UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepPerformed struct {
	Id          *big.Int
	Success     bool
	From        common.Address
	Payment     *big.Int
	PerformData []byte
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistry12UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry12UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistry12UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry12UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistry12UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry12UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistry12UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry12UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry12UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry12UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry12UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry12UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry12UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry12UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_2_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry12UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_2_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry12UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_2_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry12UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry12UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry12UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistry12UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_2_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13ConfigSetIterator struct {
	Event *EventsMockKeeperRegistry13ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13ConfigSet struct {
	Config EventsMockKeeperRegistry13Config
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13ConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13ConfigSet(log types.Log) (*EventsMockKeeperRegistry13ConfigSet, error) {
	event := new(EventsMockKeeperRegistry13ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13FundsAddedIterator struct {
	Event *EventsMockKeeperRegistry13FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry13FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13FundsAdded(log types.Log) (*EventsMockKeeperRegistry13FundsAdded, error) {
	event := new(EventsMockKeeperRegistry13FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry13FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry13FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry13FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13KeepersUpdatedIterator struct {
	Event *EventsMockKeeperRegistry13KeepersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13KeepersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13KeepersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13KeepersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13KeepersUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13KeepersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13KeepersUpdated struct {
	Keepers []common.Address
	Payees  []common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13KeepersUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13KeepersUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_KeepersUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13KeepersUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13KeepersUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_KeepersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistry13KeepersUpdated, error) {
	event := new(EventsMockKeeperRegistry13KeepersUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_KeepersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry13OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry13OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry13OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry13OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry13OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry13OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistry13OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry13OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistry13OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13PausedIterator struct {
	Event *EventsMockKeeperRegistry13Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13Paused(log types.Log) (*EventsMockKeeperRegistry13Paused, error) {
	event := new(EventsMockKeeperRegistry13Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry13PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13PayeeshipTransferRequested struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry13PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry13PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistry13PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13PayeeshipTransferred struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13PayeeshipTransferredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry13PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistry13PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry13PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13PaymentWithdrawn struct {
	Keeper common.Address
	Amount *big.Int
	To     common.Address
	Payee  common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry13PaymentWithdrawnIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry13PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistry13PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UnpausedIterator struct {
	Event *EventsMockKeeperRegistry13Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13Unpaused(log types.Log) (*EventsMockKeeperRegistry13Unpaused, error) {
	event := new(EventsMockKeeperRegistry13Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistry13UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistry13UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistry13UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistry13UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry13UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry13UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistry13UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistry13UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistry13UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry13UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistry13UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry13UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistry13UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistry13UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistry13UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepPerformed struct {
	Id          *big.Int
	Success     bool
	From        common.Address
	Payment     *big.Int
	PerformData []byte
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistry13UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry13UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistry13UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry13UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistry13UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry13UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistry13UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry13UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistry13UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry13UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry13UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry13UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry13UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry13UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry13UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry13UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry1_3_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry13UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistry13UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistry13UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry1_3_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20CancelledUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistry20CancelledUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20CancelledUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20CancelledUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20CancelledUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20CancelledUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20CancelledUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20CancelledUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20CancelledUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20CancelledUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_CancelledUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20CancelledUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_CancelledUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20CancelledUpkeepReport, error) {
	event := new(EventsMockKeeperRegistry20CancelledUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_CancelledUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20ConfigSetIterator struct {
	Event *EventsMockKeeperRegistry20ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20ConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20ConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20ConfigSet(log types.Log) (*EventsMockKeeperRegistry20ConfigSet, error) {
	event := new(EventsMockKeeperRegistry20ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20FundsAddedIterator struct {
	Event *EventsMockKeeperRegistry20FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry20FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20FundsAdded(log types.Log) (*EventsMockKeeperRegistry20FundsAdded, error) {
	event := new(EventsMockKeeperRegistry20FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry20FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry20FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry20FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistry20InsufficientFundsUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20InsufficientFundsUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20InsufficientFundsUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20InsufficientFundsUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_InsufficientFundsUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20InsufficientFundsUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_InsufficientFundsUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20InsufficientFundsUpkeepReport, error) {
	event := new(EventsMockKeeperRegistry20InsufficientFundsUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_InsufficientFundsUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry20OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry20OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistry20OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry20OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry20OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry20OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistry20OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry20OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistry20OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20PausedIterator struct {
	Event *EventsMockKeeperRegistry20Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20Paused(log types.Log) (*EventsMockKeeperRegistry20Paused, error) {
	event := new(EventsMockKeeperRegistry20Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20PayeesUpdatedIterator struct {
	Event *EventsMockKeeperRegistry20PayeesUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20PayeesUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20PayeesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20PayeesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20PayeesUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20PayeesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20PayeesUpdated struct {
	Transmitters []common.Address
	Payees       []common.Address
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20PayeesUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20PayeesUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_PayeesUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeesUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20PayeesUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistry20PayeesUpdated, error) {
	event := new(EventsMockKeeperRegistry20PayeesUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry20PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20PayeeshipTransferRequested struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry20PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistry20PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistry20PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20PayeeshipTransferred struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20PayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry20PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistry20PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistry20PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20PaymentWithdrawn struct {
	Transmitter common.Address
	Amount      *big.Int
	To          common.Address
	Payee       common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry20PaymentWithdrawnIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry20PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistry20PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20ReorgedUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistry20ReorgedUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20ReorgedUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20ReorgedUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20ReorgedUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20ReorgedUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20ReorgedUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20ReorgedUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20ReorgedUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20ReorgedUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_ReorgedUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20ReorgedUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_ReorgedUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20ReorgedUpkeepReport, error) {
	event := new(EventsMockKeeperRegistry20ReorgedUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_ReorgedUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20StaleUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistry20StaleUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20StaleUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20StaleUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20StaleUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20StaleUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20StaleUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20StaleUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20StaleUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20StaleUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_StaleUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20StaleUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20StaleUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_StaleUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20StaleUpkeepReport, error) {
	event := new(EventsMockKeeperRegistry20StaleUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_StaleUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20TransmittedIterator struct {
	Event *EventsMockKeeperRegistry20Transmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20TransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20Transmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20Transmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20TransmittedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20TransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20Transmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20Transmitted(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20TransmittedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_Transmitted")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20TransmittedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_Transmitted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20Transmitted(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Transmitted) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20Transmitted)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20Transmitted(log types.Log) (*EventsMockKeeperRegistry20Transmitted, error) {
	event := new(EventsMockKeeperRegistry20Transmitted)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UnpausedIterator struct {
	Event *EventsMockKeeperRegistry20Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20Unpaused(log types.Log) (*EventsMockKeeperRegistry20Unpaused, error) {
	event := new(EventsMockKeeperRegistry20Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistry20UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistry20UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistry20UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistry20UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry20UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry20UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistry20UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistry20UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistry20UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry20UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistry20UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry20UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistry20UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepOffchainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepOffchainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepOffchainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepOffchainConfigSet struct {
	Id             *big.Int
	OffchainConfig []byte
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepOffchainConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepOffchainConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepOffchainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistry20UpkeepOffchainConfigSet, error) {
	event := new(EventsMockKeeperRegistry20UpkeepOffchainConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepOffchainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistry20UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistry20UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepPerformed struct {
	Id               *big.Int
	Success          bool
	CheckBlockNumber uint32
	GasUsed          *big.Int
	GasOverhead      *big.Int
	TotalPayment     *big.Int
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistry20UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry20UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistry20UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry20UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistry20UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry20UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistry20UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistry20UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistry20UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistry20UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistry20UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistry20UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistry20UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistry20UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistry20UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistry20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistry2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistry20UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistry2_0_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistry20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistry2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistry20UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistry20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistry20UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistry20UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistry2_0_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13ConfigSetIterator struct {
	Event *EventsMockKeeperRegistryBase13ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13ConfigSet struct {
	Config EventsMockKeeperRegistryBase13Config
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13ConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13ConfigSet(log types.Log) (*EventsMockKeeperRegistryBase13ConfigSet, error) {
	event := new(EventsMockKeeperRegistryBase13ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13FundsAddedIterator struct {
	Event *EventsMockKeeperRegistryBase13FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryBase13FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13FundsAdded(log types.Log) (*EventsMockKeeperRegistryBase13FundsAdded, error) {
	event := new(EventsMockKeeperRegistryBase13FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase13FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase13FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13KeepersUpdatedIterator struct {
	Event *EventsMockKeeperRegistryBase13KeepersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13KeepersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13KeepersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13KeepersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13KeepersUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13KeepersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13KeepersUpdated struct {
	Keepers []common.Address
	Payees  []common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13KeepersUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13KeepersUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_KeepersUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13KeepersUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13KeepersUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_KeepersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistryBase13KeepersUpdated, error) {
	event := new(EventsMockKeeperRegistryBase13KeepersUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_KeepersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase13OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase13OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase13OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase13OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase13OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryBase13OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistryBase13OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13PausedIterator struct {
	Event *EventsMockKeeperRegistryBase13Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13Paused(log types.Log) (*EventsMockKeeperRegistryBase13Paused, error) {
	event := new(EventsMockKeeperRegistryBase13Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase13PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13PayeeshipTransferRequested struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase13PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase13PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13PayeeshipTransferred struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13PayeeshipTransferredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryBase13PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistryBase13PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase13PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13PaymentWithdrawn struct {
	Keeper common.Address
	Amount *big.Int
	To     common.Address
	Payee  common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryBase13PaymentWithdrawnIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase13PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UnpausedIterator struct {
	Event *EventsMockKeeperRegistryBase13Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13Unpaused(log types.Log) (*EventsMockKeeperRegistryBase13Unpaused, error) {
	event := new(EventsMockKeeperRegistryBase13Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryBase13UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepPerformed struct {
	Id          *big.Int
	Success     bool
	From        common.Address
	Payment     *big.Int
	PerformData []byte
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistryBase13UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase13UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistryBase13UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase13UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase13UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase13UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase13UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase13UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase13UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase13UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase1_3_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase13UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistryBase13UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase1_3_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryBase20CancelledUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20CancelledUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20CancelledUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20CancelledUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_CancelledUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20CancelledUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_CancelledUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20CancelledUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryBase20CancelledUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_CancelledUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20FundsAddedIterator struct {
	Event *EventsMockKeeperRegistryBase20FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryBase20FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20FundsAdded(log types.Log) (*EventsMockKeeperRegistryBase20FundsAdded, error) {
	event := new(EventsMockKeeperRegistryBase20FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase20FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase20FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_InsufficientFundsUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_InsufficientFundsUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_InsufficientFundsUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase20OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase20OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase20OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase20OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase20OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryBase20OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistryBase20OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20PausedIterator struct {
	Event *EventsMockKeeperRegistryBase20Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20Paused(log types.Log) (*EventsMockKeeperRegistryBase20Paused, error) {
	event := new(EventsMockKeeperRegistryBase20Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20PayeesUpdatedIterator struct {
	Event *EventsMockKeeperRegistryBase20PayeesUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20PayeesUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20PayeesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20PayeesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20PayeesUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20PayeesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20PayeesUpdated struct {
	Transmitters []common.Address
	Payees       []common.Address
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20PayeesUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20PayeesUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_PayeesUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeesUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20PayeesUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistryBase20PayeesUpdated, error) {
	event := new(EventsMockKeeperRegistryBase20PayeesUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase20PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20PayeeshipTransferRequested struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase20PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase20PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20PayeeshipTransferred struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20PayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryBase20PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistryBase20PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryBase20PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20PaymentWithdrawn struct {
	Transmitter common.Address
	Amount      *big.Int
	To          common.Address
	Payee       common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryBase20PaymentWithdrawnIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistryBase20PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryBase20ReorgedUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20ReorgedUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20ReorgedUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20ReorgedUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_ReorgedUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20ReorgedUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_ReorgedUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20ReorgedUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryBase20ReorgedUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_ReorgedUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20StaleUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryBase20StaleUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20StaleUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20StaleUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20StaleUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20StaleUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20StaleUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20StaleUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20StaleUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20StaleUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_StaleUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20StaleUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20StaleUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_StaleUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20StaleUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryBase20StaleUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_StaleUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UnpausedIterator struct {
	Event *EventsMockKeeperRegistryBase20Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20Unpaused(log types.Log) (*EventsMockKeeperRegistryBase20Unpaused, error) {
	event := new(EventsMockKeeperRegistryBase20Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryBase20UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet struct {
	Id             *big.Int
	OffchainConfig []byte
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepOffchainConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepOffchainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepOffchainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepPerformed struct {
	Id               *big.Int
	Success          bool
	CheckBlockNumber uint32
	GasUsed          *big.Int
	GasOverhead      *big.Int
	TotalPayment     *big.Int
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistryBase20UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryBase20UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistryBase20UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryBase20UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryBase20UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryBase20UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryBase20UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryBase20UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryBase20UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryBase20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryBase2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryBase20UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryBase2_0_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryBase20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryBase2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryBase20UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryBase20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistryBase20UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryBase2_0_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryCheckUpkeepGasUsageWrapper1_2_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13ConfigSetIterator struct {
	Event *EventsMockKeeperRegistryLogic13ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13ConfigSet struct {
	Config EventsMockKeeperRegistryLogic13Config
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13ConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13ConfigSet(log types.Log) (*EventsMockKeeperRegistryLogic13ConfigSet, error) {
	event := new(EventsMockKeeperRegistryLogic13ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13FundsAddedIterator struct {
	Event *EventsMockKeeperRegistryLogic13FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryLogic13FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13FundsAdded(log types.Log) (*EventsMockKeeperRegistryLogic13FundsAdded, error) {
	event := new(EventsMockKeeperRegistryLogic13FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic13FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic13FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13KeepersUpdatedIterator struct {
	Event *EventsMockKeeperRegistryLogic13KeepersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13KeepersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13KeepersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13KeepersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13KeepersUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13KeepersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13KeepersUpdated struct {
	Keepers []common.Address
	Payees  []common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13KeepersUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13KeepersUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_KeepersUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13KeepersUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_KeepersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13KeepersUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_KeepersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistryLogic13KeepersUpdated, error) {
	event := new(EventsMockKeeperRegistryLogic13KeepersUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_KeepersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic13OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic13OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic13OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic13OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13PausedIterator struct {
	Event *EventsMockKeeperRegistryLogic13Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13Paused(log types.Log) (*EventsMockKeeperRegistryLogic13Paused, error) {
	event := new(EventsMockKeeperRegistryLogic13Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic13PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13PayeeshipTransferRequested struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_PayeeshipTransferRequested", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic13PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic13PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13PayeeshipTransferred struct {
	Keeper common.Address
	From   common.Address
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_PayeeshipTransferred", keeperRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic13PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic13PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13PaymentWithdrawn struct {
	Keeper common.Address
	Amount *big.Int
	To     common.Address
	Payee  common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var keeperRule []interface{}
	for _, keeperItem := range keeper {
		keeperRule = append(keeperRule, keeperItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_PaymentWithdrawn", keeperRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic13PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UnpausedIterator struct {
	Event *EventsMockKeeperRegistryLogic13Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13Unpaused(log types.Log) (*EventsMockKeeperRegistryLogic13Unpaused, error) {
	event := new(EventsMockKeeperRegistryLogic13Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryLogic13UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepPerformed struct {
	Id          *big.Int
	Success     bool
	From        common.Address
	Payment     *big.Int
	PerformData []byte
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepPerformed", idRule, successRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistryLogic13UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic13UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic13UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic13UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic1_3_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic1_3_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic13UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistryLogic13UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic1_3_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryLogic20CancelledUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20CancelledUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20CancelledUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20CancelledUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_CancelledUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_CancelledUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20CancelledUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_CancelledUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20CancelledUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryLogic20CancelledUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_CancelledUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20FundsAddedIterator struct {
	Event *EventsMockKeeperRegistryLogic20FundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20FundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20FundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20FundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20FundsAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20FundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20FundsAdded struct {
	Id     *big.Int
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryLogic20FundsAddedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20FundsAddedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_FundsAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_FundsAdded", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20FundsAdded)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20FundsAdded(log types.Log) (*EventsMockKeeperRegistryLogic20FundsAdded, error) {
	event := new(EventsMockKeeperRegistryLogic20FundsAdded)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20FundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic20FundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20FundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20FundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20FundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20FundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20FundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20FundsWithdrawn struct {
	Id     *big.Int
	Amount *big.Int
	To     common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20FundsWithdrawnIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20FundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_FundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20FundsWithdrawn, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_FundsWithdrawn", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20FundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20FundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic20FundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_InsufficientFundsUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn struct {
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_OwnerFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_OwnerFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnerFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnerFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic20OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20OwnershipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic20OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20OwnershipTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic20OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20OwnershipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20OwnershipTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic20OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20PausedIterator struct {
	Event *EventsMockKeeperRegistryLogic20Paused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20PausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20PausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20Paused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20PausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20PausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20Paused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20Paused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20Paused(log types.Log) (*EventsMockKeeperRegistryLogic20Paused, error) {
	event := new(EventsMockKeeperRegistryLogic20Paused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20PayeesUpdatedIterator struct {
	Event *EventsMockKeeperRegistryLogic20PayeesUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20PayeesUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20PayeesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20PayeesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20PayeesUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20PayeesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20PayeesUpdated struct {
	Transmitters []common.Address
	Payees       []common.Address
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20PayeesUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20PayeesUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_PayeesUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeesUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_PayeesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20PayeesUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistryLogic20PayeesUpdated, error) {
	event := new(EventsMockKeeperRegistryLogic20PayeesUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic20PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20PayeeshipTransferRequested struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_PayeeshipTransferRequested", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20PayeeshipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20PayeeshipTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic20PayeeshipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic20PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20PayeeshipTransferred struct {
	Transmitter common.Address
	From        common.Address
	To          common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_PayeeshipTransferred", transmitterRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20PayeeshipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20PayeeshipTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic20PayeeshipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator struct {
	Event *EventsMockKeeperRegistryLogic20PaymentWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20PaymentWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20PaymentWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20PaymentWithdrawn struct {
	Transmitter common.Address
	Amount      *big.Int
	To          common.Address
	Payee       common.Address
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_PaymentWithdrawn", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_PaymentWithdrawn", transmitterRule, amountRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20PaymentWithdrawn)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PaymentWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20PaymentWithdrawn, error) {
	event := new(EventsMockKeeperRegistryLogic20PaymentWithdrawn)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_PaymentWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryLogic20ReorgedUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20ReorgedUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20ReorgedUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20ReorgedUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_ReorgedUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_ReorgedUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20ReorgedUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_ReorgedUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20ReorgedUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryLogic20ReorgedUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_ReorgedUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator struct {
	Event *EventsMockKeeperRegistryLogic20StaleUpkeepReport

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20StaleUpkeepReport)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20StaleUpkeepReport)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20StaleUpkeepReport struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_StaleUpkeepReport", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20StaleUpkeepReport, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_StaleUpkeepReport", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20StaleUpkeepReport)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_StaleUpkeepReport", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20StaleUpkeepReport, error) {
	event := new(EventsMockKeeperRegistryLogic20StaleUpkeepReport)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_StaleUpkeepReport", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UnpausedIterator struct {
	Event *EventsMockKeeperRegistryLogic20Unpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20Unpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20UnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20Unpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20Unpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20Unpaused(log types.Log) (*EventsMockKeeperRegistryLogic20Unpaused, error) {
	event := new(EventsMockKeeperRegistryLogic20Unpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepAdminTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepAdminTransferRequested", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepAdminTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepAdminTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepAdminTransferred struct {
	Id   *big.Int
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepAdminTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepAdminTransferred", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferred, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepAdminTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepCanceledIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepCanceled struct {
	Id            *big.Int
	AtBlockHeight uint64
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryLogic20UpkeepCanceledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepCanceledIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var atBlockHeightRule []interface{}
	for _, atBlockHeightItem := range atBlockHeight {
		atBlockHeightRule = append(atBlockHeightRule, atBlockHeightItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepCanceled", idRule, atBlockHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepCanceled, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated struct {
	Id           *big.Int
	NewCheckData []byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepCheckDataUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepCheckDataUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepCheckDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepCheckDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepGasLimitSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepGasLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepGasLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepGasLimitSet struct {
	Id       *big.Int
	GasLimit *big.Int
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepGasLimitSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepGasLimitSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepGasLimitSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepGasLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepGasLimitSet, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepGasLimitSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepGasLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepMigratedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepMigrated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepMigratedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepMigratedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepMigrated struct {
	Id               *big.Int
	RemainingBalance *big.Int
	Destination      common.Address
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepMigratedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepMigratedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepMigrated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepMigrated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepMigrated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepMigrated)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepMigrated, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepMigrated)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet struct {
	Id             *big.Int
	OffchainConfig []byte
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepOffchainConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepOffchainConfigSet", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepOffchainConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepOffchainConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepPausedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepPaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepPausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepPausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepPaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepPaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepPaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepPaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepPaused, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepPaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepPerformedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepPerformed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPerformedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPerformedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepPerformed struct {
	Id               *big.Int
	Success          bool
	CheckBlockNumber uint32
	GasUsed          *big.Int
	GasOverhead      *big.Int
	TotalPayment     *big.Int
	Raw              types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistryLogic20UpkeepPerformedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepPerformedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepPerformed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var successRule []interface{}
	for _, successItem := range success {
		successRule = append(successRule, successItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepPerformed", idRule, successRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepPerformed)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepPerformed, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepPerformed)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepReceivedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepReceivedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepReceived struct {
	Id              *big.Int
	StartingBalance *big.Int
	ImportedFrom    common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepReceivedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepReceivedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepReceived", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepReceived, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepReceived", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepReceived)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepReceived, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepReceived)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepRegistered struct {
	Id         *big.Int
	ExecuteGas uint32
	Admin      common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepRegistered, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepRegistered", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepRegistered, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator struct {
	Event *EventsMockKeeperRegistryLogic20UpkeepUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockKeeperRegistryLogic20UpkeepUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockKeeperRegistryLogic20UpkeepUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockKeeperRegistryLogic20UpkeepUnpaused struct {
	Id  *big.Int
	Raw types.Log
}

func (_EventsMock *EventsMockFilterer) FilterKeeperRegistryLogic20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "KeeperRegistryLogic2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator{contract: _EventsMock.contract, event: "KeeperRegistryLogic2_0_UpkeepUnpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchKeeperRegistryLogic20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepUnpaused, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "KeeperRegistryLogic2_0_UpkeepUnpaused", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockKeeperRegistryLogic20UpkeepUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseKeeperRegistryLogic20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepUnpaused, error) {
	event := new(EventsMockKeeperRegistryLogic20UpkeepUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "KeeperRegistryLogic2_0_UpkeepUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockLogEmitterLog1Iterator struct {
	Event *EventsMockLogEmitterLog1

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockLogEmitterLog1Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockLogEmitterLog1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockLogEmitterLog1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockLogEmitterLog1Iterator) Error() error {
	return it.fail
}

func (it *EventsMockLogEmitterLog1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockLogEmitterLog1 struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterLogEmitterLog1(opts *bind.FilterOpts) (*EventsMockLogEmitterLog1Iterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "LogEmitter_Log1")
	if err != nil {
		return nil, err
	}
	return &EventsMockLogEmitterLog1Iterator{contract: _EventsMock.contract, event: "LogEmitter_Log1", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchLogEmitterLog1(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog1) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "LogEmitter_Log1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockLogEmitterLog1)
				if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseLogEmitterLog1(log types.Log) (*EventsMockLogEmitterLog1, error) {
	event := new(EventsMockLogEmitterLog1)
	if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockLogEmitterLog2Iterator struct {
	Event *EventsMockLogEmitterLog2

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockLogEmitterLog2Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockLogEmitterLog2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockLogEmitterLog2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockLogEmitterLog2Iterator) Error() error {
	return it.fail
}

func (it *EventsMockLogEmitterLog2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockLogEmitterLog2 struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterLogEmitterLog2(opts *bind.FilterOpts, param1 []*big.Int) (*EventsMockLogEmitterLog2Iterator, error) {

	var param1Rule []interface{}
	for _, param1Item := range param1 {
		param1Rule = append(param1Rule, param1Item)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "LogEmitter_Log2", param1Rule)
	if err != nil {
		return nil, err
	}
	return &EventsMockLogEmitterLog2Iterator{contract: _EventsMock.contract, event: "LogEmitter_Log2", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchLogEmitterLog2(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog2, param1 []*big.Int) (event.Subscription, error) {

	var param1Rule []interface{}
	for _, param1Item := range param1 {
		param1Rule = append(param1Rule, param1Item)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "LogEmitter_Log2", param1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockLogEmitterLog2)
				if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseLogEmitterLog2(log types.Log) (*EventsMockLogEmitterLog2, error) {
	event := new(EventsMockLogEmitterLog2)
	if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockLogEmitterLog3Iterator struct {
	Event *EventsMockLogEmitterLog3

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockLogEmitterLog3Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockLogEmitterLog3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockLogEmitterLog3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockLogEmitterLog3Iterator) Error() error {
	return it.fail
}

func (it *EventsMockLogEmitterLog3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockLogEmitterLog3 struct {
	Param1 string
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterLogEmitterLog3(opts *bind.FilterOpts) (*EventsMockLogEmitterLog3Iterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "LogEmitter_Log3")
	if err != nil {
		return nil, err
	}
	return &EventsMockLogEmitterLog3Iterator{contract: _EventsMock.contract, event: "LogEmitter_Log3", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchLogEmitterLog3(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog3) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "LogEmitter_Log3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockLogEmitterLog3)
				if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseLogEmitterLog3(log types.Log) (*EventsMockLogEmitterLog3, error) {
	event := new(EventsMockLogEmitterLog3)
	if err := _EventsMock.contract.UnpackLog(event, "LogEmitter_Log3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2AbstractConfigSetIterator struct {
	Event *EventsMockOCR2AbstractConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2AbstractConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2AbstractConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2AbstractConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2AbstractConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2AbstractConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2AbstractConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2AbstractConfigSet(opts *bind.FilterOpts) (*EventsMockOCR2AbstractConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2Abstract_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2AbstractConfigSetIterator{contract: _EventsMock.contract, event: "OCR2Abstract_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2AbstractConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2AbstractConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2Abstract_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2AbstractConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2Abstract_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2AbstractConfigSet(log types.Log) (*EventsMockOCR2AbstractConfigSet, error) {
	event := new(EventsMockOCR2AbstractConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2Abstract_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2AbstractTransmittedIterator struct {
	Event *EventsMockOCR2AbstractTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2AbstractTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2AbstractTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2AbstractTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2AbstractTransmittedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2AbstractTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2AbstractTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2AbstractTransmitted(opts *bind.FilterOpts) (*EventsMockOCR2AbstractTransmittedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2Abstract_Transmitted")
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2AbstractTransmittedIterator{contract: _EventsMock.contract, event: "OCR2Abstract_Transmitted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2AbstractTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2AbstractTransmitted) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2Abstract_Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2AbstractTransmitted)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2Abstract_Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2AbstractTransmitted(log types.Log) (*EventsMockOCR2AbstractTransmitted, error) {
	event := new(EventsMockOCR2AbstractTransmitted)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2Abstract_Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2BaseUpgradeableConfigSetIterator struct {
	Event *EventsMockOCR2BaseUpgradeableConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2BaseUpgradeableConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2BaseUpgradeableConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2BaseUpgradeableConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2BaseUpgradeableConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2BaseUpgradeableConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2BaseUpgradeableConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2BaseUpgradeableConfigSet(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2BaseUpgradeable_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2BaseUpgradeableConfigSetIterator{contract: _EventsMock.contract, event: "OCR2BaseUpgradeable_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2BaseUpgradeableConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2BaseUpgradeable_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2BaseUpgradeableConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2BaseUpgradeableConfigSet(log types.Log) (*EventsMockOCR2BaseUpgradeableConfigSet, error) {
	event := new(EventsMockOCR2BaseUpgradeableConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2BaseUpgradeableInitializedIterator struct {
	Event *EventsMockOCR2BaseUpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2BaseUpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2BaseUpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2BaseUpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2BaseUpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2BaseUpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2BaseUpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2BaseUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2BaseUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2BaseUpgradeableInitializedIterator{contract: _EventsMock.contract, event: "OCR2BaseUpgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2BaseUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2BaseUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2BaseUpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2BaseUpgradeableInitialized(log types.Log) (*EventsMockOCR2BaseUpgradeableInitialized, error) {
	event := new(EventsMockOCR2BaseUpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator struct {
	Event *EventsMockOCR2BaseUpgradeableOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2BaseUpgradeableOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2BaseUpgradeableOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2BaseUpgradeableOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2BaseUpgradeable_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "OCR2BaseUpgradeable_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2BaseUpgradeable_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2BaseUpgradeableOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2BaseUpgradeableOwnershipTransferRequested(log types.Log) (*EventsMockOCR2BaseUpgradeableOwnershipTransferRequested, error) {
	event := new(EventsMockOCR2BaseUpgradeableOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator struct {
	Event *EventsMockOCR2BaseUpgradeableOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2BaseUpgradeableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2BaseUpgradeableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2BaseUpgradeableOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2BaseUpgradeableOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2BaseUpgradeable_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator{contract: _EventsMock.contract, event: "OCR2BaseUpgradeable_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2BaseUpgradeableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2BaseUpgradeable_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2BaseUpgradeableOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2BaseUpgradeableOwnershipTransferred(log types.Log) (*EventsMockOCR2BaseUpgradeableOwnershipTransferred, error) {
	event := new(EventsMockOCR2BaseUpgradeableOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOCR2BaseUpgradeableTransmittedIterator struct {
	Event *EventsMockOCR2BaseUpgradeableTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOCR2BaseUpgradeableTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOCR2BaseUpgradeableTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOCR2BaseUpgradeableTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOCR2BaseUpgradeableTransmittedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOCR2BaseUpgradeableTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOCR2BaseUpgradeableTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOCR2BaseUpgradeableTransmitted(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableTransmittedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OCR2BaseUpgradeable_Transmitted")
	if err != nil {
		return nil, err
	}
	return &EventsMockOCR2BaseUpgradeableTransmittedIterator{contract: _EventsMock.contract, event: "OCR2BaseUpgradeable_Transmitted", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOCR2BaseUpgradeableTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableTransmitted) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OCR2BaseUpgradeable_Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOCR2BaseUpgradeableTransmitted)
				if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOCR2BaseUpgradeableTransmitted(log types.Log) (*EventsMockOCR2BaseUpgradeableTransmitted, error) {
	event := new(EventsMockOCR2BaseUpgradeableTransmitted)
	if err := _EventsMock.contract.UnpackLog(event, "OCR2BaseUpgradeable_Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleDecimalsUpdatedIterator struct {
	Event *EventsMockOVMGasPriceOracleDecimalsUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleDecimalsUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleDecimalsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleDecimalsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleDecimalsUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleDecimalsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleDecimalsUpdated struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleDecimalsUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleDecimalsUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_DecimalsUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleDecimalsUpdatedIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_DecimalsUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleDecimalsUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleDecimalsUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_DecimalsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleDecimalsUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_DecimalsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleDecimalsUpdated(log types.Log) (*EventsMockOVMGasPriceOracleDecimalsUpdated, error) {
	event := new(EventsMockOVMGasPriceOracleDecimalsUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_DecimalsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleGasPriceUpdatedIterator struct {
	Event *EventsMockOVMGasPriceOracleGasPriceUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleGasPriceUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleGasPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleGasPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleGasPriceUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleGasPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleGasPriceUpdated struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleGasPriceUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleGasPriceUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_GasPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleGasPriceUpdatedIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_GasPriceUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleGasPriceUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleGasPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_GasPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleGasPriceUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_GasPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleGasPriceUpdated(log types.Log) (*EventsMockOVMGasPriceOracleGasPriceUpdated, error) {
	event := new(EventsMockOVMGasPriceOracleGasPriceUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_GasPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator struct {
	Event *EventsMockOVMGasPriceOracleL1BaseFeeUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleL1BaseFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleL1BaseFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleL1BaseFeeUpdated struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_L1BaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_L1BaseFeeUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleL1BaseFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_L1BaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleL1BaseFeeUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_L1BaseFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleL1BaseFeeUpdated(log types.Log) (*EventsMockOVMGasPriceOracleL1BaseFeeUpdated, error) {
	event := new(EventsMockOVMGasPriceOracleL1BaseFeeUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_L1BaseFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleOverheadUpdatedIterator struct {
	Event *EventsMockOVMGasPriceOracleOverheadUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleOverheadUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleOverheadUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleOverheadUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleOverheadUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleOverheadUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleOverheadUpdated struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleOverheadUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleOverheadUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_OverheadUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleOverheadUpdatedIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_OverheadUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleOverheadUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleOverheadUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_OverheadUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleOverheadUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_OverheadUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleOverheadUpdated(log types.Log) (*EventsMockOVMGasPriceOracleOverheadUpdated, error) {
	event := new(EventsMockOVMGasPriceOracleOverheadUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_OverheadUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleOwnershipTransferredIterator struct {
	Event *EventsMockOVMGasPriceOracleOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockOVMGasPriceOracleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleOwnershipTransferredIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleOwnershipTransferred(log types.Log) (*EventsMockOVMGasPriceOracleOwnershipTransferred, error) {
	event := new(EventsMockOVMGasPriceOracleOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOVMGasPriceOracleScalarUpdatedIterator struct {
	Event *EventsMockOVMGasPriceOracleScalarUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOVMGasPriceOracleScalarUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOVMGasPriceOracleScalarUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOVMGasPriceOracleScalarUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOVMGasPriceOracleScalarUpdatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockOVMGasPriceOracleScalarUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOVMGasPriceOracleScalarUpdated struct {
	Param1 *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOVMGasPriceOracleScalarUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleScalarUpdatedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "OVM_GasPriceOracle_ScalarUpdated")
	if err != nil {
		return nil, err
	}
	return &EventsMockOVMGasPriceOracleScalarUpdatedIterator{contract: _EventsMock.contract, event: "OVM_GasPriceOracle_ScalarUpdated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOVMGasPriceOracleScalarUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleScalarUpdated) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "OVM_GasPriceOracle_ScalarUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOVMGasPriceOracleScalarUpdated)
				if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_ScalarUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOVMGasPriceOracleScalarUpdated(log types.Log) (*EventsMockOVMGasPriceOracleScalarUpdated, error) {
	event := new(EventsMockOVMGasPriceOracleScalarUpdated)
	if err := _EventsMock.contract.UnpackLog(event, "OVM_GasPriceOracle_ScalarUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockOwnableOwnershipTransferredIterator struct {
	Event *EventsMockOwnableOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockOwnableOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockOwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockOwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockOwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockOwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockOwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterOwnableOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockOwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Ownable_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockOwnableOwnershipTransferredIterator{contract: _EventsMock.contract, event: "Ownable_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchOwnableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Ownable_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockOwnableOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "Ownable_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseOwnableOwnershipTransferred(log types.Log) (*EventsMockOwnableOwnershipTransferred, error) {
	event := new(EventsMockOwnableOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "Ownable_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockPausableUpgradeableInitializedIterator struct {
	Event *EventsMockPausableUpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockPausableUpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockPausableUpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockPausableUpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockPausableUpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockPausableUpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockPausableUpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterPausableUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockPausableUpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "PausableUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockPausableUpgradeableInitializedIterator{contract: _EventsMock.contract, event: "PausableUpgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchPausableUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "PausableUpgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockPausableUpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParsePausableUpgradeableInitialized(log types.Log) (*EventsMockPausableUpgradeableInitialized, error) {
	event := new(EventsMockPausableUpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockPausableUpgradeablePausedIterator struct {
	Event *EventsMockPausableUpgradeablePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockPausableUpgradeablePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockPausableUpgradeablePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockPausableUpgradeablePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockPausableUpgradeablePausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockPausableUpgradeablePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockPausableUpgradeablePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterPausableUpgradeablePaused(opts *bind.FilterOpts) (*EventsMockPausableUpgradeablePausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "PausableUpgradeable_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockPausableUpgradeablePausedIterator{contract: _EventsMock.contract, event: "PausableUpgradeable_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchPausableUpgradeablePaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeablePaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "PausableUpgradeable_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockPausableUpgradeablePaused)
				if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParsePausableUpgradeablePaused(log types.Log) (*EventsMockPausableUpgradeablePaused, error) {
	event := new(EventsMockPausableUpgradeablePaused)
	if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockPausableUpgradeableUnpausedIterator struct {
	Event *EventsMockPausableUpgradeableUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockPausableUpgradeableUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockPausableUpgradeableUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockPausableUpgradeableUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockPausableUpgradeableUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockPausableUpgradeableUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockPausableUpgradeableUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterPausableUpgradeableUnpaused(opts *bind.FilterOpts) (*EventsMockPausableUpgradeableUnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "PausableUpgradeable_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockPausableUpgradeableUnpausedIterator{contract: _EventsMock.contract, event: "PausableUpgradeable_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchPausableUpgradeableUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeableUnpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "PausableUpgradeable_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockPausableUpgradeableUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParsePausableUpgradeableUnpaused(log types.Log) (*EventsMockPausableUpgradeableUnpaused, error) {
	event := new(EventsMockPausableUpgradeableUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "PausableUpgradeable_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockPausablePausedIterator struct {
	Event *EventsMockPausablePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockPausablePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockPausablePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockPausablePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockPausablePausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockPausablePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockPausablePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterPausablePaused(opts *bind.FilterOpts) (*EventsMockPausablePausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Pausable_Paused")
	if err != nil {
		return nil, err
	}
	return &EventsMockPausablePausedIterator{contract: _EventsMock.contract, event: "Pausable_Paused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchPausablePaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausablePaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Pausable_Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockPausablePaused)
				if err := _EventsMock.contract.UnpackLog(event, "Pausable_Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParsePausablePaused(log types.Log) (*EventsMockPausablePaused, error) {
	event := new(EventsMockPausablePaused)
	if err := _EventsMock.contract.UnpackLog(event, "Pausable_Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockPausableUnpausedIterator struct {
	Event *EventsMockPausableUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockPausableUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockPausableUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockPausableUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockPausableUnpausedIterator) Error() error {
	return it.fail
}

func (it *EventsMockPausableUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockPausableUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterPausableUnpaused(opts *bind.FilterOpts) (*EventsMockPausableUnpausedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Pausable_Unpaused")
	if err != nil {
		return nil, err
	}
	return &EventsMockPausableUnpausedIterator{contract: _EventsMock.contract, event: "Pausable_Unpaused", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchPausableUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUnpaused) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Pausable_Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockPausableUnpaused)
				if err := _EventsMock.contract.UnpackLog(event, "Pausable_Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParsePausableUnpaused(log types.Log) (*EventsMockPausableUnpaused, error) {
	event := new(EventsMockPausableUnpaused)
	if err := _EventsMock.contract.UnpackLog(event, "Pausable_Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockProxyAdminOwnershipTransferredIterator struct {
	Event *EventsMockProxyAdminOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockProxyAdminOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockProxyAdminOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockProxyAdminOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockProxyAdminOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockProxyAdminOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockProxyAdminOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterProxyAdminOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockProxyAdminOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "ProxyAdmin_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockProxyAdminOwnershipTransferredIterator{contract: _EventsMock.contract, event: "ProxyAdmin_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchProxyAdminOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "ProxyAdmin_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockProxyAdminOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "ProxyAdmin_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseProxyAdminOwnershipTransferred(log types.Log) (*EventsMockProxyAdminOwnershipTransferred, error) {
	event := new(EventsMockProxyAdminOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "ProxyAdmin_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockTransparentUpgradeableProxyAdminChangedIterator struct {
	Event *EventsMockTransparentUpgradeableProxyAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockTransparentUpgradeableProxyAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockTransparentUpgradeableProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockTransparentUpgradeableProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockTransparentUpgradeableProxyAdminChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockTransparentUpgradeableProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockTransparentUpgradeableProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterTransparentUpgradeableProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockTransparentUpgradeableProxyAdminChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "TransparentUpgradeableProxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockTransparentUpgradeableProxyAdminChangedIterator{contract: _EventsMock.contract, event: "TransparentUpgradeableProxy_AdminChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchTransparentUpgradeableProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "TransparentUpgradeableProxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockTransparentUpgradeableProxyAdminChanged)
				if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseTransparentUpgradeableProxyAdminChanged(log types.Log) (*EventsMockTransparentUpgradeableProxyAdminChanged, error) {
	event := new(EventsMockTransparentUpgradeableProxyAdminChanged)
	if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator struct {
	Event *EventsMockTransparentUpgradeableProxyBeaconUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockTransparentUpgradeableProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockTransparentUpgradeableProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockTransparentUpgradeableProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterTransparentUpgradeableProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "TransparentUpgradeableProxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator{contract: _EventsMock.contract, event: "TransparentUpgradeableProxy_BeaconUpgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchTransparentUpgradeableProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "TransparentUpgradeableProxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockTransparentUpgradeableProxyBeaconUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseTransparentUpgradeableProxyBeaconUpgraded(log types.Log) (*EventsMockTransparentUpgradeableProxyBeaconUpgraded, error) {
	event := new(EventsMockTransparentUpgradeableProxyBeaconUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockTransparentUpgradeableProxyUpgradedIterator struct {
	Event *EventsMockTransparentUpgradeableProxyUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockTransparentUpgradeableProxyUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockTransparentUpgradeableProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockTransparentUpgradeableProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockTransparentUpgradeableProxyUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockTransparentUpgradeableProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockTransparentUpgradeableProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterTransparentUpgradeableProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockTransparentUpgradeableProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "TransparentUpgradeableProxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockTransparentUpgradeableProxyUpgradedIterator{contract: _EventsMock.contract, event: "TransparentUpgradeableProxy_Upgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchTransparentUpgradeableProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "TransparentUpgradeableProxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockTransparentUpgradeableProxyUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseTransparentUpgradeableProxyUpgraded(log types.Log) (*EventsMockTransparentUpgradeableProxyUpgraded, error) {
	event := new(EventsMockTransparentUpgradeableProxyUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "TransparentUpgradeableProxy_Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator struct {
	Event *EventsMockVRFConsumerBaseV2UpgradeableInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFConsumerBaseV2UpgradeableInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFConsumerBaseV2UpgradeableInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFConsumerBaseV2UpgradeableInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFConsumerBaseV2UpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFConsumerBaseV2Upgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator{contract: _EventsMock.contract, event: "VRFConsumerBaseV2Upgradeable_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFConsumerBaseV2UpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockVRFConsumerBaseV2UpgradeableInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFConsumerBaseV2Upgradeable_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFConsumerBaseV2UpgradeableInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "VRFConsumerBaseV2Upgradeable_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFConsumerBaseV2UpgradeableInitialized(log types.Log) (*EventsMockVRFConsumerBaseV2UpgradeableInitialized, error) {
	event := new(EventsMockVRFConsumerBaseV2UpgradeableInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "VRFConsumerBaseV2Upgradeable_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator struct {
	Event *EventsMockVRFConsumerV2UpgradeableExampleInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFConsumerV2UpgradeableExampleInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFConsumerV2UpgradeableExampleInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFConsumerV2UpgradeableExampleInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFConsumerV2UpgradeableExampleInitialized(opts *bind.FilterOpts) (*EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFConsumerV2UpgradeableExample_Initialized")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator{contract: _EventsMock.contract, event: "VRFConsumerV2UpgradeableExample_Initialized", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFConsumerV2UpgradeableExampleInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockVRFConsumerV2UpgradeableExampleInitialized) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFConsumerV2UpgradeableExample_Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFConsumerV2UpgradeableExampleInitialized)
				if err := _EventsMock.contract.UnpackLog(event, "VRFConsumerV2UpgradeableExample_Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFConsumerV2UpgradeableExampleInitialized(log types.Log) (*EventsMockVRFConsumerV2UpgradeableExampleInitialized, error) {
	event := new(EventsMockVRFConsumerV2UpgradeableExampleInitialized)
	if err := _EventsMock.contract.UnpackLog(event, "VRFConsumerV2UpgradeableExample_Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorMockRandomnessRequestIterator struct {
	Event *EventsMockVRFCoordinatorMockRandomnessRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorMockRandomnessRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorMockRandomnessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorMockRandomnessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorMockRandomnessRequestIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorMockRandomnessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorMockRandomnessRequest struct {
	Sender  common.Address
	KeyHash [32]byte
	Seed    *big.Int
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorMockRandomnessRequest(opts *bind.FilterOpts, sender []common.Address, keyHash [][32]byte, seed []*big.Int) (*EventsMockVRFCoordinatorMockRandomnessRequestIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}
	var seedRule []interface{}
	for _, seedItem := range seed {
		seedRule = append(seedRule, seedItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorMock_RandomnessRequest", senderRule, keyHashRule, seedRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorMockRandomnessRequestIterator{contract: _EventsMock.contract, event: "VRFCoordinatorMock_RandomnessRequest", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorMockRandomnessRequest(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorMockRandomnessRequest, sender []common.Address, keyHash [][32]byte, seed []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}
	var seedRule []interface{}
	for _, seedItem := range seed {
		seedRule = append(seedRule, seedItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorMock_RandomnessRequest", senderRule, keyHashRule, seedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorMockRandomnessRequest)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorMock_RandomnessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorMockRandomnessRequest(log types.Log) (*EventsMockVRFCoordinatorMockRandomnessRequest, error) {
	event := new(EventsMockVRFCoordinatorMockRandomnessRequest)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorMock_RandomnessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperConfigSetIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperConfigSet struct {
	MinimumRequestConfirmations uint16
	MaxGasLimit                 uint32
	StalenessSeconds            uint32
	GasAfterPaymentCalculation  uint32
	FallbackWeiPerUnitLink      *big.Int
	FeeConfig                   EventsMockVRFCoordinatorV2TestHelperFeeConfig
	Raw                         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperConfigSet(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2TestHelperConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperConfigSetIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperConfigSet(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperConfigSet, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperFundsRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperFundsRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperFundsRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperFundsRecovered struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_FundsRecovered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperFundsRecovered) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperFundsRecovered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_FundsRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperFundsRecovered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperFundsRecovered, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperFundsRecovered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_FundsRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperOwnershipTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperOwnershipTransferred(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_ProvingKeyDeregistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_ProvingKeyDeregistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered, oracle []common.Address) (event.Subscription, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_ProvingKeyDeregistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ProvingKeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperProvingKeyDeregistered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ProvingKeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_ProvingKeyRegistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_ProvingKeyRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered, oracle []common.Address) (event.Subscription, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_ProvingKeyRegistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ProvingKeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperProvingKeyRegistered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_ProvingKeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled struct {
	RequestId  *big.Int
	OutputSeed *big.Int
	Payment    *big.Int
	Success    bool
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_RandomWordsFulfilled", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled, requestId []*big.Int) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_RandomWordsFulfilled", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperRandomWordsFulfilled(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested struct {
	KeyHash                     [32]byte
	RequestId                   *big.Int
	PreSeed                     *big.Int
	SubId                       uint64
	MinimumRequestConfirmations uint16
	CallbackGasLimit            uint32
	NumWords                    uint32
	Sender                      common.Address
	Raw                         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte, subId []uint64, sender []common.Address) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_RandomWordsRequested", keyHashRule, subIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_RandomWordsRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested, keyHash [][32]byte, subId []uint64, sender []common.Address) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_RandomWordsRequested", keyHashRule, subIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_RandomWordsRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperRandomWordsRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_RandomWordsRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionCanceled(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionCreated(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionFunded(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator struct {
	Event *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred, error) {
	event := new(EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2TestHelper_SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2ConfigSetIterator struct {
	Event *EventsMockVRFCoordinatorV2ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2ConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2ConfigSet struct {
	MinimumRequestConfirmations uint16
	MaxGasLimit                 uint32
	StalenessSeconds            uint32
	GasAfterPaymentCalculation  uint32
	FallbackWeiPerUnitLink      *big.Int
	FeeConfig                   EventsMockVRFCoordinatorV2FeeConfig
	Raw                         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2ConfigSet(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2ConfigSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_ConfigSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2ConfigSetIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ConfigSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2ConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2ConfigSet(log types.Log) (*EventsMockVRFCoordinatorV2ConfigSet, error) {
	event := new(EventsMockVRFCoordinatorV2ConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2FundsRecoveredIterator struct {
	Event *EventsMockVRFCoordinatorV2FundsRecovered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2FundsRecoveredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2FundsRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2FundsRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2FundsRecoveredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2FundsRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2FundsRecovered struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2FundsRecovered(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2FundsRecoveredIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2FundsRecoveredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_FundsRecovered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2FundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2FundsRecovered) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_FundsRecovered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2FundsRecovered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_FundsRecovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2FundsRecovered(log types.Log) (*EventsMockVRFCoordinatorV2FundsRecovered, error) {
	event := new(EventsMockVRFCoordinatorV2FundsRecovered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_FundsRecovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2OwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2OwnershipTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2OwnershipTransferRequested, error) {
	event := new(EventsMockVRFCoordinatorV2OwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2OwnershipTransferredIterator struct {
	Event *EventsMockVRFCoordinatorV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2OwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2OwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2OwnershipTransferred(log types.Log) (*EventsMockVRFCoordinatorV2OwnershipTransferred, error) {
	event := new(EventsMockVRFCoordinatorV2OwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator struct {
	Event *EventsMockVRFCoordinatorV2ProvingKeyDeregistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2ProvingKeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2ProvingKeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2ProvingKeyDeregistered struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_ProvingKeyDeregistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_ProvingKeyDeregistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ProvingKeyDeregistered, oracle []common.Address) (event.Subscription, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_ProvingKeyDeregistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2ProvingKeyDeregistered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ProvingKeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2ProvingKeyDeregistered(log types.Log) (*EventsMockVRFCoordinatorV2ProvingKeyDeregistered, error) {
	event := new(EventsMockVRFCoordinatorV2ProvingKeyDeregistered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ProvingKeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator struct {
	Event *EventsMockVRFCoordinatorV2ProvingKeyRegistered

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2ProvingKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2ProvingKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2ProvingKeyRegistered struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2ProvingKeyRegistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_ProvingKeyRegistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_ProvingKeyRegistered", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2ProvingKeyRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ProvingKeyRegistered, oracle []common.Address) (event.Subscription, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_ProvingKeyRegistered", oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2ProvingKeyRegistered)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ProvingKeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2ProvingKeyRegistered(log types.Log) (*EventsMockVRFCoordinatorV2ProvingKeyRegistered, error) {
	event := new(EventsMockVRFCoordinatorV2ProvingKeyRegistered)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_ProvingKeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator struct {
	Event *EventsMockVRFCoordinatorV2RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2RandomWordsFulfilled struct {
	RequestId  *big.Int
	OutputSeed *big.Int
	Payment    *big.Int
	Success    bool
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2RandomWordsFulfilled(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_RandomWordsFulfilled", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2RandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2RandomWordsFulfilled, requestId []*big.Int) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_RandomWordsFulfilled", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2RandomWordsFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2RandomWordsFulfilled(log types.Log) (*EventsMockVRFCoordinatorV2RandomWordsFulfilled, error) {
	event := new(EventsMockVRFCoordinatorV2RandomWordsFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2RandomWordsRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2RandomWordsRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2RandomWordsRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2RandomWordsRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2RandomWordsRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2RandomWordsRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2RandomWordsRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2RandomWordsRequested struct {
	KeyHash                     [32]byte
	RequestId                   *big.Int
	PreSeed                     *big.Int
	SubId                       uint64
	MinimumRequestConfirmations uint16
	CallbackGasLimit            uint32
	NumWords                    uint32
	Sender                      common.Address
	Raw                         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2RandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte, subId []uint64, sender []common.Address) (*EventsMockVRFCoordinatorV2RandomWordsRequestedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_RandomWordsRequested", keyHashRule, subIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2RandomWordsRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_RandomWordsRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2RandomWordsRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte, subId []uint64, sender []common.Address) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_RandomWordsRequested", keyHashRule, subIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2RandomWordsRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_RandomWordsRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2RandomWordsRequested(log types.Log) (*EventsMockVRFCoordinatorV2RandomWordsRequested, error) {
	event := new(EventsMockVRFCoordinatorV2RandomWordsRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_RandomWordsRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionCanceledIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionCanceledIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionCanceled)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionCanceled(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionCanceled, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionCanceled)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionConsumerAdded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionConsumerAdded(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionConsumerAdded, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionConsumerAdded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionConsumerRemoved(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionCreatedIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionCreatedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionCreated)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionCreated(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionCreated, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionCreated)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionFundedIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionFundedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionFunded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionFunded(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionFunded, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionFunded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionOwnerTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator struct {
	Event *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFCoordinatorV2_SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator{contract: _EventsMock.contract, event: "VRFCoordinatorV2_SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFCoordinatorV2_SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFCoordinatorV2SubscriptionOwnerTransferred(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred, error) {
	event := new(EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFCoordinatorV2_SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator struct {
	Event *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFLoadTestExternalSubOwner_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFLoadTestExternalSubOwner_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFLoadTestExternalSubOwner_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFLoadTestExternalSubOwner_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFLoadTestExternalSubOwnerOwnershipTransferRequested(log types.Log) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested, error) {
	event := new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFLoadTestExternalSubOwner_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator struct {
	Event *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFLoadTestExternalSubOwner_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFLoadTestExternalSubOwner_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFLoadTestExternalSubOwner_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFLoadTestExternalSubOwner_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFLoadTestExternalSubOwnerOwnershipTransferred(log types.Log) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred, error) {
	event := new(EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFLoadTestExternalSubOwner_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2ProxyAdminOwnershipTransferredIterator struct {
	Event *EventsMockVRFV2ProxyAdminOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2ProxyAdminOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2ProxyAdminOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2ProxyAdminOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2ProxyAdminOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2ProxyAdminOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2ProxyAdminOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2ProxyAdminOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockVRFV2ProxyAdminOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2ProxyAdmin_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2ProxyAdminOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFV2ProxyAdmin_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2ProxyAdminOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2ProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2ProxyAdmin_OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2ProxyAdminOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2ProxyAdmin_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2ProxyAdminOwnershipTransferred(log types.Log) (*EventsMockVRFV2ProxyAdminOwnershipTransferred, error) {
	event := new(EventsMockVRFV2ProxyAdminOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2ProxyAdmin_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator struct {
	Event *EventsMockVRFV2TransparentUpgradeableProxyAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2TransparentUpgradeableProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2TransparentUpgradeableProxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator{contract: _EventsMock.contract, event: "VRFV2TransparentUpgradeableProxy_AdminChanged", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2TransparentUpgradeableProxy_AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2TransparentUpgradeableProxyAdminChanged)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2TransparentUpgradeableProxyAdminChanged(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyAdminChanged, error) {
	event := new(EventsMockVRFV2TransparentUpgradeableProxyAdminChanged)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator struct {
	Event *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2TransparentUpgradeableProxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator{contract: _EventsMock.contract, event: "VRFV2TransparentUpgradeableProxy_BeaconUpgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2TransparentUpgradeableProxy_BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2TransparentUpgradeableProxyBeaconUpgraded(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded, error) {
	event := new(EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator struct {
	Event *EventsMockVRFV2TransparentUpgradeableProxyUpgraded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2TransparentUpgradeableProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2TransparentUpgradeableProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2TransparentUpgradeableProxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator{contract: _EventsMock.contract, event: "VRFV2TransparentUpgradeableProxy_Upgraded", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2TransparentUpgradeableProxy_Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2TransparentUpgradeableProxyUpgraded)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2TransparentUpgradeableProxyUpgraded(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyUpgraded, error) {
	event := new(EventsMockVRFV2TransparentUpgradeableProxyUpgraded)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2TransparentUpgradeableProxy_Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator struct {
	Event *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2WrapperConsumerExample_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFV2WrapperConsumerExample_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2WrapperConsumerExample_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperConsumerExampleOwnershipTransferRequested(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested, error) {
	event := new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator struct {
	Event *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2WrapperConsumerExample_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFV2WrapperConsumerExample_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2WrapperConsumerExample_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperConsumerExampleOwnershipTransferred(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred, error) {
	event := new(EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator struct {
	Event *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled struct {
	RequestId   *big.Int
	RandomWords []*big.Int
	Payment     *big.Int
	Raw         types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.FilterOpts) (*EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2WrapperConsumerExample_WrappedRequestFulfilled")
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator{contract: _EventsMock.contract, event: "VRFV2WrapperConsumerExample_WrappedRequestFulfilled", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2WrapperConsumerExample_WrappedRequestFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_WrappedRequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperConsumerExampleWrappedRequestFulfilled(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled, error) {
	event := new(EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_WrappedRequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator struct {
	Event *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade struct {
	RequestId *big.Int
	Paid      *big.Int
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2WrapperConsumerExample_WrapperRequestMade", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator{contract: _EventsMock.contract, event: "VRFV2WrapperConsumerExample_WrapperRequestMade", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade, requestId []*big.Int) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2WrapperConsumerExample_WrapperRequestMade", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_WrapperRequestMade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperConsumerExampleWrapperRequestMade(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade, error) {
	event := new(EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2WrapperConsumerExample_WrapperRequestMade", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperOwnershipTransferRequestedIterator struct {
	Event *EventsMockVRFV2WrapperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2Wrapper_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VRFV2Wrapper_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2Wrapper_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperOwnershipTransferRequested(log types.Log) (*EventsMockVRFV2WrapperOwnershipTransferRequested, error) {
	event := new(EventsMockVRFV2WrapperOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperOwnershipTransferredIterator struct {
	Event *EventsMockVRFV2WrapperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2Wrapper_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VRFV2Wrapper_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2Wrapper_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperOwnershipTransferred(log types.Log) (*EventsMockVRFV2WrapperOwnershipTransferred, error) {
	event := new(EventsMockVRFV2WrapperOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator struct {
	Event *EventsMockVRFV2WrapperWrapperFulfillmentFailed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVRFV2WrapperWrapperFulfillmentFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVRFV2WrapperWrapperFulfillmentFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVRFV2WrapperWrapperFulfillmentFailed struct {
	RequestId *big.Int
	Consumer  common.Address
	Raw       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVRFV2WrapperWrapperFulfillmentFailed(opts *bind.FilterOpts, requestId []*big.Int, consumer []common.Address) (*EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var consumerRule []interface{}
	for _, consumerItem := range consumer {
		consumerRule = append(consumerRule, consumerItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VRFV2Wrapper_WrapperFulfillmentFailed", requestIdRule, consumerRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator{contract: _EventsMock.contract, event: "VRFV2Wrapper_WrapperFulfillmentFailed", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVRFV2WrapperWrapperFulfillmentFailed(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperWrapperFulfillmentFailed, requestId []*big.Int, consumer []common.Address) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var consumerRule []interface{}
	for _, consumerItem := range consumer {
		consumerRule = append(consumerRule, consumerItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VRFV2Wrapper_WrapperFulfillmentFailed", requestIdRule, consumerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVRFV2WrapperWrapperFulfillmentFailed)
				if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_WrapperFulfillmentFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVRFV2WrapperWrapperFulfillmentFailed(log types.Log) (*EventsMockVRFV2WrapperWrapperFulfillmentFailed, error) {
	event := new(EventsMockVRFV2WrapperWrapperFulfillmentFailed)
	if err := _EventsMock.contract.UnpackLog(event, "VRFV2Wrapper_WrapperFulfillmentFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierProxyAccessControllerSetIterator struct {
	Event *EventsMockVerifierProxyAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierProxyAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierProxyAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierProxyAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierProxyAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierProxyAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierProxyAccessControllerSet struct {
	OldAccessController common.Address
	NewAccessController common.Address
	Raw                 types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierProxyAccessControllerSet(opts *bind.FilterOpts) (*EventsMockVerifierProxyAccessControllerSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VerifierProxy_AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierProxyAccessControllerSetIterator{contract: _EventsMock.contract, event: "VerifierProxy_AccessControllerSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierProxyAccessControllerSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VerifierProxy_AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierProxyAccessControllerSet)
				if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_AccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierProxyAccessControllerSet(log types.Log) (*EventsMockVerifierProxyAccessControllerSet, error) {
	event := new(EventsMockVerifierProxyAccessControllerSet)
	if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_AccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierProxyOwnershipTransferRequestedIterator struct {
	Event *EventsMockVerifierProxyOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierProxyOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierProxyOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierProxyOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierProxyOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierProxyOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierProxyOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierProxyOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierProxyOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VerifierProxy_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierProxyOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "VerifierProxy_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierProxyOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VerifierProxy_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierProxyOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierProxyOwnershipTransferRequested(log types.Log) (*EventsMockVerifierProxyOwnershipTransferRequested, error) {
	event := new(EventsMockVerifierProxyOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierProxyOwnershipTransferredIterator struct {
	Event *EventsMockVerifierProxyOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierProxyOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierProxyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierProxyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierProxyOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierProxyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierProxyOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierProxyOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierProxyOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VerifierProxy_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierProxyOwnershipTransferredIterator{contract: _EventsMock.contract, event: "VerifierProxy_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierProxyOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VerifierProxy_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierProxyOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierProxyOwnershipTransferred(log types.Log) (*EventsMockVerifierProxyOwnershipTransferred, error) {
	event := new(EventsMockVerifierProxyOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierProxyVerifierSetIterator struct {
	Event *EventsMockVerifierProxyVerifierSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierProxyVerifierSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierProxyVerifierSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierProxyVerifierSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierProxyVerifierSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierProxyVerifierSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierProxyVerifierSet struct {
	OldConfigDigest [32]byte
	NewConfigDigest [32]byte
	VerifierAddress common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierProxyVerifierSet(opts *bind.FilterOpts) (*EventsMockVerifierProxyVerifierSetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VerifierProxy_VerifierSet")
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierProxyVerifierSetIterator{contract: _EventsMock.contract, event: "VerifierProxy_VerifierSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierProxyVerifierSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyVerifierSet) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VerifierProxy_VerifierSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierProxyVerifierSet)
				if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_VerifierSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierProxyVerifierSet(log types.Log) (*EventsMockVerifierProxyVerifierSet, error) {
	event := new(EventsMockVerifierProxyVerifierSet)
	if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_VerifierSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierProxyVerifierUnsetIterator struct {
	Event *EventsMockVerifierProxyVerifierUnset

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierProxyVerifierUnsetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierProxyVerifierUnset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierProxyVerifierUnset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierProxyVerifierUnsetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierProxyVerifierUnsetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierProxyVerifierUnset struct {
	ConfigDigest    [32]byte
	VerifierAddress common.Address
	Raw             types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierProxyVerifierUnset(opts *bind.FilterOpts) (*EventsMockVerifierProxyVerifierUnsetIterator, error) {

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "VerifierProxy_VerifierUnset")
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierProxyVerifierUnsetIterator{contract: _EventsMock.contract, event: "VerifierProxy_VerifierUnset", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierProxyVerifierUnset(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyVerifierUnset) (event.Subscription, error) {

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "VerifierProxy_VerifierUnset")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierProxyVerifierUnset)
				if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_VerifierUnset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierProxyVerifierUnset(log types.Log) (*EventsMockVerifierProxyVerifierUnset, error) {
	event := new(EventsMockVerifierProxyVerifierUnset)
	if err := _EventsMock.contract.UnpackLog(event, "VerifierProxy_VerifierUnset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierConfigActivatedIterator struct {
	Event *EventsMockVerifierConfigActivated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierConfigActivatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierConfigActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierConfigActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierConfigActivatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierConfigActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierConfigActivated struct {
	FeedId       [32]byte
	ConfigDigest [32]byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierConfigActivated(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigActivatedIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_ConfigActivated", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierConfigActivatedIterator{contract: _EventsMock.contract, event: "Verifier_ConfigActivated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierConfigActivated(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigActivated, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_ConfigActivated", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierConfigActivated)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierConfigActivated(log types.Log) (*EventsMockVerifierConfigActivated, error) {
	event := new(EventsMockVerifierConfigActivated)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierConfigDeactivatedIterator struct {
	Event *EventsMockVerifierConfigDeactivated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierConfigDeactivatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierConfigDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierConfigDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierConfigDeactivatedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierConfigDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierConfigDeactivated struct {
	FeedId       [32]byte
	ConfigDigest [32]byte
	Raw          types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierConfigDeactivated(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigDeactivatedIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_ConfigDeactivated", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierConfigDeactivatedIterator{contract: _EventsMock.contract, event: "Verifier_ConfigDeactivated", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierConfigDeactivated(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigDeactivated, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_ConfigDeactivated", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierConfigDeactivated)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierConfigDeactivated(log types.Log) (*EventsMockVerifierConfigDeactivated, error) {
	event := new(EventsMockVerifierConfigDeactivated)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierConfigSetIterator struct {
	Event *EventsMockVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierConfigSet struct {
	FeedId                    [32]byte
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	OffchainTransmitters      [][32]byte
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierConfigSet(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigSetIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_ConfigSet", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierConfigSetIterator{contract: _EventsMock.contract, event: "Verifier_ConfigSet", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigSet, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_ConfigSet", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierConfigSet)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierConfigSet(log types.Log) (*EventsMockVerifierConfigSet, error) {
	event := new(EventsMockVerifierConfigSet)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierOwnershipTransferRequestedIterator struct {
	Event *EventsMockVerifierOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierOwnershipTransferRequestedIterator{contract: _EventsMock.contract, event: "Verifier_OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierOwnershipTransferRequested)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierOwnershipTransferRequested(log types.Log) (*EventsMockVerifierOwnershipTransferRequested, error) {
	event := new(EventsMockVerifierOwnershipTransferRequested)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierOwnershipTransferredIterator struct {
	Event *EventsMockVerifierOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierOwnershipTransferredIterator{contract: _EventsMock.contract, event: "Verifier_OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierOwnershipTransferred)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierOwnershipTransferred(log types.Log) (*EventsMockVerifierOwnershipTransferred, error) {
	event := new(EventsMockVerifierOwnershipTransferred)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EventsMockVerifierReportVerifiedIterator struct {
	Event *EventsMockVerifierReportVerified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EventsMockVerifierReportVerifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EventsMockVerifierReportVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EventsMockVerifierReportVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EventsMockVerifierReportVerifiedIterator) Error() error {
	return it.fail
}

func (it *EventsMockVerifierReportVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EventsMockVerifierReportVerified struct {
	FeedId     [32]byte
	ReportHash [32]byte
	Requester  common.Address
	Raw        types.Log
}

func (_EventsMock *EventsMockFilterer) FilterVerifierReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierReportVerifiedIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.FilterLogs(opts, "Verifier_ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &EventsMockVerifierReportVerifiedIterator{contract: _EventsMock.contract, event: "Verifier_ReportVerified", logs: logs, sub: sub}, nil
}

func (_EventsMock *EventsMockFilterer) WatchVerifierReportVerified(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierReportVerified, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _EventsMock.contract.WatchLogs(opts, "Verifier_ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EventsMockVerifierReportVerified)
				if err := _EventsMock.contract.UnpackLog(event, "Verifier_ReportVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EventsMock *EventsMockFilterer) ParseVerifierReportVerified(log types.Log) (*EventsMockVerifierReportVerified, error) {
	event := new(EventsMockVerifierReportVerified)
	if err := _EventsMock.contract.UnpackLog(event, "Verifier_ReportVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_EventsMock *EventsMock) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _EventsMock.abi.Events["AggregatorInterfaceAnswerUpdated"].ID:
		return _EventsMock.ParseAggregatorInterfaceAnswerUpdated(log)
	case _EventsMock.abi.Events["AggregatorInterfaceNewRound"].ID:
		return _EventsMock.ParseAggregatorInterfaceNewRound(log)
	case _EventsMock.abi.Events["AggregatorV2V3InterfaceAnswerUpdated"].ID:
		return _EventsMock.ParseAggregatorV2V3InterfaceAnswerUpdated(log)
	case _EventsMock.abi.Events["AggregatorV2V3InterfaceNewRound"].ID:
		return _EventsMock.ParseAggregatorV2V3InterfaceNewRound(log)
	case _EventsMock.abi.Events["ArbSysL2ToL1Transaction"].ID:
		return _EventsMock.ParseArbSysL2ToL1Transaction(log)
	case _EventsMock.abi.Events["ArbSysL2ToL1Tx"].ID:
		return _EventsMock.ParseArbSysL2ToL1Tx(log)
	case _EventsMock.abi.Events["ArbSysSendMerkleUpdate"].ID:
		return _EventsMock.ParseArbSysSendMerkleUpdate(log)
	case _EventsMock.abi.Events["AuthorizedOriginReceiverUpgradeableAuthorizedSendersActive"].ID:
		return _EventsMock.ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(log)
	case _EventsMock.abi.Events["AuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["AuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive"].ID:
		return _EventsMock.ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(log)
	case _EventsMock.abi.Events["AuthorizedOriginReceiverUpgradeableInitialized"].ID:
		return _EventsMock.ParseAuthorizedOriginReceiverUpgradeableInitialized(log)
	case _EventsMock.abi.Events["AuthorizedReceiverAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseAuthorizedReceiverAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["BatchVRFCoordinatorV2ErrorReturned"].ID:
		return _EventsMock.ParseBatchVRFCoordinatorV2ErrorReturned(log)
	case _EventsMock.abi.Events["BatchVRFCoordinatorV2RawErrorReturned"].ID:
		return _EventsMock.ParseBatchVRFCoordinatorV2RawErrorReturned(log)
	case _EventsMock.abi.Events["ChainlinkClientChainlinkCancelled"].ID:
		return _EventsMock.ParseChainlinkClientChainlinkCancelled(log)
	case _EventsMock.abi.Events["ChainlinkClientChainlinkFulfilled"].ID:
		return _EventsMock.ParseChainlinkClientChainlinkFulfilled(log)
	case _EventsMock.abi.Events["ChainlinkClientChainlinkRequested"].ID:
		return _EventsMock.ParseChainlinkClientChainlinkRequested(log)
	case _EventsMock.abi.Events["ConfirmedOwnerUpgradeableInitialized"].ID:
		return _EventsMock.ParseConfirmedOwnerUpgradeableInitialized(log)
	case _EventsMock.abi.Events["ConfirmedOwnerUpgradeableOwnershipTransferRequested"].ID:
		return _EventsMock.ParseConfirmedOwnerUpgradeableOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["ConfirmedOwnerUpgradeableOwnershipTransferred"].ID:
		return _EventsMock.ParseConfirmedOwnerUpgradeableOwnershipTransferred(log)
	case _EventsMock.abi.Events["ConfirmedOwnerWithProposalOwnershipTransferRequested"].ID:
		return _EventsMock.ParseConfirmedOwnerWithProposalOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["ConfirmedOwnerWithProposalOwnershipTransferred"].ID:
		return _EventsMock.ParseConfirmedOwnerWithProposalOwnershipTransferred(log)
	case _EventsMock.abi.Events["ConfirmedOwnerOwnershipTransferRequested"].ID:
		return _EventsMock.ParseConfirmedOwnerOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["ConfirmedOwnerOwnershipTransferred"].ID:
		return _EventsMock.ParseConfirmedOwnerOwnershipTransferred(log)
	case _EventsMock.abi.Events["ContextUpgradeableInitialized"].ID:
		return _EventsMock.ParseContextUpgradeableInitialized(log)
	case _EventsMock.abi.Events["CronUpkeepFactoryNewCronUpkeepCreated"].ID:
		return _EventsMock.ParseCronUpkeepFactoryNewCronUpkeepCreated(log)
	case _EventsMock.abi.Events["CronUpkeepFactoryOwnershipTransferRequested"].ID:
		return _EventsMock.ParseCronUpkeepFactoryOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["CronUpkeepFactoryOwnershipTransferred"].ID:
		return _EventsMock.ParseCronUpkeepFactoryOwnershipTransferred(log)
	case _EventsMock.abi.Events["CronUpkeepCronJobCreated"].ID:
		return _EventsMock.ParseCronUpkeepCronJobCreated(log)
	case _EventsMock.abi.Events["CronUpkeepCronJobDeleted"].ID:
		return _EventsMock.ParseCronUpkeepCronJobDeleted(log)
	case _EventsMock.abi.Events["CronUpkeepCronJobExecuted"].ID:
		return _EventsMock.ParseCronUpkeepCronJobExecuted(log)
	case _EventsMock.abi.Events["CronUpkeepCronJobUpdated"].ID:
		return _EventsMock.ParseCronUpkeepCronJobUpdated(log)
	case _EventsMock.abi.Events["CronUpkeepOwnershipTransferRequested"].ID:
		return _EventsMock.ParseCronUpkeepOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["CronUpkeepOwnershipTransferred"].ID:
		return _EventsMock.ParseCronUpkeepOwnershipTransferred(log)
	case _EventsMock.abi.Events["CronUpkeepPaused"].ID:
		return _EventsMock.ParseCronUpkeepPaused(log)
	case _EventsMock.abi.Events["CronUpkeepUnpaused"].ID:
		return _EventsMock.ParseCronUpkeepUnpaused(log)
	case _EventsMock.abi.Events["ENSInterfaceNewOwner"].ID:
		return _EventsMock.ParseENSInterfaceNewOwner(log)
	case _EventsMock.abi.Events["ENSInterfaceNewResolver"].ID:
		return _EventsMock.ParseENSInterfaceNewResolver(log)
	case _EventsMock.abi.Events["ENSInterfaceNewTTL"].ID:
		return _EventsMock.ParseENSInterfaceNewTTL(log)
	case _EventsMock.abi.Events["ENSInterfaceTransfer"].ID:
		return _EventsMock.ParseENSInterfaceTransfer(log)
	case _EventsMock.abi.Events["ERC1967ProxyAdminChanged"].ID:
		return _EventsMock.ParseERC1967ProxyAdminChanged(log)
	case _EventsMock.abi.Events["ERC1967ProxyBeaconUpgraded"].ID:
		return _EventsMock.ParseERC1967ProxyBeaconUpgraded(log)
	case _EventsMock.abi.Events["ERC1967ProxyUpgraded"].ID:
		return _EventsMock.ParseERC1967ProxyUpgraded(log)
	case _EventsMock.abi.Events["ERC1967UpgradeAdminChanged"].ID:
		return _EventsMock.ParseERC1967UpgradeAdminChanged(log)
	case _EventsMock.abi.Events["ERC1967UpgradeBeaconUpgraded"].ID:
		return _EventsMock.ParseERC1967UpgradeBeaconUpgraded(log)
	case _EventsMock.abi.Events["ERC1967UpgradeUpgraded"].ID:
		return _EventsMock.ParseERC1967UpgradeUpgraded(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitBillingEnd"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitBillingEnd(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitBillingStart"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitBillingStart(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitConfigSet"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitConfigSet(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitFundsRecovered"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitFundsRecovered(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitInitialized"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitInitialized(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitOwnershipTransferRequested"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitOwnershipTransferred"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitOwnershipTransferred(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitPaused"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitPaused(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitRequestTimedOut"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitRequestTimedOut(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionCanceled"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionCanceled(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionConsumerAdded"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionConsumerRemoved"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionCreated"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionCreated(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionFunded"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionFunded(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitSubscriptionOwnerTransferred"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryWithInitUnpaused"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryWithInitUnpaused(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryBillingEnd"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryBillingEnd(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryBillingStart"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryBillingStart(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryConfigSet"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryConfigSet(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryFundsRecovered"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryFundsRecovered(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryInitialized"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryInitialized(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryOwnershipTransferRequested"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryOwnershipTransferred"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryOwnershipTransferred(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryPaused"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryPaused(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryRequestTimedOut"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryRequestTimedOut(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionCanceled"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionCanceled(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionConsumerAdded"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionConsumerAdded(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionConsumerRemoved"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionConsumerRemoved(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionCreated"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionCreated(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionFunded"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionFunded(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionOwnerTransferRequested"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionOwnerTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistrySubscriptionOwnerTransferred"].ID:
		return _EventsMock.ParseFunctionsBillingRegistrySubscriptionOwnerTransferred(log)
	case _EventsMock.abi.Events["FunctionsBillingRegistryUnpaused"].ID:
		return _EventsMock.ParseFunctionsBillingRegistryUnpaused(log)
	case _EventsMock.abi.Events["FunctionsClientExampleOwnershipTransferRequested"].ID:
		return _EventsMock.ParseFunctionsClientExampleOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsClientExampleOwnershipTransferred"].ID:
		return _EventsMock.ParseFunctionsClientExampleOwnershipTransferred(log)
	case _EventsMock.abi.Events["FunctionsClientExampleRequestFulfilled"].ID:
		return _EventsMock.ParseFunctionsClientExampleRequestFulfilled(log)
	case _EventsMock.abi.Events["FunctionsClientExampleRequestSent"].ID:
		return _EventsMock.ParseFunctionsClientExampleRequestSent(log)
	case _EventsMock.abi.Events["FunctionsClientRequestFulfilled"].ID:
		return _EventsMock.ParseFunctionsClientRequestFulfilled(log)
	case _EventsMock.abi.Events["FunctionsClientRequestSent"].ID:
		return _EventsMock.ParseFunctionsClientRequestSent(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitAuthorizedSendersActive"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitAuthorizedSendersActive(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitAuthorizedSendersDeactive"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitAuthorizedSendersDeactive(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitConfigSet"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitConfigSet(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitInitialized"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitInitialized(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitInvalidRequestID"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitInvalidRequestID(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitOracleRequest"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitOracleRequest(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitOracleResponse"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitOracleResponse(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitOwnershipTransferRequested"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitOwnershipTransferred"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitOwnershipTransferred(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitTransmitted"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitTransmitted(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitUserCallbackError"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitUserCallbackError(log)
	case _EventsMock.abi.Events["FunctionsOracleWithInitUserCallbackRawError"].ID:
		return _EventsMock.ParseFunctionsOracleWithInitUserCallbackRawError(log)
	case _EventsMock.abi.Events["FunctionsOracleAuthorizedSendersActive"].ID:
		return _EventsMock.ParseFunctionsOracleAuthorizedSendersActive(log)
	case _EventsMock.abi.Events["FunctionsOracleAuthorizedSendersChanged"].ID:
		return _EventsMock.ParseFunctionsOracleAuthorizedSendersChanged(log)
	case _EventsMock.abi.Events["FunctionsOracleAuthorizedSendersDeactive"].ID:
		return _EventsMock.ParseFunctionsOracleAuthorizedSendersDeactive(log)
	case _EventsMock.abi.Events["FunctionsOracleConfigSet"].ID:
		return _EventsMock.ParseFunctionsOracleConfigSet(log)
	case _EventsMock.abi.Events["FunctionsOracleInitialized"].ID:
		return _EventsMock.ParseFunctionsOracleInitialized(log)
	case _EventsMock.abi.Events["FunctionsOracleInvalidRequestID"].ID:
		return _EventsMock.ParseFunctionsOracleInvalidRequestID(log)
	case _EventsMock.abi.Events["FunctionsOracleOracleRequest"].ID:
		return _EventsMock.ParseFunctionsOracleOracleRequest(log)
	case _EventsMock.abi.Events["FunctionsOracleOracleResponse"].ID:
		return _EventsMock.ParseFunctionsOracleOracleResponse(log)
	case _EventsMock.abi.Events["FunctionsOracleOwnershipTransferRequested"].ID:
		return _EventsMock.ParseFunctionsOracleOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["FunctionsOracleOwnershipTransferred"].ID:
		return _EventsMock.ParseFunctionsOracleOwnershipTransferred(log)
	case _EventsMock.abi.Events["FunctionsOracleTransmitted"].ID:
		return _EventsMock.ParseFunctionsOracleTransmitted(log)
	case _EventsMock.abi.Events["FunctionsOracleUserCallbackError"].ID:
		return _EventsMock.ParseFunctionsOracleUserCallbackError(log)
	case _EventsMock.abi.Events["FunctionsOracleUserCallbackRawError"].ID:
		return _EventsMock.ParseFunctionsOracleUserCallbackRawError(log)
	case _EventsMock.abi.Events["InitializableInitialized"].ID:
		return _EventsMock.ParseInitializableInitialized(log)
	case _EventsMock.abi.Events["KeeperRegistrar20AutoApproveAllowedSenderSet"].ID:
		return _EventsMock.ParseKeeperRegistrar20AutoApproveAllowedSenderSet(log)
	case _EventsMock.abi.Events["KeeperRegistrar20ConfigChanged"].ID:
		return _EventsMock.ParseKeeperRegistrar20ConfigChanged(log)
	case _EventsMock.abi.Events["KeeperRegistrar20OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistrar20OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistrar20OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistrar20OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistrar20RegistrationApproved"].ID:
		return _EventsMock.ParseKeeperRegistrar20RegistrationApproved(log)
	case _EventsMock.abi.Events["KeeperRegistrar20RegistrationRejected"].ID:
		return _EventsMock.ParseKeeperRegistrar20RegistrationRejected(log)
	case _EventsMock.abi.Events["KeeperRegistrar20RegistrationRequested"].ID:
		return _EventsMock.ParseKeeperRegistrar20RegistrationRequested(log)
	case _EventsMock.abi.Events["KeeperRegistrarAutoApproveAllowedSenderSet"].ID:
		return _EventsMock.ParseKeeperRegistrarAutoApproveAllowedSenderSet(log)
	case _EventsMock.abi.Events["KeeperRegistrarConfigChanged"].ID:
		return _EventsMock.ParseKeeperRegistrarConfigChanged(log)
	case _EventsMock.abi.Events["KeeperRegistrarOwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistrarOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistrarOwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistrarOwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistrarRegistrationApproved"].ID:
		return _EventsMock.ParseKeeperRegistrarRegistrationApproved(log)
	case _EventsMock.abi.Events["KeeperRegistrarRegistrationRejected"].ID:
		return _EventsMock.ParseKeeperRegistrarRegistrationRejected(log)
	case _EventsMock.abi.Events["KeeperRegistrarRegistrationRequested"].ID:
		return _EventsMock.ParseKeeperRegistrarRegistrationRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry12ConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistry12ConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistry12FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistry12FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistry12FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry12FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry12KeepersUpdated"].ID:
		return _EventsMock.ParseKeeperRegistry12KeepersUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistry12OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry12OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry12OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry12OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry12OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry12OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry12Paused"].ID:
		return _EventsMock.ParseKeeperRegistry12Paused(log)
	case _EventsMock.abi.Events["KeeperRegistry12PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry12PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry12PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry12PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry12PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry12PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry12Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistry12Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistry12UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistry12UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistry13ConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistry13ConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistry13FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistry13FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistry13FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry13FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry13KeepersUpdated"].ID:
		return _EventsMock.ParseKeeperRegistry13KeepersUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistry13OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry13OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry13OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry13OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry13OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry13OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry13Paused"].ID:
		return _EventsMock.ParseKeeperRegistry13Paused(log)
	case _EventsMock.abi.Events["KeeperRegistry13PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry13PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry13PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry13PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry13PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry13PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry13Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistry13Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistry13UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistry13UpkeepUnpaused(log)
	case _EventsMock.abi.Events["KeeperRegistry20CancelledUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistry20CancelledUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistry20ConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistry20ConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistry20FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistry20FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistry20FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry20FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry20InsufficientFundsUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistry20InsufficientFundsUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistry20OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry20OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry20OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry20OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry20OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry20OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry20Paused"].ID:
		return _EventsMock.ParseKeeperRegistry20Paused(log)
	case _EventsMock.abi.Events["KeeperRegistry20PayeesUpdated"].ID:
		return _EventsMock.ParseKeeperRegistry20PayeesUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistry20PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry20PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry20PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry20PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry20PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistry20PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistry20ReorgedUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistry20ReorgedUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistry20StaleUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistry20StaleUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistry20Transmitted"].ID:
		return _EventsMock.ParseKeeperRegistry20Transmitted(log)
	case _EventsMock.abi.Events["KeeperRegistry20Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistry20Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepOffchainConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepOffchainConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistry20UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistry20UpkeepUnpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13ConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistryBase13ConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistryBase13FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase13FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13KeepersUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryBase13KeepersUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase13OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase13OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase13OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13Paused"].ID:
		return _EventsMock.ParseKeeperRegistryBase13Paused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase13PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase13PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase13PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase13Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistryBase13UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase13UpkeepUnpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20CancelledUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryBase20CancelledUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistryBase20FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase20FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20InsufficientFundsUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryBase20InsufficientFundsUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase20OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase20OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase20OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20Paused"].ID:
		return _EventsMock.ParseKeeperRegistryBase20Paused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20PayeesUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryBase20PayeesUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase20PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase20PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryBase20PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20ReorgedUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryBase20ReorgedUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20StaleUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryBase20StaleUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase20Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepOffchainConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepOffchainConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistryBase20UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistryBase20UpkeepUnpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13ConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13ConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13KeepersUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13KeepersUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13Paused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13Paused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic13UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic13UpkeepUnpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20CancelledUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20CancelledUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20FundsAdded"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20FundsAdded(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20FundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20FundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20InsufficientFundsUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20InsufficientFundsUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20OwnerFundsWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20OwnerFundsWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20OwnershipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20OwnershipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20OwnershipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20Paused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20Paused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20PayeesUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20PayeesUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20PayeeshipTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20PayeeshipTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20PayeeshipTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20PayeeshipTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20PaymentWithdrawn"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20PaymentWithdrawn(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20ReorgedUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20ReorgedUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20StaleUpkeepReport"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20StaleUpkeepReport(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20Unpaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20Unpaused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepAdminTransferRequested"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepAdminTransferRequested(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepAdminTransferred"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepAdminTransferred(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepCanceled"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepCanceled(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepCheckDataUpdated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepCheckDataUpdated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepGasLimitSet"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepGasLimitSet(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepMigrated"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepMigrated(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepOffchainConfigSet"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepOffchainConfigSet(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepPaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepPaused(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepPerformed"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepPerformed(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepReceived"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepReceived(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepRegistered"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepRegistered(log)
	case _EventsMock.abi.Events["KeeperRegistryLogic20UpkeepUnpaused"].ID:
		return _EventsMock.ParseKeeperRegistryLogic20UpkeepUnpaused(log)
	case _EventsMock.abi.Events["LogEmitterLog1"].ID:
		return _EventsMock.ParseLogEmitterLog1(log)
	case _EventsMock.abi.Events["LogEmitterLog2"].ID:
		return _EventsMock.ParseLogEmitterLog2(log)
	case _EventsMock.abi.Events["LogEmitterLog3"].ID:
		return _EventsMock.ParseLogEmitterLog3(log)
	case _EventsMock.abi.Events["OCR2AbstractConfigSet"].ID:
		return _EventsMock.ParseOCR2AbstractConfigSet(log)
	case _EventsMock.abi.Events["OCR2AbstractTransmitted"].ID:
		return _EventsMock.ParseOCR2AbstractTransmitted(log)
	case _EventsMock.abi.Events["OCR2BaseUpgradeableConfigSet"].ID:
		return _EventsMock.ParseOCR2BaseUpgradeableConfigSet(log)
	case _EventsMock.abi.Events["OCR2BaseUpgradeableInitialized"].ID:
		return _EventsMock.ParseOCR2BaseUpgradeableInitialized(log)
	case _EventsMock.abi.Events["OCR2BaseUpgradeableOwnershipTransferRequested"].ID:
		return _EventsMock.ParseOCR2BaseUpgradeableOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["OCR2BaseUpgradeableOwnershipTransferred"].ID:
		return _EventsMock.ParseOCR2BaseUpgradeableOwnershipTransferred(log)
	case _EventsMock.abi.Events["OCR2BaseUpgradeableTransmitted"].ID:
		return _EventsMock.ParseOCR2BaseUpgradeableTransmitted(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleDecimalsUpdated"].ID:
		return _EventsMock.ParseOVMGasPriceOracleDecimalsUpdated(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleGasPriceUpdated"].ID:
		return _EventsMock.ParseOVMGasPriceOracleGasPriceUpdated(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleL1BaseFeeUpdated"].ID:
		return _EventsMock.ParseOVMGasPriceOracleL1BaseFeeUpdated(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleOverheadUpdated"].ID:
		return _EventsMock.ParseOVMGasPriceOracleOverheadUpdated(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleOwnershipTransferred"].ID:
		return _EventsMock.ParseOVMGasPriceOracleOwnershipTransferred(log)
	case _EventsMock.abi.Events["OVMGasPriceOracleScalarUpdated"].ID:
		return _EventsMock.ParseOVMGasPriceOracleScalarUpdated(log)
	case _EventsMock.abi.Events["OwnableOwnershipTransferred"].ID:
		return _EventsMock.ParseOwnableOwnershipTransferred(log)
	case _EventsMock.abi.Events["PausableUpgradeableInitialized"].ID:
		return _EventsMock.ParsePausableUpgradeableInitialized(log)
	case _EventsMock.abi.Events["PausableUpgradeablePaused"].ID:
		return _EventsMock.ParsePausableUpgradeablePaused(log)
	case _EventsMock.abi.Events["PausableUpgradeableUnpaused"].ID:
		return _EventsMock.ParsePausableUpgradeableUnpaused(log)
	case _EventsMock.abi.Events["PausablePaused"].ID:
		return _EventsMock.ParsePausablePaused(log)
	case _EventsMock.abi.Events["PausableUnpaused"].ID:
		return _EventsMock.ParsePausableUnpaused(log)
	case _EventsMock.abi.Events["ProxyAdminOwnershipTransferred"].ID:
		return _EventsMock.ParseProxyAdminOwnershipTransferred(log)
	case _EventsMock.abi.Events["TransparentUpgradeableProxyAdminChanged"].ID:
		return _EventsMock.ParseTransparentUpgradeableProxyAdminChanged(log)
	case _EventsMock.abi.Events["TransparentUpgradeableProxyBeaconUpgraded"].ID:
		return _EventsMock.ParseTransparentUpgradeableProxyBeaconUpgraded(log)
	case _EventsMock.abi.Events["TransparentUpgradeableProxyUpgraded"].ID:
		return _EventsMock.ParseTransparentUpgradeableProxyUpgraded(log)
	case _EventsMock.abi.Events["VRFConsumerBaseV2UpgradeableInitialized"].ID:
		return _EventsMock.ParseVRFConsumerBaseV2UpgradeableInitialized(log)
	case _EventsMock.abi.Events["VRFConsumerV2UpgradeableExampleInitialized"].ID:
		return _EventsMock.ParseVRFConsumerV2UpgradeableExampleInitialized(log)
	case _EventsMock.abi.Events["VRFCoordinatorMockRandomnessRequest"].ID:
		return _EventsMock.ParseVRFCoordinatorMockRandomnessRequest(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperConfigSet"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperConfigSet(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperFundsRecovered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperFundsRecovered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperOwnershipTransferred"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperOwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperProvingKeyDeregistered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperProvingKeyDeregistered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperProvingKeyRegistered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperProvingKeyRegistered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperRandomWordsFulfilled"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperRandomWordsFulfilled(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperRandomWordsRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperRandomWordsRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionCanceled"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionCanceled(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionConsumerAdded"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionConsumerRemoved"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionCreated"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionCreated(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionFunded"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionFunded(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2TestHelperSubscriptionOwnerTransferred"].ID:
		return _EventsMock.ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2ConfigSet"].ID:
		return _EventsMock.ParseVRFCoordinatorV2ConfigSet(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2FundsRecovered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2FundsRecovered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2OwnershipTransferRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2OwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2OwnershipTransferred"].ID:
		return _EventsMock.ParseVRFCoordinatorV2OwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2ProvingKeyDeregistered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2ProvingKeyDeregistered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2ProvingKeyRegistered"].ID:
		return _EventsMock.ParseVRFCoordinatorV2ProvingKeyRegistered(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2RandomWordsFulfilled"].ID:
		return _EventsMock.ParseVRFCoordinatorV2RandomWordsFulfilled(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2RandomWordsRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2RandomWordsRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionCanceled"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionCanceled(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionConsumerAdded"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionConsumerAdded(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionConsumerRemoved"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionConsumerRemoved(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionCreated"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionCreated(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionFunded"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionFunded(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionOwnerTransferRequested"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionOwnerTransferRequested(log)
	case _EventsMock.abi.Events["VRFCoordinatorV2SubscriptionOwnerTransferred"].ID:
		return _EventsMock.ParseVRFCoordinatorV2SubscriptionOwnerTransferred(log)
	case _EventsMock.abi.Events["VRFLoadTestExternalSubOwnerOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVRFLoadTestExternalSubOwnerOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VRFLoadTestExternalSubOwnerOwnershipTransferred"].ID:
		return _EventsMock.ParseVRFLoadTestExternalSubOwnerOwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFV2ProxyAdminOwnershipTransferred"].ID:
		return _EventsMock.ParseVRFV2ProxyAdminOwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFV2TransparentUpgradeableProxyAdminChanged"].ID:
		return _EventsMock.ParseVRFV2TransparentUpgradeableProxyAdminChanged(log)
	case _EventsMock.abi.Events["VRFV2TransparentUpgradeableProxyBeaconUpgraded"].ID:
		return _EventsMock.ParseVRFV2TransparentUpgradeableProxyBeaconUpgraded(log)
	case _EventsMock.abi.Events["VRFV2TransparentUpgradeableProxyUpgraded"].ID:
		return _EventsMock.ParseVRFV2TransparentUpgradeableProxyUpgraded(log)
	case _EventsMock.abi.Events["VRFV2WrapperConsumerExampleOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVRFV2WrapperConsumerExampleOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VRFV2WrapperConsumerExampleOwnershipTransferred"].ID:
		return _EventsMock.ParseVRFV2WrapperConsumerExampleOwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFV2WrapperConsumerExampleWrappedRequestFulfilled"].ID:
		return _EventsMock.ParseVRFV2WrapperConsumerExampleWrappedRequestFulfilled(log)
	case _EventsMock.abi.Events["VRFV2WrapperConsumerExampleWrapperRequestMade"].ID:
		return _EventsMock.ParseVRFV2WrapperConsumerExampleWrapperRequestMade(log)
	case _EventsMock.abi.Events["VRFV2WrapperOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVRFV2WrapperOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VRFV2WrapperOwnershipTransferred"].ID:
		return _EventsMock.ParseVRFV2WrapperOwnershipTransferred(log)
	case _EventsMock.abi.Events["VRFV2WrapperWrapperFulfillmentFailed"].ID:
		return _EventsMock.ParseVRFV2WrapperWrapperFulfillmentFailed(log)
	case _EventsMock.abi.Events["VerifierProxyAccessControllerSet"].ID:
		return _EventsMock.ParseVerifierProxyAccessControllerSet(log)
	case _EventsMock.abi.Events["VerifierProxyOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVerifierProxyOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VerifierProxyOwnershipTransferred"].ID:
		return _EventsMock.ParseVerifierProxyOwnershipTransferred(log)
	case _EventsMock.abi.Events["VerifierProxyVerifierSet"].ID:
		return _EventsMock.ParseVerifierProxyVerifierSet(log)
	case _EventsMock.abi.Events["VerifierProxyVerifierUnset"].ID:
		return _EventsMock.ParseVerifierProxyVerifierUnset(log)
	case _EventsMock.abi.Events["VerifierConfigActivated"].ID:
		return _EventsMock.ParseVerifierConfigActivated(log)
	case _EventsMock.abi.Events["VerifierConfigDeactivated"].ID:
		return _EventsMock.ParseVerifierConfigDeactivated(log)
	case _EventsMock.abi.Events["VerifierConfigSet"].ID:
		return _EventsMock.ParseVerifierConfigSet(log)
	case _EventsMock.abi.Events["VerifierOwnershipTransferRequested"].ID:
		return _EventsMock.ParseVerifierOwnershipTransferRequested(log)
	case _EventsMock.abi.Events["VerifierOwnershipTransferred"].ID:
		return _EventsMock.ParseVerifierOwnershipTransferred(log)
	case _EventsMock.abi.Events["VerifierReportVerified"].ID:
		return _EventsMock.ParseVerifierReportVerified(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (EventsMockAggregatorInterfaceAnswerUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAggregatorInterfaceNewRound) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAggregatorV2V3InterfaceAnswerUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAggregatorV2V3InterfaceNewRound) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockArbSysL2ToL1Transaction) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockArbSysL2ToL1Tx) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockArbSysSendMerkleUpdate) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAuthorizedOriginReceiverUpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockAuthorizedReceiverAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockBatchVRFCoordinatorV2ErrorReturned) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockBatchVRFCoordinatorV2RawErrorReturned) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockChainlinkClientChainlinkCancelled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockChainlinkClientChainlinkFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockChainlinkClientChainlinkRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerUpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerUpgradeableOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerWithProposalOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockConfirmedOwnerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockContextUpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepFactoryNewCronUpkeepCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepFactoryOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepFactoryOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepCronJobCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepCronJobDeleted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepCronJobExecuted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepCronJobUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockCronUpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockENSInterfaceNewOwner) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockENSInterfaceNewResolver) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockENSInterfaceNewTTL) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockENSInterfaceTransfer) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967ProxyAdminChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967ProxyBeaconUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967ProxyUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967UpgradeAdminChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967UpgradeBeaconUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockERC1967UpgradeUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitBillingEnd) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitBillingStart) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitFundsRecovered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitRequestTimedOut) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryWithInitUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryBillingEnd) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryBillingStart) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryFundsRecovered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryRequestTimedOut) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsBillingRegistryUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientExampleOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientExampleOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientExampleRequestFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientExampleRequestSent) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientRequestFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsClientRequestSent) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitAuthorizedSendersActive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitInvalidRequestID) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitOracleRequest) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitOracleResponse) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitTransmitted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitUserCallbackError) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleWithInitUserCallbackRawError) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleAuthorizedSendersActive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleAuthorizedSendersDeactive) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleInvalidRequestID) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleOracleRequest) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleOracleResponse) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleTransmitted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleUserCallbackError) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockFunctionsOracleUserCallbackRawError) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockInitializableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20ConfigChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20RegistrationApproved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20RegistrationRejected) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrar20RegistrationRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarAutoApproveAllowedSenderSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarConfigChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarRegistrationApproved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarRegistrationRejected) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistrarRegistrationRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12KeepersUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry12UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13KeepersUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry13UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20CancelledUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20InsufficientFundsUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20PayeesUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20ReorgedUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20StaleUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20Transmitted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepOffchainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistry20UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13KeepersUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase13UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20CancelledUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20PayeesUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20ReorgedUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20StaleUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryBase20UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13KeepersUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic13UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20CancelledUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20FundsAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20FundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20Paused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20PayeesUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20PaymentWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20ReorgedUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20StaleUpkeepReport) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20Unpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepGasLimitSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepMigrated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepPaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepPerformed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepReceived) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockKeeperRegistryLogic20UpkeepUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockLogEmitterLog1) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockLogEmitterLog2) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockLogEmitterLog3) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2AbstractConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2AbstractTransmitted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2BaseUpgradeableConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2BaseUpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2BaseUpgradeableOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2BaseUpgradeableOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOCR2BaseUpgradeableTransmitted) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleDecimalsUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleGasPriceUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleL1BaseFeeUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleOverheadUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOVMGasPriceOracleScalarUpdated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockOwnableOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockPausableUpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockPausableUpgradeablePaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockPausableUpgradeableUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockPausablePaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockPausableUnpaused) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockProxyAdminOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockTransparentUpgradeableProxyAdminChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockTransparentUpgradeableProxyBeaconUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockTransparentUpgradeableProxyUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFConsumerBaseV2UpgradeableInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFConsumerV2UpgradeableExampleInitialized) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorMockRandomnessRequest) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperFundsRecovered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2FundsRecovered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2ProvingKeyDeregistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2ProvingKeyRegistered) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2RandomWordsRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2ProxyAdminOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2TransparentUpgradeableProxyAdminChanged) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2TransparentUpgradeableProxyUpgraded) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVRFV2WrapperWrapperFulfillmentFailed) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierProxyAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierProxyOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierProxyOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierProxyVerifierSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierProxyVerifierUnset) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierConfigActivated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierConfigDeactivated) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (EventsMockVerifierReportVerified) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (_EventsMock *EventsMock) Address() common.Address {
	return _EventsMock.address
}

type EventsMockInterface interface {
	EmitAggregatorInterfaceAnswerUpdated(opts *bind.TransactOpts, current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error)

	EmitAggregatorInterfaceNewRound(opts *bind.TransactOpts, roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error)

	EmitAggregatorV2V3InterfaceAnswerUpdated(opts *bind.TransactOpts, current *big.Int, roundId *big.Int, updatedAt *big.Int) (*types.Transaction, error)

	EmitAggregatorV2V3InterfaceNewRound(opts *bind.TransactOpts, roundId *big.Int, startedBy common.Address, startedAt *big.Int) (*types.Transaction, error)

	EmitArbSysL2ToL1Transaction(opts *bind.TransactOpts, caller common.Address, destination common.Address, uniqueId *big.Int, batchNumber *big.Int, indexInBatch *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error)

	EmitArbSysL2ToL1Tx(opts *bind.TransactOpts, caller common.Address, destination common.Address, hash *big.Int, position *big.Int, arbBlockNum *big.Int, ethBlockNum *big.Int, timestamp *big.Int, callvalue *big.Int, data []byte) (*types.Transaction, error)

	EmitArbSysSendMerkleUpdate(opts *bind.TransactOpts, reserved *big.Int, hash [32]byte, position *big.Int) (*types.Transaction, error)

	EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitAuthorizedReceiverAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitBatchVRFCoordinatorV2ErrorReturned(opts *bind.TransactOpts, requestId *big.Int, reason string) (*types.Transaction, error)

	EmitBatchVRFCoordinatorV2RawErrorReturned(opts *bind.TransactOpts, requestId *big.Int, lowLevelData []byte) (*types.Transaction, error)

	EmitChainlinkClientChainlinkCancelled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitChainlinkClientChainlinkFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitChainlinkClientChainlinkRequested(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitConfirmedOwnerUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitConfirmedOwnerOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitConfirmedOwnerOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitContextUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.TransactOpts, upkeep common.Address, owner common.Address) (*types.Transaction, error)

	EmitCronUpkeepFactoryOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitCronUpkeepFactoryOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitCronUpkeepCronJobCreated(opts *bind.TransactOpts, id *big.Int, target common.Address, handler []byte) (*types.Transaction, error)

	EmitCronUpkeepCronJobDeleted(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitCronUpkeepCronJobExecuted(opts *bind.TransactOpts, id *big.Int, timestamp *big.Int) (*types.Transaction, error)

	EmitCronUpkeepCronJobUpdated(opts *bind.TransactOpts, id *big.Int, target common.Address, handler []byte) (*types.Transaction, error)

	EmitCronUpkeepOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitCronUpkeepOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitCronUpkeepPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitCronUpkeepUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitENSInterfaceNewOwner(opts *bind.TransactOpts, node [32]byte, label [32]byte, owner common.Address) (*types.Transaction, error)

	EmitENSInterfaceNewResolver(opts *bind.TransactOpts, node [32]byte, resolver common.Address) (*types.Transaction, error)

	EmitENSInterfaceNewTTL(opts *bind.TransactOpts, node [32]byte, ttl uint64) (*types.Transaction, error)

	EmitENSInterfaceTransfer(opts *bind.TransactOpts, node [32]byte, owner common.Address) (*types.Transaction, error)

	EmitERC1967ProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error)

	EmitERC1967ProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error)

	EmitERC1967ProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error)

	EmitERC1967UpgradeAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error)

	EmitERC1967UpgradeBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error)

	EmitERC1967UpgradeUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitBillingEnd(opts *bind.TransactOpts, requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitBillingStart(opts *bind.TransactOpts, requestId [32]byte, commitment EventsMockFunctionsBillingRegistryWithInitCommitment) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitConfigSet(opts *bind.TransactOpts, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.TransactOpts, subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.TransactOpts, subscriptionId uint64, owner common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.TransactOpts, subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryWithInitUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryBillingEnd(opts *bind.TransactOpts, requestId [32]byte, subscriptionId uint64, signerPayment *big.Int, transmitterPayment *big.Int, totalCost *big.Int, success bool) (*types.Transaction, error)

	EmitFunctionsBillingRegistryBillingStart(opts *bind.TransactOpts, requestId [32]byte, commitment EventsMockFunctionsBillingRegistryCommitment) (*types.Transaction, error)

	EmitFunctionsBillingRegistryConfigSet(opts *bind.TransactOpts, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation *big.Int, fallbackWeiPerUnitLink *big.Int, gasOverhead uint32) (*types.Transaction, error)

	EmitFunctionsBillingRegistryFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistryInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryPaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryRequestTimedOut(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionCanceled(opts *bind.TransactOpts, subscriptionId uint64, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.TransactOpts, subscriptionId uint64, consumer common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionCreated(opts *bind.TransactOpts, subscriptionId uint64, owner common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionFunded(opts *bind.TransactOpts, subscriptionId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.TransactOpts, subscriptionId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsBillingRegistryUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsClientExampleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsClientExampleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsClientExampleRequestFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitFunctionsClientExampleRequestSent(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitFunctionsClientRequestFulfilled(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitFunctionsClientRequestSent(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error)

	EmitFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsOracleWithInitConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitFunctionsOracleWithInitInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitFunctionsOracleWithInitInvalidRequestID(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsOracleWithInitOracleRequest(opts *bind.TransactOpts, requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error)

	EmitFunctionsOracleWithInitOracleResponse(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsOracleWithInitOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsOracleWithInitTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error)

	EmitFunctionsOracleWithInitUserCallbackError(opts *bind.TransactOpts, requestId [32]byte, reason string) (*types.Transaction, error)

	EmitFunctionsOracleWithInitUserCallbackRawError(opts *bind.TransactOpts, requestId [32]byte, lowLevelData []byte) (*types.Transaction, error)

	EmitFunctionsOracleAuthorizedSendersActive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsOracleAuthorizedSendersChanged(opts *bind.TransactOpts, senders []common.Address, changedBy common.Address) (*types.Transaction, error)

	EmitFunctionsOracleAuthorizedSendersDeactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitFunctionsOracleConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitFunctionsOracleInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitFunctionsOracleInvalidRequestID(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsOracleOracleRequest(opts *bind.TransactOpts, requestId [32]byte, requestingContract common.Address, requestInitiator common.Address, subscriptionId uint64, subscriptionOwner common.Address, data []byte) (*types.Transaction, error)

	EmitFunctionsOracleOracleResponse(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error)

	EmitFunctionsOracleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsOracleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitFunctionsOracleTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error)

	EmitFunctionsOracleUserCallbackError(opts *bind.TransactOpts, requestId [32]byte, reason string) (*types.Transaction, error)

	EmitFunctionsOracleUserCallbackRawError(opts *bind.TransactOpts, requestId [32]byte, lowLevelData []byte) (*types.Transaction, error)

	EmitInitializableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.TransactOpts, senderAddress common.Address, allowed bool) (*types.Transaction, error)

	EmitKeeperRegistrar20ConfigChanged(opts *bind.TransactOpts, autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error)

	EmitKeeperRegistrar20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistrar20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistrar20RegistrationApproved(opts *bind.TransactOpts, hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error)

	EmitKeeperRegistrar20RegistrationRejected(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error)

	EmitKeeperRegistrar20RegistrationRequested(opts *bind.TransactOpts, hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.TransactOpts, senderAddress common.Address, allowed bool) (*types.Transaction, error)

	EmitKeeperRegistrarConfigChanged(opts *bind.TransactOpts, autoApproveConfigType uint8, autoApproveMaxAllowed uint32, keeperRegistry common.Address, minLINKJuels *big.Int) (*types.Transaction, error)

	EmitKeeperRegistrarOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistrarOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistrarRegistrationApproved(opts *bind.TransactOpts, hash [32]byte, displayName string, upkeepId *big.Int) (*types.Transaction, error)

	EmitKeeperRegistrarRegistrationRejected(opts *bind.TransactOpts, hash [32]byte) (*types.Transaction, error)

	EmitKeeperRegistrarRegistrationRequested(opts *bind.TransactOpts, hash [32]byte, name string, encryptedEmail []byte, upkeepContract common.Address, gasLimit uint32, adminAddress common.Address, checkData []byte, amount *big.Int, source uint8) (*types.Transaction, error)

	EmitKeeperRegistry12ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistry12Config) (*types.Transaction, error)

	EmitKeeperRegistry12FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry12FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry12OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistry12UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistry13Config) (*types.Transaction, error)

	EmitKeeperRegistry13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistry13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20ConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitKeeperRegistry20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20Transmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error)

	EmitKeeperRegistry20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistry20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistryBase13Config) (*types.Transaction, error)

	EmitKeeperRegistryBase13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistryBase20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13ConfigSet(opts *bind.TransactOpts, config EventsMockKeeperRegistryLogic13Config) (*types.Transaction, error)

	EmitKeeperRegistryLogic13FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic13FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13KeepersUpdated(opts *bind.TransactOpts, keepers []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13PayeeshipTransferred(opts *bind.TransactOpts, keeper common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13PaymentWithdrawn(opts *bind.TransactOpts, keeper common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, from common.Address, payment *big.Int, performData []byte) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic13UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20FundsAdded(opts *bind.TransactOpts, id *big.Int, from common.Address, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20FundsWithdrawn(opts *bind.TransactOpts, id *big.Int, amount *big.Int, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20Paused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20PayeesUpdated(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20PayeeshipTransferred(opts *bind.TransactOpts, transmitter common.Address, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20PaymentWithdrawn(opts *bind.TransactOpts, transmitter common.Address, amount *big.Int, to common.Address, payee common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20StaleUpkeepReport(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20Unpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.TransactOpts, id *big.Int, from common.Address, to common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepCanceled(opts *bind.TransactOpts, id *big.Int, atBlockHeight uint64) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.TransactOpts, id *big.Int, gasLimit *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepMigrated(opts *bind.TransactOpts, id *big.Int, remainingBalance *big.Int, destination common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.TransactOpts, id *big.Int, offchainConfig []byte) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepPaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepPerformed(opts *bind.TransactOpts, id *big.Int, success bool, checkBlockNumber uint32, gasUsed *big.Int, gasOverhead *big.Int, totalPayment *big.Int) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepReceived(opts *bind.TransactOpts, id *big.Int, startingBalance *big.Int, importedFrom common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepRegistered(opts *bind.TransactOpts, id *big.Int, executeGas uint32, admin common.Address) (*types.Transaction, error)

	EmitKeeperRegistryLogic20UpkeepUnpaused(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error)

	EmitLogEmitterLog1(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitLogEmitterLog2(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitLogEmitterLog3(opts *bind.TransactOpts, param1 string) (*types.Transaction, error)

	EmitOCR2AbstractConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitOCR2AbstractTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error)

	EmitOCR2BaseUpgradeableConfigSet(opts *bind.TransactOpts, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitOCR2BaseUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitOCR2BaseUpgradeableOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitOCR2BaseUpgradeableTransmitted(opts *bind.TransactOpts, configDigest [32]byte, epoch uint32) (*types.Transaction, error)

	EmitOVMGasPriceOracleDecimalsUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitOVMGasPriceOracleGasPriceUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitOVMGasPriceOracleOverheadUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitOVMGasPriceOracleOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error)

	EmitOVMGasPriceOracleScalarUpdated(opts *bind.TransactOpts, param1 *big.Int) (*types.Transaction, error)

	EmitOwnableOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error)

	EmitPausableUpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitPausableUpgradeablePaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitPausableUpgradeableUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitPausablePaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitPausableUnpaused(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	EmitProxyAdminOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error)

	EmitTransparentUpgradeableProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error)

	EmitTransparentUpgradeableProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error)

	EmitTransparentUpgradeableProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error)

	EmitVRFConsumerBaseV2UpgradeableInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitVRFConsumerV2UpgradeableExampleInitialized(opts *bind.TransactOpts, version uint8) (*types.Transaction, error)

	EmitVRFCoordinatorMockRandomnessRequest(opts *bind.TransactOpts, sender common.Address, keyHash [32]byte, seed *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperConfigSet(opts *bind.TransactOpts, minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2TestHelperFeeConfig) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.TransactOpts, requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.TransactOpts, keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.TransactOpts, subId uint64, owner common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.TransactOpts, subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2ConfigSet(opts *bind.TransactOpts, minimumRequestConfirmations uint16, maxGasLimit uint32, stalenessSeconds uint32, gasAfterPaymentCalculation uint32, fallbackWeiPerUnitLink *big.Int, feeConfig EventsMockVRFCoordinatorV2FeeConfig) (*types.Transaction, error)

	EmitVRFCoordinatorV2FundsRecovered(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2OwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2OwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2ProvingKeyRegistered(opts *bind.TransactOpts, keyHash [32]byte, oracle common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2RandomWordsFulfilled(opts *bind.TransactOpts, requestId *big.Int, outputSeed *big.Int, payment *big.Int, success bool) (*types.Transaction, error)

	EmitVRFCoordinatorV2RandomWordsRequested(opts *bind.TransactOpts, keyHash [32]byte, requestId *big.Int, preSeed *big.Int, subId uint64, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint32, sender common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionCanceled(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionCreated(opts *bind.TransactOpts, subId uint64, owner common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionFunded(opts *bind.TransactOpts, subId uint64, oldBalance *big.Int, newBalance *big.Int) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.TransactOpts, subId uint64, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFV2ProxyAdminOwnershipTransferred(opts *bind.TransactOpts, previousOwner common.Address, newOwner common.Address) (*types.Transaction, error)

	EmitVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.TransactOpts, previousAdmin common.Address, newAdmin common.Address) (*types.Transaction, error)

	EmitVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.TransactOpts, beacon common.Address) (*types.Transaction, error)

	EmitVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.TransactOpts, implementation common.Address) (*types.Transaction, error)

	EmitVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int, payment *big.Int) (*types.Transaction, error)

	EmitVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.TransactOpts, requestId *big.Int, paid *big.Int) (*types.Transaction, error)

	EmitVRFV2WrapperOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFV2WrapperOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVRFV2WrapperWrapperFulfillmentFailed(opts *bind.TransactOpts, requestId *big.Int, consumer common.Address) (*types.Transaction, error)

	EmitVerifierProxyAccessControllerSet(opts *bind.TransactOpts, oldAccessController common.Address, newAccessController common.Address) (*types.Transaction, error)

	EmitVerifierProxyOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVerifierProxyOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVerifierProxyVerifierSet(opts *bind.TransactOpts, oldConfigDigest [32]byte, newConfigDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error)

	EmitVerifierProxyVerifierUnset(opts *bind.TransactOpts, configDigest [32]byte, verifierAddress common.Address) (*types.Transaction, error)

	EmitVerifierConfigActivated(opts *bind.TransactOpts, feedId [32]byte, configDigest [32]byte) (*types.Transaction, error)

	EmitVerifierConfigDeactivated(opts *bind.TransactOpts, feedId [32]byte, configDigest [32]byte) (*types.Transaction, error)

	EmitVerifierConfigSet(opts *bind.TransactOpts, feedId [32]byte, previousConfigBlockNumber uint32, configDigest [32]byte, configCount uint64, signers []common.Address, offchainTransmitters [][32]byte, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	EmitVerifierOwnershipTransferRequested(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVerifierOwnershipTransferred(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error)

	EmitVerifierReportVerified(opts *bind.TransactOpts, feedId [32]byte, reportHash [32]byte, requester common.Address) (*types.Transaction, error)

	FilterAggregatorInterfaceAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*EventsMockAggregatorInterfaceAnswerUpdatedIterator, error)

	WatchAggregatorInterfaceAnswerUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorInterfaceAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error)

	ParseAggregatorInterfaceAnswerUpdated(log types.Log) (*EventsMockAggregatorInterfaceAnswerUpdated, error)

	FilterAggregatorInterfaceNewRound(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*EventsMockAggregatorInterfaceNewRoundIterator, error)

	WatchAggregatorInterfaceNewRound(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorInterfaceNewRound, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error)

	ParseAggregatorInterfaceNewRound(log types.Log) (*EventsMockAggregatorInterfaceNewRound, error)

	FilterAggregatorV2V3InterfaceAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*EventsMockAggregatorV2V3InterfaceAnswerUpdatedIterator, error)

	WatchAggregatorV2V3InterfaceAnswerUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorV2V3InterfaceAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error)

	ParseAggregatorV2V3InterfaceAnswerUpdated(log types.Log) (*EventsMockAggregatorV2V3InterfaceAnswerUpdated, error)

	FilterAggregatorV2V3InterfaceNewRound(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*EventsMockAggregatorV2V3InterfaceNewRoundIterator, error)

	WatchAggregatorV2V3InterfaceNewRound(opts *bind.WatchOpts, sink chan<- *EventsMockAggregatorV2V3InterfaceNewRound, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error)

	ParseAggregatorV2V3InterfaceNewRound(log types.Log) (*EventsMockAggregatorV2V3InterfaceNewRound, error)

	FilterArbSysL2ToL1Transaction(opts *bind.FilterOpts, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (*EventsMockArbSysL2ToL1TransactionIterator, error)

	WatchArbSysL2ToL1Transaction(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysL2ToL1Transaction, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (event.Subscription, error)

	ParseArbSysL2ToL1Transaction(log types.Log) (*EventsMockArbSysL2ToL1Transaction, error)

	FilterArbSysL2ToL1Tx(opts *bind.FilterOpts, destination []common.Address, hash []*big.Int, position []*big.Int) (*EventsMockArbSysL2ToL1TxIterator, error)

	WatchArbSysL2ToL1Tx(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysL2ToL1Tx, destination []common.Address, hash []*big.Int, position []*big.Int) (event.Subscription, error)

	ParseArbSysL2ToL1Tx(log types.Log) (*EventsMockArbSysL2ToL1Tx, error)

	FilterArbSysSendMerkleUpdate(opts *bind.FilterOpts, reserved []*big.Int, hash [][32]byte, position []*big.Int) (*EventsMockArbSysSendMerkleUpdateIterator, error)

	WatchArbSysSendMerkleUpdate(opts *bind.WatchOpts, sink chan<- *EventsMockArbSysSendMerkleUpdate, reserved []*big.Int, hash [][32]byte, position []*big.Int) (event.Subscription, error)

	ParseArbSysSendMerkleUpdate(log types.Log) (*EventsMockArbSysSendMerkleUpdate, error)

	FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActiveIterator, error)

	WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive) (event.Subscription, error)

	ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersActive, error)

	FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChangedIterator, error)

	WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged) (event.Subscription, error)

	ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersChanged, error)

	FilterAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactiveIterator, error)

	WatchAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive) (event.Subscription, error)

	ParseAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableAuthorizedSendersDeactive, error)

	FilterAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockAuthorizedOriginReceiverUpgradeableInitializedIterator, error)

	WatchAuthorizedOriginReceiverUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedOriginReceiverUpgradeableInitialized) (event.Subscription, error)

	ParseAuthorizedOriginReceiverUpgradeableInitialized(log types.Log) (*EventsMockAuthorizedOriginReceiverUpgradeableInitialized, error)

	FilterAuthorizedReceiverAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockAuthorizedReceiverAuthorizedSendersChangedIterator, error)

	WatchAuthorizedReceiverAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockAuthorizedReceiverAuthorizedSendersChanged) (event.Subscription, error)

	ParseAuthorizedReceiverAuthorizedSendersChanged(log types.Log) (*EventsMockAuthorizedReceiverAuthorizedSendersChanged, error)

	FilterBatchVRFCoordinatorV2ErrorReturned(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockBatchVRFCoordinatorV2ErrorReturnedIterator, error)

	WatchBatchVRFCoordinatorV2ErrorReturned(opts *bind.WatchOpts, sink chan<- *EventsMockBatchVRFCoordinatorV2ErrorReturned, requestId []*big.Int) (event.Subscription, error)

	ParseBatchVRFCoordinatorV2ErrorReturned(log types.Log) (*EventsMockBatchVRFCoordinatorV2ErrorReturned, error)

	FilterBatchVRFCoordinatorV2RawErrorReturned(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockBatchVRFCoordinatorV2RawErrorReturnedIterator, error)

	WatchBatchVRFCoordinatorV2RawErrorReturned(opts *bind.WatchOpts, sink chan<- *EventsMockBatchVRFCoordinatorV2RawErrorReturned, requestId []*big.Int) (event.Subscription, error)

	ParseBatchVRFCoordinatorV2RawErrorReturned(log types.Log) (*EventsMockBatchVRFCoordinatorV2RawErrorReturned, error)

	FilterChainlinkClientChainlinkCancelled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkCancelledIterator, error)

	WatchChainlinkClientChainlinkCancelled(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkCancelled, id [][32]byte) (event.Subscription, error)

	ParseChainlinkClientChainlinkCancelled(log types.Log) (*EventsMockChainlinkClientChainlinkCancelled, error)

	FilterChainlinkClientChainlinkFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkFulfilledIterator, error)

	WatchChainlinkClientChainlinkFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkFulfilled, id [][32]byte) (event.Subscription, error)

	ParseChainlinkClientChainlinkFulfilled(log types.Log) (*EventsMockChainlinkClientChainlinkFulfilled, error)

	FilterChainlinkClientChainlinkRequested(opts *bind.FilterOpts, id [][32]byte) (*EventsMockChainlinkClientChainlinkRequestedIterator, error)

	WatchChainlinkClientChainlinkRequested(opts *bind.WatchOpts, sink chan<- *EventsMockChainlinkClientChainlinkRequested, id [][32]byte) (event.Subscription, error)

	ParseChainlinkClientChainlinkRequested(log types.Log) (*EventsMockChainlinkClientChainlinkRequested, error)

	FilterConfirmedOwnerUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockConfirmedOwnerUpgradeableInitializedIterator, error)

	WatchConfirmedOwnerUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableInitialized) (event.Subscription, error)

	ParseConfirmedOwnerUpgradeableInitialized(log types.Log) (*EventsMockConfirmedOwnerUpgradeableInitialized, error)

	FilterConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequestedIterator, error)

	WatchConfirmedOwnerUpgradeableOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerUpgradeableOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferRequested, error)

	FilterConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferredIterator, error)

	WatchConfirmedOwnerUpgradeableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerUpgradeableOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerUpgradeableOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerUpgradeableOwnershipTransferred, error)

	FilterConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferRequestedIterator, error)

	WatchConfirmedOwnerWithProposalOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerWithProposalOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferRequested, error)

	FilterConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferredIterator, error)

	WatchConfirmedOwnerWithProposalOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerWithProposalOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerWithProposalOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerWithProposalOwnershipTransferred, error)

	FilterConfirmedOwnerOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerOwnershipTransferRequestedIterator, error)

	WatchConfirmedOwnerOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerOwnershipTransferRequested(log types.Log) (*EventsMockConfirmedOwnerOwnershipTransferRequested, error)

	FilterConfirmedOwnerOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockConfirmedOwnerOwnershipTransferredIterator, error)

	WatchConfirmedOwnerOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockConfirmedOwnerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseConfirmedOwnerOwnershipTransferred(log types.Log) (*EventsMockConfirmedOwnerOwnershipTransferred, error)

	FilterContextUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockContextUpgradeableInitializedIterator, error)

	WatchContextUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockContextUpgradeableInitialized) (event.Subscription, error)

	ParseContextUpgradeableInitialized(log types.Log) (*EventsMockContextUpgradeableInitialized, error)

	FilterCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.FilterOpts) (*EventsMockCronUpkeepFactoryNewCronUpkeepCreatedIterator, error)

	WatchCronUpkeepFactoryNewCronUpkeepCreated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryNewCronUpkeepCreated) (event.Subscription, error)

	ParseCronUpkeepFactoryNewCronUpkeepCreated(log types.Log) (*EventsMockCronUpkeepFactoryNewCronUpkeepCreated, error)

	FilterCronUpkeepFactoryOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepFactoryOwnershipTransferRequestedIterator, error)

	WatchCronUpkeepFactoryOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseCronUpkeepFactoryOwnershipTransferRequested(log types.Log) (*EventsMockCronUpkeepFactoryOwnershipTransferRequested, error)

	FilterCronUpkeepFactoryOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepFactoryOwnershipTransferredIterator, error)

	WatchCronUpkeepFactoryOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepFactoryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseCronUpkeepFactoryOwnershipTransferred(log types.Log) (*EventsMockCronUpkeepFactoryOwnershipTransferred, error)

	FilterCronUpkeepCronJobCreated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobCreatedIterator, error)

	WatchCronUpkeepCronJobCreated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobCreated, id []*big.Int) (event.Subscription, error)

	ParseCronUpkeepCronJobCreated(log types.Log) (*EventsMockCronUpkeepCronJobCreated, error)

	FilterCronUpkeepCronJobDeleted(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobDeletedIterator, error)

	WatchCronUpkeepCronJobDeleted(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobDeleted, id []*big.Int) (event.Subscription, error)

	ParseCronUpkeepCronJobDeleted(log types.Log) (*EventsMockCronUpkeepCronJobDeleted, error)

	FilterCronUpkeepCronJobExecuted(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobExecutedIterator, error)

	WatchCronUpkeepCronJobExecuted(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobExecuted, id []*big.Int) (event.Subscription, error)

	ParseCronUpkeepCronJobExecuted(log types.Log) (*EventsMockCronUpkeepCronJobExecuted, error)

	FilterCronUpkeepCronJobUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockCronUpkeepCronJobUpdatedIterator, error)

	WatchCronUpkeepCronJobUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepCronJobUpdated, id []*big.Int) (event.Subscription, error)

	ParseCronUpkeepCronJobUpdated(log types.Log) (*EventsMockCronUpkeepCronJobUpdated, error)

	FilterCronUpkeepOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepOwnershipTransferRequestedIterator, error)

	WatchCronUpkeepOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseCronUpkeepOwnershipTransferRequested(log types.Log) (*EventsMockCronUpkeepOwnershipTransferRequested, error)

	FilterCronUpkeepOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockCronUpkeepOwnershipTransferredIterator, error)

	WatchCronUpkeepOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseCronUpkeepOwnershipTransferred(log types.Log) (*EventsMockCronUpkeepOwnershipTransferred, error)

	FilterCronUpkeepPaused(opts *bind.FilterOpts) (*EventsMockCronUpkeepPausedIterator, error)

	WatchCronUpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepPaused) (event.Subscription, error)

	ParseCronUpkeepPaused(log types.Log) (*EventsMockCronUpkeepPaused, error)

	FilterCronUpkeepUnpaused(opts *bind.FilterOpts) (*EventsMockCronUpkeepUnpausedIterator, error)

	WatchCronUpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockCronUpkeepUnpaused) (event.Subscription, error)

	ParseCronUpkeepUnpaused(log types.Log) (*EventsMockCronUpkeepUnpaused, error)

	FilterENSInterfaceNewOwner(opts *bind.FilterOpts, node [][32]byte, label [][32]byte) (*EventsMockENSInterfaceNewOwnerIterator, error)

	WatchENSInterfaceNewOwner(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewOwner, node [][32]byte, label [][32]byte) (event.Subscription, error)

	ParseENSInterfaceNewOwner(log types.Log) (*EventsMockENSInterfaceNewOwner, error)

	FilterENSInterfaceNewResolver(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceNewResolverIterator, error)

	WatchENSInterfaceNewResolver(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewResolver, node [][32]byte) (event.Subscription, error)

	ParseENSInterfaceNewResolver(log types.Log) (*EventsMockENSInterfaceNewResolver, error)

	FilterENSInterfaceNewTTL(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceNewTTLIterator, error)

	WatchENSInterfaceNewTTL(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceNewTTL, node [][32]byte) (event.Subscription, error)

	ParseENSInterfaceNewTTL(log types.Log) (*EventsMockENSInterfaceNewTTL, error)

	FilterENSInterfaceTransfer(opts *bind.FilterOpts, node [][32]byte) (*EventsMockENSInterfaceTransferIterator, error)

	WatchENSInterfaceTransfer(opts *bind.WatchOpts, sink chan<- *EventsMockENSInterfaceTransfer, node [][32]byte) (event.Subscription, error)

	ParseENSInterfaceTransfer(log types.Log) (*EventsMockENSInterfaceTransfer, error)

	FilterERC1967ProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockERC1967ProxyAdminChangedIterator, error)

	WatchERC1967ProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyAdminChanged) (event.Subscription, error)

	ParseERC1967ProxyAdminChanged(log types.Log) (*EventsMockERC1967ProxyAdminChanged, error)

	FilterERC1967ProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockERC1967ProxyBeaconUpgradedIterator, error)

	WatchERC1967ProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error)

	ParseERC1967ProxyBeaconUpgraded(log types.Log) (*EventsMockERC1967ProxyBeaconUpgraded, error)

	FilterERC1967ProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockERC1967ProxyUpgradedIterator, error)

	WatchERC1967ProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967ProxyUpgraded, implementation []common.Address) (event.Subscription, error)

	ParseERC1967ProxyUpgraded(log types.Log) (*EventsMockERC1967ProxyUpgraded, error)

	FilterERC1967UpgradeAdminChanged(opts *bind.FilterOpts) (*EventsMockERC1967UpgradeAdminChangedIterator, error)

	WatchERC1967UpgradeAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeAdminChanged) (event.Subscription, error)

	ParseERC1967UpgradeAdminChanged(log types.Log) (*EventsMockERC1967UpgradeAdminChanged, error)

	FilterERC1967UpgradeBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockERC1967UpgradeBeaconUpgradedIterator, error)

	WatchERC1967UpgradeBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeBeaconUpgraded, beacon []common.Address) (event.Subscription, error)

	ParseERC1967UpgradeBeaconUpgraded(log types.Log) (*EventsMockERC1967UpgradeBeaconUpgraded, error)

	FilterERC1967UpgradeUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockERC1967UpgradeUpgradedIterator, error)

	WatchERC1967UpgradeUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockERC1967UpgradeUpgraded, implementation []common.Address) (event.Subscription, error)

	ParseERC1967UpgradeUpgraded(log types.Log) (*EventsMockERC1967UpgradeUpgraded, error)

	FilterFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChangedIterator, error)

	WatchFunctionsBillingRegistryWithInitAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitAuthorizedSendersChanged, error)

	FilterFunctionsBillingRegistryWithInitBillingEnd(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitBillingEndIterator, error)

	WatchFunctionsBillingRegistryWithInitBillingEnd(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitBillingEnd, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitBillingEnd(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitBillingEnd, error)

	FilterFunctionsBillingRegistryWithInitBillingStart(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitBillingStartIterator, error)

	WatchFunctionsBillingRegistryWithInitBillingStart(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitBillingStart, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitBillingStart(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitBillingStart, error)

	FilterFunctionsBillingRegistryWithInitConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitConfigSetIterator, error)

	WatchFunctionsBillingRegistryWithInitConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitConfigSet) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitConfigSet(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitConfigSet, error)

	FilterFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitFundsRecoveredIterator, error)

	WatchFunctionsBillingRegistryWithInitFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitFundsRecovered) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitFundsRecovered(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitFundsRecovered, error)

	FilterFunctionsBillingRegistryWithInitInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitInitializedIterator, error)

	WatchFunctionsBillingRegistryWithInitInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitInitialized) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitInitialized(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitInitialized, error)

	FilterFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequestedIterator, error)

	WatchFunctionsBillingRegistryWithInitOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferRequested, error)

	FilterFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferredIterator, error)

	WatchFunctionsBillingRegistryWithInitOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitOwnershipTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitOwnershipTransferred, error)

	FilterFunctionsBillingRegistryWithInitPaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitPausedIterator, error)

	WatchFunctionsBillingRegistryWithInitPaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitPaused) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitPaused(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitPaused, error)

	FilterFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryWithInitRequestTimedOutIterator, error)

	WatchFunctionsBillingRegistryWithInitRequestTimedOut(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitRequestTimedOut, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitRequestTimedOut(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitRequestTimedOut, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceledIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionCanceled(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCanceled, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAddedIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionConsumerAdded(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerAdded, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemovedIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionConsumerRemoved, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCreatedIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionCreated(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionCreated, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionFundedIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionFunded(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionFunded, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequestedIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferRequested, error)

	FilterFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferredIterator, error)

	WatchFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitSubscriptionOwnerTransferred, error)

	FilterFunctionsBillingRegistryWithInitUnpaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryWithInitUnpausedIterator, error)

	WatchFunctionsBillingRegistryWithInitUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryWithInitUnpaused) (event.Subscription, error)

	ParseFunctionsBillingRegistryWithInitUnpaused(log types.Log) (*EventsMockFunctionsBillingRegistryWithInitUnpaused, error)

	FilterFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryAuthorizedSendersChangedIterator, error)

	WatchFunctionsBillingRegistryAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryAuthorizedSendersChanged) (event.Subscription, error)

	ParseFunctionsBillingRegistryAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsBillingRegistryAuthorizedSendersChanged, error)

	FilterFunctionsBillingRegistryBillingEnd(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryBillingEndIterator, error)

	WatchFunctionsBillingRegistryBillingEnd(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryBillingEnd, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryBillingEnd(log types.Log) (*EventsMockFunctionsBillingRegistryBillingEnd, error)

	FilterFunctionsBillingRegistryBillingStart(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryBillingStartIterator, error)

	WatchFunctionsBillingRegistryBillingStart(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryBillingStart, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryBillingStart(log types.Log) (*EventsMockFunctionsBillingRegistryBillingStart, error)

	FilterFunctionsBillingRegistryConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryConfigSetIterator, error)

	WatchFunctionsBillingRegistryConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryConfigSet) (event.Subscription, error)

	ParseFunctionsBillingRegistryConfigSet(log types.Log) (*EventsMockFunctionsBillingRegistryConfigSet, error)

	FilterFunctionsBillingRegistryFundsRecovered(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryFundsRecoveredIterator, error)

	WatchFunctionsBillingRegistryFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryFundsRecovered) (event.Subscription, error)

	ParseFunctionsBillingRegistryFundsRecovered(log types.Log) (*EventsMockFunctionsBillingRegistryFundsRecovered, error)

	FilterFunctionsBillingRegistryInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryInitializedIterator, error)

	WatchFunctionsBillingRegistryInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryInitialized) (event.Subscription, error)

	ParseFunctionsBillingRegistryInitialized(log types.Log) (*EventsMockFunctionsBillingRegistryInitialized, error)

	FilterFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryOwnershipTransferRequestedIterator, error)

	WatchFunctionsBillingRegistryOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsBillingRegistryOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistryOwnershipTransferRequested, error)

	FilterFunctionsBillingRegistryOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsBillingRegistryOwnershipTransferredIterator, error)

	WatchFunctionsBillingRegistryOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsBillingRegistryOwnershipTransferred(log types.Log) (*EventsMockFunctionsBillingRegistryOwnershipTransferred, error)

	FilterFunctionsBillingRegistryPaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryPausedIterator, error)

	WatchFunctionsBillingRegistryPaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryPaused) (event.Subscription, error)

	ParseFunctionsBillingRegistryPaused(log types.Log) (*EventsMockFunctionsBillingRegistryPaused, error)

	FilterFunctionsBillingRegistryRequestTimedOut(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsBillingRegistryRequestTimedOutIterator, error)

	WatchFunctionsBillingRegistryRequestTimedOut(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryRequestTimedOut, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsBillingRegistryRequestTimedOut(log types.Log) (*EventsMockFunctionsBillingRegistryRequestTimedOut, error)

	FilterFunctionsBillingRegistrySubscriptionCanceled(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionCanceledIterator, error)

	WatchFunctionsBillingRegistrySubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionCanceled, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionCanceled(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionCanceled, error)

	FilterFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerAddedIterator, error)

	WatchFunctionsBillingRegistrySubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionConsumerAdded(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerAdded, error)

	FilterFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerRemovedIterator, error)

	WatchFunctionsBillingRegistrySubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionConsumerRemoved(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionConsumerRemoved, error)

	FilterFunctionsBillingRegistrySubscriptionCreated(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionCreatedIterator, error)

	WatchFunctionsBillingRegistrySubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionCreated, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionCreated(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionCreated, error)

	FilterFunctionsBillingRegistrySubscriptionFunded(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionFundedIterator, error)

	WatchFunctionsBillingRegistrySubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionFunded, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionFunded(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionFunded, error)

	FilterFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequestedIterator, error)

	WatchFunctionsBillingRegistrySubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionOwnerTransferRequested(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferRequested, error)

	FilterFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.FilterOpts, subscriptionId []uint64) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferredIterator, error)

	WatchFunctionsBillingRegistrySubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred, subscriptionId []uint64) (event.Subscription, error)

	ParseFunctionsBillingRegistrySubscriptionOwnerTransferred(log types.Log) (*EventsMockFunctionsBillingRegistrySubscriptionOwnerTransferred, error)

	FilterFunctionsBillingRegistryUnpaused(opts *bind.FilterOpts) (*EventsMockFunctionsBillingRegistryUnpausedIterator, error)

	WatchFunctionsBillingRegistryUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsBillingRegistryUnpaused) (event.Subscription, error)

	ParseFunctionsBillingRegistryUnpaused(log types.Log) (*EventsMockFunctionsBillingRegistryUnpaused, error)

	FilterFunctionsClientExampleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsClientExampleOwnershipTransferRequestedIterator, error)

	WatchFunctionsClientExampleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsClientExampleOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsClientExampleOwnershipTransferRequested, error)

	FilterFunctionsClientExampleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsClientExampleOwnershipTransferredIterator, error)

	WatchFunctionsClientExampleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsClientExampleOwnershipTransferred(log types.Log) (*EventsMockFunctionsClientExampleOwnershipTransferred, error)

	FilterFunctionsClientExampleRequestFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientExampleRequestFulfilledIterator, error)

	WatchFunctionsClientExampleRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleRequestFulfilled, id [][32]byte) (event.Subscription, error)

	ParseFunctionsClientExampleRequestFulfilled(log types.Log) (*EventsMockFunctionsClientExampleRequestFulfilled, error)

	FilterFunctionsClientExampleRequestSent(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientExampleRequestSentIterator, error)

	WatchFunctionsClientExampleRequestSent(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientExampleRequestSent, id [][32]byte) (event.Subscription, error)

	ParseFunctionsClientExampleRequestSent(log types.Log) (*EventsMockFunctionsClientExampleRequestSent, error)

	FilterFunctionsClientRequestFulfilled(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientRequestFulfilledIterator, error)

	WatchFunctionsClientRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientRequestFulfilled, id [][32]byte) (event.Subscription, error)

	ParseFunctionsClientRequestFulfilled(log types.Log) (*EventsMockFunctionsClientRequestFulfilled, error)

	FilterFunctionsClientRequestSent(opts *bind.FilterOpts, id [][32]byte) (*EventsMockFunctionsClientRequestSentIterator, error)

	WatchFunctionsClientRequestSent(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsClientRequestSent, id [][32]byte) (event.Subscription, error)

	ParseFunctionsClientRequestSent(log types.Log) (*EventsMockFunctionsClientRequestSent, error)

	FilterFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersActiveIterator, error)

	WatchFunctionsOracleWithInitAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersActive) (event.Subscription, error)

	ParseFunctionsOracleWithInitAuthorizedSendersActive(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersActive, error)

	FilterFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersChangedIterator, error)

	WatchFunctionsOracleWithInitAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersChanged) (event.Subscription, error)

	ParseFunctionsOracleWithInitAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersChanged, error)

	FilterFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitAuthorizedSendersDeactiveIterator, error)

	WatchFunctionsOracleWithInitAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive) (event.Subscription, error)

	ParseFunctionsOracleWithInitAuthorizedSendersDeactive(log types.Log) (*EventsMockFunctionsOracleWithInitAuthorizedSendersDeactive, error)

	FilterFunctionsOracleWithInitConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitConfigSetIterator, error)

	WatchFunctionsOracleWithInitConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitConfigSet) (event.Subscription, error)

	ParseFunctionsOracleWithInitConfigSet(log types.Log) (*EventsMockFunctionsOracleWithInitConfigSet, error)

	FilterFunctionsOracleWithInitInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitInitializedIterator, error)

	WatchFunctionsOracleWithInitInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitInitialized) (event.Subscription, error)

	ParseFunctionsOracleWithInitInitialized(log types.Log) (*EventsMockFunctionsOracleWithInitInitialized, error)

	FilterFunctionsOracleWithInitInvalidRequestID(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitInvalidRequestIDIterator, error)

	WatchFunctionsOracleWithInitInvalidRequestID(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitInvalidRequestID, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleWithInitInvalidRequestID(log types.Log) (*EventsMockFunctionsOracleWithInitInvalidRequestID, error)

	FilterFunctionsOracleWithInitOracleRequest(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitOracleRequestIterator, error)

	WatchFunctionsOracleWithInitOracleRequest(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOracleRequest, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleWithInitOracleRequest(log types.Log) (*EventsMockFunctionsOracleWithInitOracleRequest, error)

	FilterFunctionsOracleWithInitOracleResponse(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitOracleResponseIterator, error)

	WatchFunctionsOracleWithInitOracleResponse(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOracleResponse, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleWithInitOracleResponse(log types.Log) (*EventsMockFunctionsOracleWithInitOracleResponse, error)

	FilterFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleWithInitOwnershipTransferRequestedIterator, error)

	WatchFunctionsOracleWithInitOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsOracleWithInitOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsOracleWithInitOwnershipTransferRequested, error)

	FilterFunctionsOracleWithInitOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleWithInitOwnershipTransferredIterator, error)

	WatchFunctionsOracleWithInitOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsOracleWithInitOwnershipTransferred(log types.Log) (*EventsMockFunctionsOracleWithInitOwnershipTransferred, error)

	FilterFunctionsOracleWithInitTransmitted(opts *bind.FilterOpts) (*EventsMockFunctionsOracleWithInitTransmittedIterator, error)

	WatchFunctionsOracleWithInitTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitTransmitted) (event.Subscription, error)

	ParseFunctionsOracleWithInitTransmitted(log types.Log) (*EventsMockFunctionsOracleWithInitTransmitted, error)

	FilterFunctionsOracleWithInitUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitUserCallbackErrorIterator, error)

	WatchFunctionsOracleWithInitUserCallbackError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitUserCallbackError, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleWithInitUserCallbackError(log types.Log) (*EventsMockFunctionsOracleWithInitUserCallbackError, error)

	FilterFunctionsOracleWithInitUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleWithInitUserCallbackRawErrorIterator, error)

	WatchFunctionsOracleWithInitUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleWithInitUserCallbackRawError, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleWithInitUserCallbackRawError(log types.Log) (*EventsMockFunctionsOracleWithInitUserCallbackRawError, error)

	FilterFunctionsOracleAuthorizedSendersActive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersActiveIterator, error)

	WatchFunctionsOracleAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersActive) (event.Subscription, error)

	ParseFunctionsOracleAuthorizedSendersActive(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersActive, error)

	FilterFunctionsOracleAuthorizedSendersChanged(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersChangedIterator, error)

	WatchFunctionsOracleAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersChanged) (event.Subscription, error)

	ParseFunctionsOracleAuthorizedSendersChanged(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersChanged, error)

	FilterFunctionsOracleAuthorizedSendersDeactive(opts *bind.FilterOpts) (*EventsMockFunctionsOracleAuthorizedSendersDeactiveIterator, error)

	WatchFunctionsOracleAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleAuthorizedSendersDeactive) (event.Subscription, error)

	ParseFunctionsOracleAuthorizedSendersDeactive(log types.Log) (*EventsMockFunctionsOracleAuthorizedSendersDeactive, error)

	FilterFunctionsOracleConfigSet(opts *bind.FilterOpts) (*EventsMockFunctionsOracleConfigSetIterator, error)

	WatchFunctionsOracleConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleConfigSet) (event.Subscription, error)

	ParseFunctionsOracleConfigSet(log types.Log) (*EventsMockFunctionsOracleConfigSet, error)

	FilterFunctionsOracleInitialized(opts *bind.FilterOpts) (*EventsMockFunctionsOracleInitializedIterator, error)

	WatchFunctionsOracleInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleInitialized) (event.Subscription, error)

	ParseFunctionsOracleInitialized(log types.Log) (*EventsMockFunctionsOracleInitialized, error)

	FilterFunctionsOracleInvalidRequestID(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleInvalidRequestIDIterator, error)

	WatchFunctionsOracleInvalidRequestID(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleInvalidRequestID, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleInvalidRequestID(log types.Log) (*EventsMockFunctionsOracleInvalidRequestID, error)

	FilterFunctionsOracleOracleRequest(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleOracleRequestIterator, error)

	WatchFunctionsOracleOracleRequest(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOracleRequest, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleOracleRequest(log types.Log) (*EventsMockFunctionsOracleOracleRequest, error)

	FilterFunctionsOracleOracleResponse(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleOracleResponseIterator, error)

	WatchFunctionsOracleOracleResponse(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOracleResponse, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleOracleResponse(log types.Log) (*EventsMockFunctionsOracleOracleResponse, error)

	FilterFunctionsOracleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleOwnershipTransferRequestedIterator, error)

	WatchFunctionsOracleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsOracleOwnershipTransferRequested(log types.Log) (*EventsMockFunctionsOracleOwnershipTransferRequested, error)

	FilterFunctionsOracleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockFunctionsOracleOwnershipTransferredIterator, error)

	WatchFunctionsOracleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseFunctionsOracleOwnershipTransferred(log types.Log) (*EventsMockFunctionsOracleOwnershipTransferred, error)

	FilterFunctionsOracleTransmitted(opts *bind.FilterOpts) (*EventsMockFunctionsOracleTransmittedIterator, error)

	WatchFunctionsOracleTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleTransmitted) (event.Subscription, error)

	ParseFunctionsOracleTransmitted(log types.Log) (*EventsMockFunctionsOracleTransmitted, error)

	FilterFunctionsOracleUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleUserCallbackErrorIterator, error)

	WatchFunctionsOracleUserCallbackError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleUserCallbackError, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleUserCallbackError(log types.Log) (*EventsMockFunctionsOracleUserCallbackError, error)

	FilterFunctionsOracleUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*EventsMockFunctionsOracleUserCallbackRawErrorIterator, error)

	WatchFunctionsOracleUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *EventsMockFunctionsOracleUserCallbackRawError, requestId [][32]byte) (event.Subscription, error)

	ParseFunctionsOracleUserCallbackRawError(log types.Log) (*EventsMockFunctionsOracleUserCallbackRawError, error)

	FilterInitializableInitialized(opts *bind.FilterOpts) (*EventsMockInitializableInitializedIterator, error)

	WatchInitializableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockInitializableInitialized) (event.Subscription, error)

	ParseInitializableInitialized(log types.Log) (*EventsMockInitializableInitialized, error)

	FilterKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.FilterOpts, senderAddress []common.Address) (*EventsMockKeeperRegistrar20AutoApproveAllowedSenderSetIterator, error)

	WatchKeeperRegistrar20AutoApproveAllowedSenderSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet, senderAddress []common.Address) (event.Subscription, error)

	ParseKeeperRegistrar20AutoApproveAllowedSenderSet(log types.Log) (*EventsMockKeeperRegistrar20AutoApproveAllowedSenderSet, error)

	FilterKeeperRegistrar20ConfigChanged(opts *bind.FilterOpts) (*EventsMockKeeperRegistrar20ConfigChangedIterator, error)

	WatchKeeperRegistrar20ConfigChanged(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20ConfigChanged) (event.Subscription, error)

	ParseKeeperRegistrar20ConfigChanged(log types.Log) (*EventsMockKeeperRegistrar20ConfigChanged, error)

	FilterKeeperRegistrar20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrar20OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistrar20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistrar20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistrar20OwnershipTransferRequested, error)

	FilterKeeperRegistrar20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrar20OwnershipTransferredIterator, error)

	WatchKeeperRegistrar20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistrar20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistrar20OwnershipTransferred, error)

	FilterKeeperRegistrar20RegistrationApproved(opts *bind.FilterOpts, hash [][32]byte, upkeepId []*big.Int) (*EventsMockKeeperRegistrar20RegistrationApprovedIterator, error)

	WatchKeeperRegistrar20RegistrationApproved(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationApproved, hash [][32]byte, upkeepId []*big.Int) (event.Subscription, error)

	ParseKeeperRegistrar20RegistrationApproved(log types.Log) (*EventsMockKeeperRegistrar20RegistrationApproved, error)

	FilterKeeperRegistrar20RegistrationRejected(opts *bind.FilterOpts, hash [][32]byte) (*EventsMockKeeperRegistrar20RegistrationRejectedIterator, error)

	WatchKeeperRegistrar20RegistrationRejected(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationRejected, hash [][32]byte) (event.Subscription, error)

	ParseKeeperRegistrar20RegistrationRejected(log types.Log) (*EventsMockKeeperRegistrar20RegistrationRejected, error)

	FilterKeeperRegistrar20RegistrationRequested(opts *bind.FilterOpts, hash [][32]byte, upkeepContract []common.Address) (*EventsMockKeeperRegistrar20RegistrationRequestedIterator, error)

	WatchKeeperRegistrar20RegistrationRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrar20RegistrationRequested, hash [][32]byte, upkeepContract []common.Address) (event.Subscription, error)

	ParseKeeperRegistrar20RegistrationRequested(log types.Log) (*EventsMockKeeperRegistrar20RegistrationRequested, error)

	FilterKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.FilterOpts, senderAddress []common.Address) (*EventsMockKeeperRegistrarAutoApproveAllowedSenderSetIterator, error)

	WatchKeeperRegistrarAutoApproveAllowedSenderSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarAutoApproveAllowedSenderSet, senderAddress []common.Address) (event.Subscription, error)

	ParseKeeperRegistrarAutoApproveAllowedSenderSet(log types.Log) (*EventsMockKeeperRegistrarAutoApproveAllowedSenderSet, error)

	FilterKeeperRegistrarConfigChanged(opts *bind.FilterOpts) (*EventsMockKeeperRegistrarConfigChangedIterator, error)

	WatchKeeperRegistrarConfigChanged(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarConfigChanged) (event.Subscription, error)

	ParseKeeperRegistrarConfigChanged(log types.Log) (*EventsMockKeeperRegistrarConfigChanged, error)

	FilterKeeperRegistrarOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrarOwnershipTransferRequestedIterator, error)

	WatchKeeperRegistrarOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistrarOwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistrarOwnershipTransferRequested, error)

	FilterKeeperRegistrarOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistrarOwnershipTransferredIterator, error)

	WatchKeeperRegistrarOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistrarOwnershipTransferred(log types.Log) (*EventsMockKeeperRegistrarOwnershipTransferred, error)

	FilterKeeperRegistrarRegistrationApproved(opts *bind.FilterOpts, hash [][32]byte, upkeepId []*big.Int) (*EventsMockKeeperRegistrarRegistrationApprovedIterator, error)

	WatchKeeperRegistrarRegistrationApproved(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationApproved, hash [][32]byte, upkeepId []*big.Int) (event.Subscription, error)

	ParseKeeperRegistrarRegistrationApproved(log types.Log) (*EventsMockKeeperRegistrarRegistrationApproved, error)

	FilterKeeperRegistrarRegistrationRejected(opts *bind.FilterOpts, hash [][32]byte) (*EventsMockKeeperRegistrarRegistrationRejectedIterator, error)

	WatchKeeperRegistrarRegistrationRejected(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationRejected, hash [][32]byte) (event.Subscription, error)

	ParseKeeperRegistrarRegistrationRejected(log types.Log) (*EventsMockKeeperRegistrarRegistrationRejected, error)

	FilterKeeperRegistrarRegistrationRequested(opts *bind.FilterOpts, hash [][32]byte, upkeepContract []common.Address, source []uint8) (*EventsMockKeeperRegistrarRegistrationRequestedIterator, error)

	WatchKeeperRegistrarRegistrationRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistrarRegistrationRequested, hash [][32]byte, upkeepContract []common.Address, source []uint8) (event.Subscription, error)

	ParseKeeperRegistrarRegistrationRequested(log types.Log) (*EventsMockKeeperRegistrarRegistrationRequested, error)

	FilterKeeperRegistry12ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12ConfigSetIterator, error)

	WatchKeeperRegistry12ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12ConfigSet) (event.Subscription, error)

	ParseKeeperRegistry12ConfigSet(log types.Log) (*EventsMockKeeperRegistry12ConfigSet, error)

	FilterKeeperRegistry12FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry12FundsAddedIterator, error)

	WatchKeeperRegistry12FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12FundsAdded(log types.Log) (*EventsMockKeeperRegistry12FundsAdded, error)

	FilterKeeperRegistry12FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12FundsWithdrawnIterator, error)

	WatchKeeperRegistry12FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry12FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry12FundsWithdrawn, error)

	FilterKeeperRegistry12KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12KeepersUpdatedIterator, error)

	WatchKeeperRegistry12KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12KeepersUpdated) (event.Subscription, error)

	ParseKeeperRegistry12KeepersUpdated(log types.Log) (*EventsMockKeeperRegistry12KeepersUpdated, error)

	FilterKeeperRegistry12OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistry12OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistry12OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry12OwnerFundsWithdrawn, error)

	FilterKeeperRegistry12OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistry12OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry12OwnershipTransferRequested, error)

	FilterKeeperRegistry12OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12OwnershipTransferredIterator, error)

	WatchKeeperRegistry12OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry12OwnershipTransferred, error)

	FilterKeeperRegistry12Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12PausedIterator, error)

	WatchKeeperRegistry12Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12Paused) (event.Subscription, error)

	ParseKeeperRegistry12Paused(log types.Log) (*EventsMockKeeperRegistry12Paused, error)

	FilterKeeperRegistry12PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistry12PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry12PayeeshipTransferRequested, error)

	FilterKeeperRegistry12PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry12PayeeshipTransferredIterator, error)

	WatchKeeperRegistry12PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry12PayeeshipTransferred, error)

	FilterKeeperRegistry12PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry12PaymentWithdrawnIterator, error)

	WatchKeeperRegistry12PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry12PaymentWithdrawn, error)

	FilterKeeperRegistry12Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry12UnpausedIterator, error)

	WatchKeeperRegistry12Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12Unpaused) (event.Subscription, error)

	ParseKeeperRegistry12Unpaused(log types.Log) (*EventsMockKeeperRegistry12Unpaused, error)

	FilterKeeperRegistry12UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry12UpkeepCanceledIterator, error)

	WatchKeeperRegistry12UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry12UpkeepCanceled, error)

	FilterKeeperRegistry12UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistry12UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry12UpkeepGasLimitSet, error)

	FilterKeeperRegistry12UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepMigratedIterator, error)

	WatchKeeperRegistry12UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry12UpkeepMigrated, error)

	FilterKeeperRegistry12UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistry12UpkeepPerformedIterator, error)

	WatchKeeperRegistry12UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry12UpkeepPerformed, error)

	FilterKeeperRegistry12UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepReceivedIterator, error)

	WatchKeeperRegistry12UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry12UpkeepReceived, error)

	FilterKeeperRegistry12UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry12UpkeepRegisteredIterator, error)

	WatchKeeperRegistry12UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry12UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry12UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry12UpkeepRegistered, error)

	FilterKeeperRegistry13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13ConfigSetIterator, error)

	WatchKeeperRegistry13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13ConfigSet) (event.Subscription, error)

	ParseKeeperRegistry13ConfigSet(log types.Log) (*EventsMockKeeperRegistry13ConfigSet, error)

	FilterKeeperRegistry13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry13FundsAddedIterator, error)

	WatchKeeperRegistry13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13FundsAdded(log types.Log) (*EventsMockKeeperRegistry13FundsAdded, error)

	FilterKeeperRegistry13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13FundsWithdrawnIterator, error)

	WatchKeeperRegistry13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry13FundsWithdrawn, error)

	FilterKeeperRegistry13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13KeepersUpdatedIterator, error)

	WatchKeeperRegistry13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13KeepersUpdated) (event.Subscription, error)

	ParseKeeperRegistry13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistry13KeepersUpdated, error)

	FilterKeeperRegistry13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistry13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistry13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry13OwnerFundsWithdrawn, error)

	FilterKeeperRegistry13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistry13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry13OwnershipTransferRequested, error)

	FilterKeeperRegistry13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13OwnershipTransferredIterator, error)

	WatchKeeperRegistry13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry13OwnershipTransferred, error)

	FilterKeeperRegistry13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13PausedIterator, error)

	WatchKeeperRegistry13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13Paused) (event.Subscription, error)

	ParseKeeperRegistry13Paused(log types.Log) (*EventsMockKeeperRegistry13Paused, error)

	FilterKeeperRegistry13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistry13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry13PayeeshipTransferRequested, error)

	FilterKeeperRegistry13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13PayeeshipTransferredIterator, error)

	WatchKeeperRegistry13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry13PayeeshipTransferred, error)

	FilterKeeperRegistry13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry13PaymentWithdrawnIterator, error)

	WatchKeeperRegistry13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry13PaymentWithdrawn, error)

	FilterKeeperRegistry13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry13UnpausedIterator, error)

	WatchKeeperRegistry13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13Unpaused) (event.Subscription, error)

	ParseKeeperRegistry13Unpaused(log types.Log) (*EventsMockKeeperRegistry13Unpaused, error)

	FilterKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistry13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistry13UpkeepAdminTransferRequested, error)

	FilterKeeperRegistry13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry13UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistry13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistry13UpkeepAdminTransferred, error)

	FilterKeeperRegistry13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry13UpkeepCanceledIterator, error)

	WatchKeeperRegistry13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry13UpkeepCanceled, error)

	FilterKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistry13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistry13UpkeepCheckDataUpdated, error)

	FilterKeeperRegistry13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistry13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry13UpkeepGasLimitSet, error)

	FilterKeeperRegistry13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepMigratedIterator, error)

	WatchKeeperRegistry13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry13UpkeepMigrated, error)

	FilterKeeperRegistry13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepPausedIterator, error)

	WatchKeeperRegistry13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistry13UpkeepPaused, error)

	FilterKeeperRegistry13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistry13UpkeepPerformedIterator, error)

	WatchKeeperRegistry13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry13UpkeepPerformed, error)

	FilterKeeperRegistry13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepReceivedIterator, error)

	WatchKeeperRegistry13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry13UpkeepReceived, error)

	FilterKeeperRegistry13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepRegisteredIterator, error)

	WatchKeeperRegistry13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry13UpkeepRegistered, error)

	FilterKeeperRegistry13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry13UpkeepUnpausedIterator, error)

	WatchKeeperRegistry13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry13UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistry13UpkeepUnpaused, error)

	FilterKeeperRegistry20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20CancelledUpkeepReportIterator, error)

	WatchKeeperRegistry20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20CancelledUpkeepReport, error)

	FilterKeeperRegistry20ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20ConfigSetIterator, error)

	WatchKeeperRegistry20ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20ConfigSet) (event.Subscription, error)

	ParseKeeperRegistry20ConfigSet(log types.Log) (*EventsMockKeeperRegistry20ConfigSet, error)

	FilterKeeperRegistry20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistry20FundsAddedIterator, error)

	WatchKeeperRegistry20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20FundsAdded(log types.Log) (*EventsMockKeeperRegistry20FundsAdded, error)

	FilterKeeperRegistry20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20FundsWithdrawnIterator, error)

	WatchKeeperRegistry20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry20FundsWithdrawn, error)

	FilterKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20InsufficientFundsUpkeepReportIterator, error)

	WatchKeeperRegistry20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20InsufficientFundsUpkeepReport, error)

	FilterKeeperRegistry20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistry20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistry20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistry20OwnerFundsWithdrawn, error)

	FilterKeeperRegistry20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistry20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistry20OwnershipTransferRequested, error)

	FilterKeeperRegistry20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20OwnershipTransferredIterator, error)

	WatchKeeperRegistry20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistry20OwnershipTransferred, error)

	FilterKeeperRegistry20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20PausedIterator, error)

	WatchKeeperRegistry20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Paused) (event.Subscription, error)

	ParseKeeperRegistry20Paused(log types.Log) (*EventsMockKeeperRegistry20Paused, error)

	FilterKeeperRegistry20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20PayeesUpdatedIterator, error)

	WatchKeeperRegistry20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeesUpdated) (event.Subscription, error)

	ParseKeeperRegistry20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistry20PayeesUpdated, error)

	FilterKeeperRegistry20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistry20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistry20PayeeshipTransferRequested, error)

	FilterKeeperRegistry20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20PayeeshipTransferredIterator, error)

	WatchKeeperRegistry20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistry20PayeeshipTransferred, error)

	FilterKeeperRegistry20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistry20PaymentWithdrawnIterator, error)

	WatchKeeperRegistry20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistry20PaymentWithdrawn, error)

	FilterKeeperRegistry20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20ReorgedUpkeepReportIterator, error)

	WatchKeeperRegistry20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20ReorgedUpkeepReport, error)

	FilterKeeperRegistry20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20StaleUpkeepReportIterator, error)

	WatchKeeperRegistry20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20StaleUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistry20StaleUpkeepReport, error)

	FilterKeeperRegistry20Transmitted(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20TransmittedIterator, error)

	WatchKeeperRegistry20Transmitted(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Transmitted) (event.Subscription, error)

	ParseKeeperRegistry20Transmitted(log types.Log) (*EventsMockKeeperRegistry20Transmitted, error)

	FilterKeeperRegistry20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistry20UnpausedIterator, error)

	WatchKeeperRegistry20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20Unpaused) (event.Subscription, error)

	ParseKeeperRegistry20Unpaused(log types.Log) (*EventsMockKeeperRegistry20Unpaused, error)

	FilterKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistry20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistry20UpkeepAdminTransferRequested, error)

	FilterKeeperRegistry20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistry20UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistry20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistry20UpkeepAdminTransferred, error)

	FilterKeeperRegistry20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistry20UpkeepCanceledIterator, error)

	WatchKeeperRegistry20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistry20UpkeepCanceled, error)

	FilterKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistry20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistry20UpkeepCheckDataUpdated, error)

	FilterKeeperRegistry20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistry20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistry20UpkeepGasLimitSet, error)

	FilterKeeperRegistry20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepMigratedIterator, error)

	WatchKeeperRegistry20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistry20UpkeepMigrated, error)

	FilterKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepOffchainConfigSetIterator, error)

	WatchKeeperRegistry20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistry20UpkeepOffchainConfigSet, error)

	FilterKeeperRegistry20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepPausedIterator, error)

	WatchKeeperRegistry20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistry20UpkeepPaused, error)

	FilterKeeperRegistry20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistry20UpkeepPerformedIterator, error)

	WatchKeeperRegistry20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistry20UpkeepPerformed, error)

	FilterKeeperRegistry20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepReceivedIterator, error)

	WatchKeeperRegistry20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistry20UpkeepReceived, error)

	FilterKeeperRegistry20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepRegisteredIterator, error)

	WatchKeeperRegistry20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistry20UpkeepRegistered, error)

	FilterKeeperRegistry20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistry20UpkeepUnpausedIterator, error)

	WatchKeeperRegistry20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistry20UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistry20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistry20UpkeepUnpaused, error)

	FilterKeeperRegistryBase13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13ConfigSetIterator, error)

	WatchKeeperRegistryBase13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13ConfigSet) (event.Subscription, error)

	ParseKeeperRegistryBase13ConfigSet(log types.Log) (*EventsMockKeeperRegistryBase13ConfigSet, error)

	FilterKeeperRegistryBase13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryBase13FundsAddedIterator, error)

	WatchKeeperRegistryBase13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13FundsAdded(log types.Log) (*EventsMockKeeperRegistryBase13FundsAdded, error)

	FilterKeeperRegistryBase13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13FundsWithdrawnIterator, error)

	WatchKeeperRegistryBase13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13FundsWithdrawn, error)

	FilterKeeperRegistryBase13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13KeepersUpdatedIterator, error)

	WatchKeeperRegistryBase13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13KeepersUpdated) (event.Subscription, error)

	ParseKeeperRegistryBase13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistryBase13KeepersUpdated, error)

	FilterKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistryBase13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistryBase13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13OwnerFundsWithdrawn, error)

	FilterKeeperRegistryBase13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistryBase13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13OwnershipTransferRequested, error)

	FilterKeeperRegistryBase13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13OwnershipTransferredIterator, error)

	WatchKeeperRegistryBase13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryBase13OwnershipTransferred, error)

	FilterKeeperRegistryBase13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13PausedIterator, error)

	WatchKeeperRegistryBase13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13Paused) (event.Subscription, error)

	ParseKeeperRegistryBase13Paused(log types.Log) (*EventsMockKeeperRegistryBase13Paused, error)

	FilterKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistryBase13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13PayeeshipTransferRequested, error)

	FilterKeeperRegistryBase13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13PayeeshipTransferredIterator, error)

	WatchKeeperRegistryBase13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryBase13PayeeshipTransferred, error)

	FilterKeeperRegistryBase13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryBase13PaymentWithdrawnIterator, error)

	WatchKeeperRegistryBase13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase13PaymentWithdrawn, error)

	FilterKeeperRegistryBase13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase13UnpausedIterator, error)

	WatchKeeperRegistryBase13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13Unpaused) (event.Subscription, error)

	ParseKeeperRegistryBase13Unpaused(log types.Log) (*EventsMockKeeperRegistryBase13Unpaused, error)

	FilterKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistryBase13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferRequested, error)

	FilterKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistryBase13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepAdminTransferred, error)

	FilterKeeperRegistryBase13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryBase13UpkeepCanceledIterator, error)

	WatchKeeperRegistryBase13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepCanceled, error)

	FilterKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistryBase13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepCheckDataUpdated, error)

	FilterKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistryBase13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepGasLimitSet, error)

	FilterKeeperRegistryBase13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepMigratedIterator, error)

	WatchKeeperRegistryBase13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepMigrated, error)

	FilterKeeperRegistryBase13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepPausedIterator, error)

	WatchKeeperRegistryBase13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepPaused, error)

	FilterKeeperRegistryBase13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistryBase13UpkeepPerformedIterator, error)

	WatchKeeperRegistryBase13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepPerformed, error)

	FilterKeeperRegistryBase13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepReceivedIterator, error)

	WatchKeeperRegistryBase13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepReceived, error)

	FilterKeeperRegistryBase13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepRegisteredIterator, error)

	WatchKeeperRegistryBase13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepRegistered, error)

	FilterKeeperRegistryBase13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase13UpkeepUnpausedIterator, error)

	WatchKeeperRegistryBase13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase13UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryBase13UpkeepUnpaused, error)

	FilterKeeperRegistryBase20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20CancelledUpkeepReportIterator, error)

	WatchKeeperRegistryBase20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20CancelledUpkeepReport, error)

	FilterKeeperRegistryBase20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryBase20FundsAddedIterator, error)

	WatchKeeperRegistryBase20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20FundsAdded(log types.Log) (*EventsMockKeeperRegistryBase20FundsAdded, error)

	FilterKeeperRegistryBase20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20FundsWithdrawnIterator, error)

	WatchKeeperRegistryBase20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20FundsWithdrawn, error)

	FilterKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReportIterator, error)

	WatchKeeperRegistryBase20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20InsufficientFundsUpkeepReport, error)

	FilterKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistryBase20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistryBase20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20OwnerFundsWithdrawn, error)

	FilterKeeperRegistryBase20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistryBase20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20OwnershipTransferRequested, error)

	FilterKeeperRegistryBase20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20OwnershipTransferredIterator, error)

	WatchKeeperRegistryBase20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryBase20OwnershipTransferred, error)

	FilterKeeperRegistryBase20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20PausedIterator, error)

	WatchKeeperRegistryBase20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20Paused) (event.Subscription, error)

	ParseKeeperRegistryBase20Paused(log types.Log) (*EventsMockKeeperRegistryBase20Paused, error)

	FilterKeeperRegistryBase20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20PayeesUpdatedIterator, error)

	WatchKeeperRegistryBase20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeesUpdated) (event.Subscription, error)

	ParseKeeperRegistryBase20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistryBase20PayeesUpdated, error)

	FilterKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistryBase20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20PayeeshipTransferRequested, error)

	FilterKeeperRegistryBase20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20PayeeshipTransferredIterator, error)

	WatchKeeperRegistryBase20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryBase20PayeeshipTransferred, error)

	FilterKeeperRegistryBase20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryBase20PaymentWithdrawnIterator, error)

	WatchKeeperRegistryBase20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryBase20PaymentWithdrawn, error)

	FilterKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20ReorgedUpkeepReportIterator, error)

	WatchKeeperRegistryBase20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20ReorgedUpkeepReport, error)

	FilterKeeperRegistryBase20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20StaleUpkeepReportIterator, error)

	WatchKeeperRegistryBase20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20StaleUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistryBase20StaleUpkeepReport, error)

	FilterKeeperRegistryBase20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryBase20UnpausedIterator, error)

	WatchKeeperRegistryBase20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20Unpaused) (event.Subscription, error)

	ParseKeeperRegistryBase20Unpaused(log types.Log) (*EventsMockKeeperRegistryBase20Unpaused, error)

	FilterKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistryBase20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferRequested, error)

	FilterKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistryBase20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepAdminTransferred, error)

	FilterKeeperRegistryBase20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryBase20UpkeepCanceledIterator, error)

	WatchKeeperRegistryBase20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepCanceled, error)

	FilterKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistryBase20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepCheckDataUpdated, error)

	FilterKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistryBase20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepGasLimitSet, error)

	FilterKeeperRegistryBase20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepMigratedIterator, error)

	WatchKeeperRegistryBase20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepMigrated, error)

	FilterKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepOffchainConfigSetIterator, error)

	WatchKeeperRegistryBase20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepOffchainConfigSet, error)

	FilterKeeperRegistryBase20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepPausedIterator, error)

	WatchKeeperRegistryBase20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepPaused, error)

	FilterKeeperRegistryBase20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistryBase20UpkeepPerformedIterator, error)

	WatchKeeperRegistryBase20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepPerformed, error)

	FilterKeeperRegistryBase20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepReceivedIterator, error)

	WatchKeeperRegistryBase20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepReceived, error)

	FilterKeeperRegistryBase20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepRegisteredIterator, error)

	WatchKeeperRegistryBase20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepRegistered, error)

	FilterKeeperRegistryBase20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryBase20UpkeepUnpausedIterator, error)

	WatchKeeperRegistryBase20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryBase20UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryBase20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryBase20UpkeepUnpaused, error)

	FilterKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferRequested, error)

	FilterKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferredIterator, error)

	WatchKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryCheckUpkeepGasUsageWrapper12OwnershipTransferred, error)

	FilterKeeperRegistryLogic13ConfigSet(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13ConfigSetIterator, error)

	WatchKeeperRegistryLogic13ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13ConfigSet) (event.Subscription, error)

	ParseKeeperRegistryLogic13ConfigSet(log types.Log) (*EventsMockKeeperRegistryLogic13ConfigSet, error)

	FilterKeeperRegistryLogic13FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryLogic13FundsAddedIterator, error)

	WatchKeeperRegistryLogic13FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13FundsAdded(log types.Log) (*EventsMockKeeperRegistryLogic13FundsAdded, error)

	FilterKeeperRegistryLogic13FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13FundsWithdrawnIterator, error)

	WatchKeeperRegistryLogic13FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13FundsWithdrawn, error)

	FilterKeeperRegistryLogic13KeepersUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13KeepersUpdatedIterator, error)

	WatchKeeperRegistryLogic13KeepersUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13KeepersUpdated) (event.Subscription, error)

	ParseKeeperRegistryLogic13KeepersUpdated(log types.Log) (*EventsMockKeeperRegistryLogic13KeepersUpdated, error)

	FilterKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistryLogic13OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistryLogic13OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13OwnerFundsWithdrawn, error)

	FilterKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistryLogic13OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13OwnershipTransferRequested, error)

	FilterKeeperRegistryLogic13OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13OwnershipTransferredIterator, error)

	WatchKeeperRegistryLogic13OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13OwnershipTransferred, error)

	FilterKeeperRegistryLogic13Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13PausedIterator, error)

	WatchKeeperRegistryLogic13Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13Paused) (event.Subscription, error)

	ParseKeeperRegistryLogic13Paused(log types.Log) (*EventsMockKeeperRegistryLogic13Paused, error)

	FilterKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistryLogic13PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PayeeshipTransferRequested, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13PayeeshipTransferRequested, error)

	FilterKeeperRegistryLogic13PayeeshipTransferred(opts *bind.FilterOpts, keeper []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13PayeeshipTransferredIterator, error)

	WatchKeeperRegistryLogic13PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PayeeshipTransferred, keeper []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13PayeeshipTransferred, error)

	FilterKeeperRegistryLogic13PaymentWithdrawn(opts *bind.FilterOpts, keeper []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryLogic13PaymentWithdrawnIterator, error)

	WatchKeeperRegistryLogic13PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13PaymentWithdrawn, keeper []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic13PaymentWithdrawn, error)

	FilterKeeperRegistryLogic13Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic13UnpausedIterator, error)

	WatchKeeperRegistryLogic13Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13Unpaused) (event.Subscription, error)

	ParseKeeperRegistryLogic13Unpaused(log types.Log) (*EventsMockKeeperRegistryLogic13Unpaused, error)

	FilterKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistryLogic13UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferRequested, error)

	FilterKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistryLogic13UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepAdminTransferred, error)

	FilterKeeperRegistryLogic13UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryLogic13UpkeepCanceledIterator, error)

	WatchKeeperRegistryLogic13UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepCanceled, error)

	FilterKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistryLogic13UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepCheckDataUpdated, error)

	FilterKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistryLogic13UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepGasLimitSet, error)

	FilterKeeperRegistryLogic13UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepMigratedIterator, error)

	WatchKeeperRegistryLogic13UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepMigrated, error)

	FilterKeeperRegistryLogic13UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepPausedIterator, error)

	WatchKeeperRegistryLogic13UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepPaused, error)

	FilterKeeperRegistryLogic13UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool, from []common.Address) (*EventsMockKeeperRegistryLogic13UpkeepPerformedIterator, error)

	WatchKeeperRegistryLogic13UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepPerformed, id []*big.Int, success []bool, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepPerformed, error)

	FilterKeeperRegistryLogic13UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepReceivedIterator, error)

	WatchKeeperRegistryLogic13UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepReceived, error)

	FilterKeeperRegistryLogic13UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepRegisteredIterator, error)

	WatchKeeperRegistryLogic13UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepRegistered, error)

	FilterKeeperRegistryLogic13UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic13UpkeepUnpausedIterator, error)

	WatchKeeperRegistryLogic13UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic13UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic13UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryLogic13UpkeepUnpaused, error)

	FilterKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20CancelledUpkeepReportIterator, error)

	WatchKeeperRegistryLogic20CancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20CancelledUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20CancelledUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20CancelledUpkeepReport, error)

	FilterKeeperRegistryLogic20FundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*EventsMockKeeperRegistryLogic20FundsAddedIterator, error)

	WatchKeeperRegistryLogic20FundsAdded(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20FundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20FundsAdded(log types.Log) (*EventsMockKeeperRegistryLogic20FundsAdded, error)

	FilterKeeperRegistryLogic20FundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20FundsWithdrawnIterator, error)

	WatchKeeperRegistryLogic20FundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20FundsWithdrawn, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20FundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20FundsWithdrawn, error)

	FilterKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReportIterator, error)

	WatchKeeperRegistryLogic20InsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20InsufficientFundsUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20InsufficientFundsUpkeepReport, error)

	FilterKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20OwnerFundsWithdrawnIterator, error)

	WatchKeeperRegistryLogic20OwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn) (event.Subscription, error)

	ParseKeeperRegistryLogic20OwnerFundsWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20OwnerFundsWithdrawn, error)

	FilterKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20OwnershipTransferRequestedIterator, error)

	WatchKeeperRegistryLogic20OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20OwnershipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20OwnershipTransferRequested, error)

	FilterKeeperRegistryLogic20OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20OwnershipTransferredIterator, error)

	WatchKeeperRegistryLogic20OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20OwnershipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20OwnershipTransferred, error)

	FilterKeeperRegistryLogic20Paused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20PausedIterator, error)

	WatchKeeperRegistryLogic20Paused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20Paused) (event.Subscription, error)

	ParseKeeperRegistryLogic20Paused(log types.Log) (*EventsMockKeeperRegistryLogic20Paused, error)

	FilterKeeperRegistryLogic20PayeesUpdated(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20PayeesUpdatedIterator, error)

	WatchKeeperRegistryLogic20PayeesUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeesUpdated) (event.Subscription, error)

	ParseKeeperRegistryLogic20PayeesUpdated(log types.Log) (*EventsMockKeeperRegistryLogic20PayeesUpdated, error)

	FilterKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20PayeeshipTransferRequestedIterator, error)

	WatchKeeperRegistryLogic20PayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20PayeeshipTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20PayeeshipTransferRequested, error)

	FilterKeeperRegistryLogic20PayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20PayeeshipTransferredIterator, error)

	WatchKeeperRegistryLogic20PayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20PayeeshipTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20PayeeshipTransferred, error)

	FilterKeeperRegistryLogic20PaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*EventsMockKeeperRegistryLogic20PaymentWithdrawnIterator, error)

	WatchKeeperRegistryLogic20PaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20PaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20PaymentWithdrawn(log types.Log) (*EventsMockKeeperRegistryLogic20PaymentWithdrawn, error)

	FilterKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20ReorgedUpkeepReportIterator, error)

	WatchKeeperRegistryLogic20ReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20ReorgedUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20ReorgedUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20ReorgedUpkeepReport, error)

	FilterKeeperRegistryLogic20StaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20StaleUpkeepReportIterator, error)

	WatchKeeperRegistryLogic20StaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20StaleUpkeepReport, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20StaleUpkeepReport(log types.Log) (*EventsMockKeeperRegistryLogic20StaleUpkeepReport, error)

	FilterKeeperRegistryLogic20Unpaused(opts *bind.FilterOpts) (*EventsMockKeeperRegistryLogic20UnpausedIterator, error)

	WatchKeeperRegistryLogic20Unpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20Unpaused) (event.Subscription, error)

	ParseKeeperRegistryLogic20Unpaused(log types.Log) (*EventsMockKeeperRegistryLogic20Unpaused, error)

	FilterKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequestedIterator, error)

	WatchKeeperRegistryLogic20UpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepAdminTransferRequested(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferRequested, error)

	FilterKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferredIterator, error)

	WatchKeeperRegistryLogic20UpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepAdminTransferred(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepAdminTransferred, error)

	FilterKeeperRegistryLogic20UpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*EventsMockKeeperRegistryLogic20UpkeepCanceledIterator, error)

	WatchKeeperRegistryLogic20UpkeepCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepCanceled(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepCanceled, error)

	FilterKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdatedIterator, error)

	WatchKeeperRegistryLogic20UpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepCheckDataUpdated(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepCheckDataUpdated, error)

	FilterKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepGasLimitSetIterator, error)

	WatchKeeperRegistryLogic20UpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepGasLimitSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepGasLimitSet(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepGasLimitSet, error)

	FilterKeeperRegistryLogic20UpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepMigratedIterator, error)

	WatchKeeperRegistryLogic20UpkeepMigrated(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepMigrated, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepMigrated(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepMigrated, error)

	FilterKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSetIterator, error)

	WatchKeeperRegistryLogic20UpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepOffchainConfigSet(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepOffchainConfigSet, error)

	FilterKeeperRegistryLogic20UpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepPausedIterator, error)

	WatchKeeperRegistryLogic20UpkeepPaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepPaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepPaused(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepPaused, error)

	FilterKeeperRegistryLogic20UpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*EventsMockKeeperRegistryLogic20UpkeepPerformedIterator, error)

	WatchKeeperRegistryLogic20UpkeepPerformed(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepPerformed(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepPerformed, error)

	FilterKeeperRegistryLogic20UpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepReceivedIterator, error)

	WatchKeeperRegistryLogic20UpkeepReceived(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepReceived, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepReceived(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepReceived, error)

	FilterKeeperRegistryLogic20UpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepRegisteredIterator, error)

	WatchKeeperRegistryLogic20UpkeepRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepRegistered, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepRegistered(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepRegistered, error)

	FilterKeeperRegistryLogic20UpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*EventsMockKeeperRegistryLogic20UpkeepUnpausedIterator, error)

	WatchKeeperRegistryLogic20UpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockKeeperRegistryLogic20UpkeepUnpaused, id []*big.Int) (event.Subscription, error)

	ParseKeeperRegistryLogic20UpkeepUnpaused(log types.Log) (*EventsMockKeeperRegistryLogic20UpkeepUnpaused, error)

	FilterLogEmitterLog1(opts *bind.FilterOpts) (*EventsMockLogEmitterLog1Iterator, error)

	WatchLogEmitterLog1(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog1) (event.Subscription, error)

	ParseLogEmitterLog1(log types.Log) (*EventsMockLogEmitterLog1, error)

	FilterLogEmitterLog2(opts *bind.FilterOpts, param1 []*big.Int) (*EventsMockLogEmitterLog2Iterator, error)

	WatchLogEmitterLog2(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog2, param1 []*big.Int) (event.Subscription, error)

	ParseLogEmitterLog2(log types.Log) (*EventsMockLogEmitterLog2, error)

	FilterLogEmitterLog3(opts *bind.FilterOpts) (*EventsMockLogEmitterLog3Iterator, error)

	WatchLogEmitterLog3(opts *bind.WatchOpts, sink chan<- *EventsMockLogEmitterLog3) (event.Subscription, error)

	ParseLogEmitterLog3(log types.Log) (*EventsMockLogEmitterLog3, error)

	FilterOCR2AbstractConfigSet(opts *bind.FilterOpts) (*EventsMockOCR2AbstractConfigSetIterator, error)

	WatchOCR2AbstractConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2AbstractConfigSet) (event.Subscription, error)

	ParseOCR2AbstractConfigSet(log types.Log) (*EventsMockOCR2AbstractConfigSet, error)

	FilterOCR2AbstractTransmitted(opts *bind.FilterOpts) (*EventsMockOCR2AbstractTransmittedIterator, error)

	WatchOCR2AbstractTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2AbstractTransmitted) (event.Subscription, error)

	ParseOCR2AbstractTransmitted(log types.Log) (*EventsMockOCR2AbstractTransmitted, error)

	FilterOCR2BaseUpgradeableConfigSet(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableConfigSetIterator, error)

	WatchOCR2BaseUpgradeableConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableConfigSet) (event.Subscription, error)

	ParseOCR2BaseUpgradeableConfigSet(log types.Log) (*EventsMockOCR2BaseUpgradeableConfigSet, error)

	FilterOCR2BaseUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableInitializedIterator, error)

	WatchOCR2BaseUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableInitialized) (event.Subscription, error)

	ParseOCR2BaseUpgradeableInitialized(log types.Log) (*EventsMockOCR2BaseUpgradeableInitialized, error)

	FilterOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockOCR2BaseUpgradeableOwnershipTransferRequestedIterator, error)

	WatchOCR2BaseUpgradeableOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOCR2BaseUpgradeableOwnershipTransferRequested(log types.Log) (*EventsMockOCR2BaseUpgradeableOwnershipTransferRequested, error)

	FilterOCR2BaseUpgradeableOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockOCR2BaseUpgradeableOwnershipTransferredIterator, error)

	WatchOCR2BaseUpgradeableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOCR2BaseUpgradeableOwnershipTransferred(log types.Log) (*EventsMockOCR2BaseUpgradeableOwnershipTransferred, error)

	FilterOCR2BaseUpgradeableTransmitted(opts *bind.FilterOpts) (*EventsMockOCR2BaseUpgradeableTransmittedIterator, error)

	WatchOCR2BaseUpgradeableTransmitted(opts *bind.WatchOpts, sink chan<- *EventsMockOCR2BaseUpgradeableTransmitted) (event.Subscription, error)

	ParseOCR2BaseUpgradeableTransmitted(log types.Log) (*EventsMockOCR2BaseUpgradeableTransmitted, error)

	FilterOVMGasPriceOracleDecimalsUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleDecimalsUpdatedIterator, error)

	WatchOVMGasPriceOracleDecimalsUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleDecimalsUpdated) (event.Subscription, error)

	ParseOVMGasPriceOracleDecimalsUpdated(log types.Log) (*EventsMockOVMGasPriceOracleDecimalsUpdated, error)

	FilterOVMGasPriceOracleGasPriceUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleGasPriceUpdatedIterator, error)

	WatchOVMGasPriceOracleGasPriceUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleGasPriceUpdated) (event.Subscription, error)

	ParseOVMGasPriceOracleGasPriceUpdated(log types.Log) (*EventsMockOVMGasPriceOracleGasPriceUpdated, error)

	FilterOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleL1BaseFeeUpdatedIterator, error)

	WatchOVMGasPriceOracleL1BaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleL1BaseFeeUpdated) (event.Subscription, error)

	ParseOVMGasPriceOracleL1BaseFeeUpdated(log types.Log) (*EventsMockOVMGasPriceOracleL1BaseFeeUpdated, error)

	FilterOVMGasPriceOracleOverheadUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleOverheadUpdatedIterator, error)

	WatchOVMGasPriceOracleOverheadUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleOverheadUpdated) (event.Subscription, error)

	ParseOVMGasPriceOracleOverheadUpdated(log types.Log) (*EventsMockOVMGasPriceOracleOverheadUpdated, error)

	FilterOVMGasPriceOracleOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockOVMGasPriceOracleOwnershipTransferredIterator, error)

	WatchOVMGasPriceOracleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOVMGasPriceOracleOwnershipTransferred(log types.Log) (*EventsMockOVMGasPriceOracleOwnershipTransferred, error)

	FilterOVMGasPriceOracleScalarUpdated(opts *bind.FilterOpts) (*EventsMockOVMGasPriceOracleScalarUpdatedIterator, error)

	WatchOVMGasPriceOracleScalarUpdated(opts *bind.WatchOpts, sink chan<- *EventsMockOVMGasPriceOracleScalarUpdated) (event.Subscription, error)

	ParseOVMGasPriceOracleScalarUpdated(log types.Log) (*EventsMockOVMGasPriceOracleScalarUpdated, error)

	FilterOwnableOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockOwnableOwnershipTransferredIterator, error)

	WatchOwnableOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockOwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnableOwnershipTransferred(log types.Log) (*EventsMockOwnableOwnershipTransferred, error)

	FilterPausableUpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockPausableUpgradeableInitializedIterator, error)

	WatchPausableUpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeableInitialized) (event.Subscription, error)

	ParsePausableUpgradeableInitialized(log types.Log) (*EventsMockPausableUpgradeableInitialized, error)

	FilterPausableUpgradeablePaused(opts *bind.FilterOpts) (*EventsMockPausableUpgradeablePausedIterator, error)

	WatchPausableUpgradeablePaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeablePaused) (event.Subscription, error)

	ParsePausableUpgradeablePaused(log types.Log) (*EventsMockPausableUpgradeablePaused, error)

	FilterPausableUpgradeableUnpaused(opts *bind.FilterOpts) (*EventsMockPausableUpgradeableUnpausedIterator, error)

	WatchPausableUpgradeableUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUpgradeableUnpaused) (event.Subscription, error)

	ParsePausableUpgradeableUnpaused(log types.Log) (*EventsMockPausableUpgradeableUnpaused, error)

	FilterPausablePaused(opts *bind.FilterOpts) (*EventsMockPausablePausedIterator, error)

	WatchPausablePaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausablePaused) (event.Subscription, error)

	ParsePausablePaused(log types.Log) (*EventsMockPausablePaused, error)

	FilterPausableUnpaused(opts *bind.FilterOpts) (*EventsMockPausableUnpausedIterator, error)

	WatchPausableUnpaused(opts *bind.WatchOpts, sink chan<- *EventsMockPausableUnpaused) (event.Subscription, error)

	ParsePausableUnpaused(log types.Log) (*EventsMockPausableUnpaused, error)

	FilterProxyAdminOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockProxyAdminOwnershipTransferredIterator, error)

	WatchProxyAdminOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseProxyAdminOwnershipTransferred(log types.Log) (*EventsMockProxyAdminOwnershipTransferred, error)

	FilterTransparentUpgradeableProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockTransparentUpgradeableProxyAdminChangedIterator, error)

	WatchTransparentUpgradeableProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyAdminChanged) (event.Subscription, error)

	ParseTransparentUpgradeableProxyAdminChanged(log types.Log) (*EventsMockTransparentUpgradeableProxyAdminChanged, error)

	FilterTransparentUpgradeableProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockTransparentUpgradeableProxyBeaconUpgradedIterator, error)

	WatchTransparentUpgradeableProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error)

	ParseTransparentUpgradeableProxyBeaconUpgraded(log types.Log) (*EventsMockTransparentUpgradeableProxyBeaconUpgraded, error)

	FilterTransparentUpgradeableProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockTransparentUpgradeableProxyUpgradedIterator, error)

	WatchTransparentUpgradeableProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockTransparentUpgradeableProxyUpgraded, implementation []common.Address) (event.Subscription, error)

	ParseTransparentUpgradeableProxyUpgraded(log types.Log) (*EventsMockTransparentUpgradeableProxyUpgraded, error)

	FilterVRFConsumerBaseV2UpgradeableInitialized(opts *bind.FilterOpts) (*EventsMockVRFConsumerBaseV2UpgradeableInitializedIterator, error)

	WatchVRFConsumerBaseV2UpgradeableInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockVRFConsumerBaseV2UpgradeableInitialized) (event.Subscription, error)

	ParseVRFConsumerBaseV2UpgradeableInitialized(log types.Log) (*EventsMockVRFConsumerBaseV2UpgradeableInitialized, error)

	FilterVRFConsumerV2UpgradeableExampleInitialized(opts *bind.FilterOpts) (*EventsMockVRFConsumerV2UpgradeableExampleInitializedIterator, error)

	WatchVRFConsumerV2UpgradeableExampleInitialized(opts *bind.WatchOpts, sink chan<- *EventsMockVRFConsumerV2UpgradeableExampleInitialized) (event.Subscription, error)

	ParseVRFConsumerV2UpgradeableExampleInitialized(log types.Log) (*EventsMockVRFConsumerV2UpgradeableExampleInitialized, error)

	FilterVRFCoordinatorMockRandomnessRequest(opts *bind.FilterOpts, sender []common.Address, keyHash [][32]byte, seed []*big.Int) (*EventsMockVRFCoordinatorMockRandomnessRequestIterator, error)

	WatchVRFCoordinatorMockRandomnessRequest(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorMockRandomnessRequest, sender []common.Address, keyHash [][32]byte, seed []*big.Int) (event.Subscription, error)

	ParseVRFCoordinatorMockRandomnessRequest(log types.Log) (*EventsMockVRFCoordinatorMockRandomnessRequest, error)

	FilterVRFCoordinatorV2TestHelperConfigSet(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2TestHelperConfigSetIterator, error)

	WatchVRFCoordinatorV2TestHelperConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperConfigSet) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperConfigSet(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperConfigSet, error)

	FilterVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2TestHelperFundsRecoveredIterator, error)

	WatchVRFCoordinatorV2TestHelperFundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperFundsRecovered) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperFundsRecovered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperFundsRecovered, error)

	FilterVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequestedIterator, error)

	WatchVRFCoordinatorV2TestHelperOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperOwnershipTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferRequested, error)

	FilterVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferredIterator, error)

	WatchVRFCoordinatorV2TestHelperOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperOwnershipTransferred(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperOwnershipTransferred, error)

	FilterVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregisteredIterator, error)

	WatchVRFCoordinatorV2TestHelperProvingKeyDeregistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered, oracle []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperProvingKeyDeregistered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyDeregistered, error)

	FilterVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyRegisteredIterator, error)

	WatchVRFCoordinatorV2TestHelperProvingKeyRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered, oracle []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperProvingKeyRegistered(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperProvingKeyRegistered, error)

	FilterVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilledIterator, error)

	WatchVRFCoordinatorV2TestHelperRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled, requestId []*big.Int) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperRandomWordsFulfilled(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsFulfilled, error)

	FilterVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte, subId []uint64, sender []common.Address) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsRequestedIterator, error)

	WatchVRFCoordinatorV2TestHelperRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested, keyHash [][32]byte, subId []uint64, sender []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperRandomWordsRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperRandomWordsRequested, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceledIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionCanceled(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCanceled, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAddedIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionConsumerAdded(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerAdded, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemovedIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionConsumerRemoved, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCreatedIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionCreated(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionCreated, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionFundedIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionFunded(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionFunded, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequestedIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferRequested, error)

	FilterVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferredIterator, error)

	WatchVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred(log types.Log) (*EventsMockVRFCoordinatorV2TestHelperSubscriptionOwnerTransferred, error)

	FilterVRFCoordinatorV2ConfigSet(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2ConfigSetIterator, error)

	WatchVRFCoordinatorV2ConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ConfigSet) (event.Subscription, error)

	ParseVRFCoordinatorV2ConfigSet(log types.Log) (*EventsMockVRFCoordinatorV2ConfigSet, error)

	FilterVRFCoordinatorV2FundsRecovered(opts *bind.FilterOpts) (*EventsMockVRFCoordinatorV2FundsRecoveredIterator, error)

	WatchVRFCoordinatorV2FundsRecovered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2FundsRecovered) (event.Subscription, error)

	ParseVRFCoordinatorV2FundsRecovered(log types.Log) (*EventsMockVRFCoordinatorV2FundsRecovered, error)

	FilterVRFCoordinatorV2OwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2OwnershipTransferRequestedIterator, error)

	WatchVRFCoordinatorV2OwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2OwnershipTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2OwnershipTransferRequested, error)

	FilterVRFCoordinatorV2OwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFCoordinatorV2OwnershipTransferredIterator, error)

	WatchVRFCoordinatorV2OwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2OwnershipTransferred(log types.Log) (*EventsMockVRFCoordinatorV2OwnershipTransferred, error)

	FilterVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2ProvingKeyDeregisteredIterator, error)

	WatchVRFCoordinatorV2ProvingKeyDeregistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ProvingKeyDeregistered, oracle []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2ProvingKeyDeregistered(log types.Log) (*EventsMockVRFCoordinatorV2ProvingKeyDeregistered, error)

	FilterVRFCoordinatorV2ProvingKeyRegistered(opts *bind.FilterOpts, oracle []common.Address) (*EventsMockVRFCoordinatorV2ProvingKeyRegisteredIterator, error)

	WatchVRFCoordinatorV2ProvingKeyRegistered(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2ProvingKeyRegistered, oracle []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2ProvingKeyRegistered(log types.Log) (*EventsMockVRFCoordinatorV2ProvingKeyRegistered, error)

	FilterVRFCoordinatorV2RandomWordsFulfilled(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFCoordinatorV2RandomWordsFulfilledIterator, error)

	WatchVRFCoordinatorV2RandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2RandomWordsFulfilled, requestId []*big.Int) (event.Subscription, error)

	ParseVRFCoordinatorV2RandomWordsFulfilled(log types.Log) (*EventsMockVRFCoordinatorV2RandomWordsFulfilled, error)

	FilterVRFCoordinatorV2RandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte, subId []uint64, sender []common.Address) (*EventsMockVRFCoordinatorV2RandomWordsRequestedIterator, error)

	WatchVRFCoordinatorV2RandomWordsRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte, subId []uint64, sender []common.Address) (event.Subscription, error)

	ParseVRFCoordinatorV2RandomWordsRequested(log types.Log) (*EventsMockVRFCoordinatorV2RandomWordsRequested, error)

	FilterVRFCoordinatorV2SubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionCanceledIterator, error)

	WatchVRFCoordinatorV2SubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionCanceled(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionCanceled, error)

	FilterVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionConsumerAddedIterator, error)

	WatchVRFCoordinatorV2SubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionConsumerAdded(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionConsumerAdded, error)

	FilterVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error)

	WatchVRFCoordinatorV2SubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionConsumerRemoved(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionConsumerRemoved, error)

	FilterVRFCoordinatorV2SubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionCreatedIterator, error)

	WatchVRFCoordinatorV2SubscriptionCreated(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionCreated(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionCreated, error)

	FilterVRFCoordinatorV2SubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionFundedIterator, error)

	WatchVRFCoordinatorV2SubscriptionFunded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionFunded(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionFunded, error)

	FilterVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error)

	WatchVRFCoordinatorV2SubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionOwnerTransferRequested(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferRequested, error)

	FilterVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error)

	WatchVRFCoordinatorV2SubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseVRFCoordinatorV2SubscriptionOwnerTransferred(log types.Log) (*EventsMockVRFCoordinatorV2SubscriptionOwnerTransferred, error)

	FilterVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequestedIterator, error)

	WatchVRFLoadTestExternalSubOwnerOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFLoadTestExternalSubOwnerOwnershipTransferRequested(log types.Log) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferRequested, error)

	FilterVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferredIterator, error)

	WatchVRFLoadTestExternalSubOwnerOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFLoadTestExternalSubOwnerOwnershipTransferred(log types.Log) (*EventsMockVRFLoadTestExternalSubOwnerOwnershipTransferred, error)

	FilterVRFV2ProxyAdminOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EventsMockVRFV2ProxyAdminOwnershipTransferredIterator, error)

	WatchVRFV2ProxyAdminOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2ProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseVRFV2ProxyAdminOwnershipTransferred(log types.Log) (*EventsMockVRFV2ProxyAdminOwnershipTransferred, error)

	FilterVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.FilterOpts) (*EventsMockVRFV2TransparentUpgradeableProxyAdminChangedIterator, error)

	WatchVRFV2TransparentUpgradeableProxyAdminChanged(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyAdminChanged) (event.Subscription, error)

	ParseVRFV2TransparentUpgradeableProxyAdminChanged(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyAdminChanged, error)

	FilterVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgradedIterator, error)

	WatchVRFV2TransparentUpgradeableProxyBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error)

	ParseVRFV2TransparentUpgradeableProxyBeaconUpgraded(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyBeaconUpgraded, error)

	FilterVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*EventsMockVRFV2TransparentUpgradeableProxyUpgradedIterator, error)

	WatchVRFV2TransparentUpgradeableProxyUpgraded(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2TransparentUpgradeableProxyUpgraded, implementation []common.Address) (event.Subscription, error)

	ParseVRFV2TransparentUpgradeableProxyUpgraded(log types.Log) (*EventsMockVRFV2TransparentUpgradeableProxyUpgraded, error)

	FilterVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequestedIterator, error)

	WatchVRFV2WrapperConsumerExampleOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFV2WrapperConsumerExampleOwnershipTransferRequested(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferRequested, error)

	FilterVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferredIterator, error)

	WatchVRFV2WrapperConsumerExampleOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFV2WrapperConsumerExampleOwnershipTransferred(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleOwnershipTransferred, error)

	FilterVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.FilterOpts) (*EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilledIterator, error)

	WatchVRFV2WrapperConsumerExampleWrappedRequestFulfilled(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled) (event.Subscription, error)

	ParseVRFV2WrapperConsumerExampleWrappedRequestFulfilled(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleWrappedRequestFulfilled, error)

	FilterVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.FilterOpts, requestId []*big.Int) (*EventsMockVRFV2WrapperConsumerExampleWrapperRequestMadeIterator, error)

	WatchVRFV2WrapperConsumerExampleWrapperRequestMade(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade, requestId []*big.Int) (event.Subscription, error)

	ParseVRFV2WrapperConsumerExampleWrapperRequestMade(log types.Log) (*EventsMockVRFV2WrapperConsumerExampleWrapperRequestMade, error)

	FilterVRFV2WrapperOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperOwnershipTransferRequestedIterator, error)

	WatchVRFV2WrapperOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFV2WrapperOwnershipTransferRequested(log types.Log) (*EventsMockVRFV2WrapperOwnershipTransferRequested, error)

	FilterVRFV2WrapperOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVRFV2WrapperOwnershipTransferredIterator, error)

	WatchVRFV2WrapperOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVRFV2WrapperOwnershipTransferred(log types.Log) (*EventsMockVRFV2WrapperOwnershipTransferred, error)

	FilterVRFV2WrapperWrapperFulfillmentFailed(opts *bind.FilterOpts, requestId []*big.Int, consumer []common.Address) (*EventsMockVRFV2WrapperWrapperFulfillmentFailedIterator, error)

	WatchVRFV2WrapperWrapperFulfillmentFailed(opts *bind.WatchOpts, sink chan<- *EventsMockVRFV2WrapperWrapperFulfillmentFailed, requestId []*big.Int, consumer []common.Address) (event.Subscription, error)

	ParseVRFV2WrapperWrapperFulfillmentFailed(log types.Log) (*EventsMockVRFV2WrapperWrapperFulfillmentFailed, error)

	FilterVerifierProxyAccessControllerSet(opts *bind.FilterOpts) (*EventsMockVerifierProxyAccessControllerSetIterator, error)

	WatchVerifierProxyAccessControllerSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyAccessControllerSet) (event.Subscription, error)

	ParseVerifierProxyAccessControllerSet(log types.Log) (*EventsMockVerifierProxyAccessControllerSet, error)

	FilterVerifierProxyOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierProxyOwnershipTransferRequestedIterator, error)

	WatchVerifierProxyOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVerifierProxyOwnershipTransferRequested(log types.Log) (*EventsMockVerifierProxyOwnershipTransferRequested, error)

	FilterVerifierProxyOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierProxyOwnershipTransferredIterator, error)

	WatchVerifierProxyOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVerifierProxyOwnershipTransferred(log types.Log) (*EventsMockVerifierProxyOwnershipTransferred, error)

	FilterVerifierProxyVerifierSet(opts *bind.FilterOpts) (*EventsMockVerifierProxyVerifierSetIterator, error)

	WatchVerifierProxyVerifierSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyVerifierSet) (event.Subscription, error)

	ParseVerifierProxyVerifierSet(log types.Log) (*EventsMockVerifierProxyVerifierSet, error)

	FilterVerifierProxyVerifierUnset(opts *bind.FilterOpts) (*EventsMockVerifierProxyVerifierUnsetIterator, error)

	WatchVerifierProxyVerifierUnset(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierProxyVerifierUnset) (event.Subscription, error)

	ParseVerifierProxyVerifierUnset(log types.Log) (*EventsMockVerifierProxyVerifierUnset, error)

	FilterVerifierConfigActivated(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigActivatedIterator, error)

	WatchVerifierConfigActivated(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigActivated, feedId [][32]byte) (event.Subscription, error)

	ParseVerifierConfigActivated(log types.Log) (*EventsMockVerifierConfigActivated, error)

	FilterVerifierConfigDeactivated(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigDeactivatedIterator, error)

	WatchVerifierConfigDeactivated(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigDeactivated, feedId [][32]byte) (event.Subscription, error)

	ParseVerifierConfigDeactivated(log types.Log) (*EventsMockVerifierConfigDeactivated, error)

	FilterVerifierConfigSet(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierConfigSetIterator, error)

	WatchVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierConfigSet, feedId [][32]byte) (event.Subscription, error)

	ParseVerifierConfigSet(log types.Log) (*EventsMockVerifierConfigSet, error)

	FilterVerifierOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierOwnershipTransferRequestedIterator, error)

	WatchVerifierOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVerifierOwnershipTransferRequested(log types.Log) (*EventsMockVerifierOwnershipTransferRequested, error)

	FilterVerifierOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EventsMockVerifierOwnershipTransferredIterator, error)

	WatchVerifierOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseVerifierOwnershipTransferred(log types.Log) (*EventsMockVerifierOwnershipTransferred, error)

	FilterVerifierReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*EventsMockVerifierReportVerifiedIterator, error)

	WatchVerifierReportVerified(opts *bind.WatchOpts, sink chan<- *EventsMockVerifierReportVerified, feedId [][32]byte) (event.Subscription, error)

	ParseVerifierReportVerified(log types.Log) (*EventsMockVerifierReportVerified, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
