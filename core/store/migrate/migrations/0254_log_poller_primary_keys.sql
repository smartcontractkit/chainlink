-- +goose Up

-- Replace (block_hash, log_index, evm_chain_id) primary key on evm.log_poller_blocks with new id column
ALTER TABLE evm.logs DROP CONSTRAINT logs_pkey;
ALTER TABLE evm.logs ADD COLUMN id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY;
-- Replaces previous primary key index, but also useful for accelerating DeleteLogsAndBlocksAfter
--   This also strengthens the uniqueness requirement, ensuring that we can't insert logs for two different blocks
--   with the same block number but different block hashes--something which would corrupt the db
CREATE UNIQUE INDEX idx_logs_chain_block_logindex ON evm.logs (evm_chain_id, block_number, log_index);

-- Previously used for WHERE evm_chain_id = $1 AND address = $2 AND event_sig = $3 ... ORDER BY block_number, created_at
DROP INDEX IF EXISTS evm.idx_evm_logs_ordered_by_block_and_created_at;
-- Useful for the current form of those queries:  WHERE evm_chain_id = $1 AND address = $2 AND event_sig = $3 ... ORDER BY block_number, log_index
CREATE INDEX idx_logs_chain_address_event_block_logindex ON evm.logs (evm_chain_id, address, event_sig, block_number, log_index);

-- Replace (block_number, evm_chain_id) primary key on evm.log_poller_blocks with new id column
ALTER TABLE evm.log_poller_blocks DROP CONSTRAINT log_poller_blocks_pkey;
ALTER TABLE evm.log_poller_blocks ADD COLUMN id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY;

-- Add UNIQUE keyword to (evm_chain_id, block_number DESC) index (and rename for consistency)
--   This index is useful for any query for logs which includies a "confs" param, and for DeleteBlocksBefore, DeleteLogsAndBlocksAfter, etc.
--   Prior to this we also had a separate UNIQUE INDEX for (block_number, evm_chain_id) generated by the primary key defintion.
--   Adding the UNIQUE keyword to this allows us to combine the two indices into a single index, saving on disk space--with the
--   added benefit of making insertions into this index slightly faster (since it can rely on the keys being unique)
DROP INDEX IF EXISTS evm.idx_evm_log_poller_blocks_order_by_block;
CREATE UNIQUE INDEX idx_log_poller_blocks_chain_block ON evm.log_poller_blocks (evm_chain_id, block_number DESC);

-- +goose Down

-- revert evm.log_poller_blocks
DROP INDEX IF EXISTS evm.idx_log_poller_blocks_chain_block;
CREATE INDEX idx_evm_log_poller_blocks_order_by_block ON evm.log_poller_blocks (evm_chain_id, block_number DESC);
ALTER TABLE evm.log_poller_blocks DROP COLUMN id;
ALTER TABLE evm.log_poller_blocks ADD PRIMARY KEY (block_number, evm_chain_id);

-- revert evm.logs
DROP INDEX IF EXISTS evm.idx_logs_chain_address_event_block_logindex;
CREATE INDEX idx_evm_logs_ordered_by_block_and_created_at ON evm.logs (evm_chain_id, address, event_sig, block_number, created_at);
DROP INDEX IF EXISTS evm.idx_logs_chain_block_logindex;
ALTER TABLE evm.logs DROP COLUMN id;
ALTER TABLE evm.logs ADD PRIMARY KEY (block_hash, log_index, evm_chain_id);
