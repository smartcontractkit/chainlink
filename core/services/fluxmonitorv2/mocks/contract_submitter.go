// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// ContractSubmitter is an autogenerated mock type for the ContractSubmitter type
type ContractSubmitter struct {
	mock.Mock
}

// Submit provides a mock function with given fields: ctx, roundID, submission, idempotencyKey
func (_m *ContractSubmitter) Submit(ctx context.Context, roundID *big.Int, submission *big.Int, idempotencyKey *string) error {
	ret := _m.Called(ctx, roundID, submission, idempotencyKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, *big.Int, *string) error); ok {
		r0 = rf(ctx, roundID, submission, idempotencyKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContractSubmitter creates a new instance of ContractSubmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractSubmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractSubmitter {
	mock := &ContractSubmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
