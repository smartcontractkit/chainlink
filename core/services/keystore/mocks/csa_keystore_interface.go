// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	csakey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/csakey"
	crypto "github.com/smartcontractkit/chainlink/core/utils/crypto"

	mock "github.com/stretchr/testify/mock"
)

// CSAKeystoreInterface is an autogenerated mock type for the CSAKeystoreInterface type
type CSAKeystoreInterface struct {
	mock.Mock
}

// CreateCSAKey provides a mock function with given fields:
func (_m *CSAKeystoreInterface) CreateCSAKey() (*csakey.Key, error) {
	ret := _m.Called()

	var r0 *csakey.Key
	if rf, ok := ret.Get(0).(func() *csakey.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csakey.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCSAKeys provides a mock function with given fields:
func (_m *CSAKeystoreInterface) ListCSAKeys() ([]csakey.Key, error) {
	ret := _m.Called()

	var r0 []csakey.Key
	if rf, ok := ret.Get(0).(func() []csakey.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]csakey.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsafe_GetUnlockedPrivateKey provides a mock function with given fields: pubkey
func (_m *CSAKeystoreInterface) Unsafe_GetUnlockedPrivateKey(pubkey crypto.PublicKey) ([]byte, error) {
	ret := _m.Called(pubkey)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(crypto.PublicKey) []byte); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(crypto.PublicKey) error); ok {
		r1 = rf(pubkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
