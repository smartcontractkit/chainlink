// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	ocr2key "github.com/smartcontractkit/chainlink/core/services/keystore/keys/ocr2key"
	mock "github.com/stretchr/testify/mock"
)

// OCR2 is an autogenerated mock type for the OCR2 type
type OCR2 struct {
	mock.Mock
}

// Create provides a mock function with given fields:
func (_m *OCR2) Create() (ocr2key.KeyBundle, error) {
	ret := _m.Called()

	var r0 ocr2key.KeyBundle
	if rf, ok := ret.Get(0).(func() ocr2key.KeyBundle); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ocr2key.KeyBundle)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *OCR2) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *OCR2) Get(id string) (ocr2key.KeyBundle, error) {
	ret := _m.Called(id)

	var r0 ocr2key.KeyBundle
	if rf, ok := ret.Get(0).(func(string) ocr2key.KeyBundle); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(ocr2key.KeyBundle)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *OCR2) GetAll() ([]ocr2key.KeyBundle, error) {
	ret := _m.Called()

	var r0 []ocr2key.KeyBundle
	if rf, ok := ret.Get(0).(func() []ocr2key.KeyBundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ocr2key.KeyBundle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
