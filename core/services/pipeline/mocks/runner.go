// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	logger "github.com/smartcontractkit/chainlink/core/logger"
	mock "github.com/stretchr/testify/mock"

	pipeline "github.com/smartcontractkit/chainlink/core/services/pipeline"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Runner) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteAndInsertFinishedRun provides a mock function with given fields: ctx, spec, meta, l, saveSuccessfulTaskRuns
func (_m *Runner) ExecuteAndInsertFinishedRun(ctx context.Context, spec pipeline.Spec, meta pipeline.JSONSerializable, l logger.Logger, saveSuccessfulTaskRuns bool) (int64, pipeline.FinalResult, error) {
	ret := _m.Called(ctx, spec, meta, l, saveSuccessfulTaskRuns)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, pipeline.Spec, pipeline.JSONSerializable, logger.Logger, bool) int64); ok {
		r0 = rf(ctx, spec, meta, l, saveSuccessfulTaskRuns)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 pipeline.FinalResult
	if rf, ok := ret.Get(1).(func(context.Context, pipeline.Spec, pipeline.JSONSerializable, logger.Logger, bool) pipeline.FinalResult); ok {
		r1 = rf(ctx, spec, meta, l, saveSuccessfulTaskRuns)
	} else {
		r1 = ret.Get(1).(pipeline.FinalResult)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, pipeline.Spec, pipeline.JSONSerializable, logger.Logger, bool) error); ok {
		r2 = rf(ctx, spec, meta, l, saveSuccessfulTaskRuns)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteRun provides a mock function with given fields: ctx, spec, meta, l
func (_m *Runner) ExecuteRun(ctx context.Context, spec pipeline.Spec, meta pipeline.JSONSerializable, l logger.Logger) (pipeline.TaskRunResults, error) {
	ret := _m.Called(ctx, spec, meta, l)

	var r0 pipeline.TaskRunResults
	if rf, ok := ret.Get(0).(func(context.Context, pipeline.Spec, pipeline.JSONSerializable, logger.Logger) pipeline.TaskRunResults); ok {
		r0 = rf(ctx, spec, meta, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipeline.TaskRunResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pipeline.Spec, pipeline.JSONSerializable, logger.Logger) error); ok {
		r1 = rf(ctx, spec, meta, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFinishedRun provides a mock function with given fields: ctx, run, trrs, saveSuccessfulTaskRuns
func (_m *Runner) InsertFinishedRun(ctx context.Context, run pipeline.Run, trrs pipeline.TaskRunResults, saveSuccessfulTaskRuns bool) (int64, error) {
	ret := _m.Called(ctx, run, trrs, saveSuccessfulTaskRuns)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, pipeline.Run, pipeline.TaskRunResults, bool) int64); ok {
		r0 = rf(ctx, run, trrs, saveSuccessfulTaskRuns)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pipeline.Run, pipeline.TaskRunResults, bool) error); ok {
		r1 = rf(ctx, run, trrs, saveSuccessfulTaskRuns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Runner) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
