// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	logger "github.com/smartcontractkit/chainlink/core/logger"
	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"

	time "time"

	url "net/url"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// BridgeResponseURL provides a mock function with given fields: _a0
func (_m *Config) BridgeResponseURL(_a0 logger.Logger) *url.URL {
	ret := _m.Called(_a0)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(logger.Logger) *url.URL); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// DatabaseURL provides a mock function with given fields:
func (_m *Config) DatabaseURL() (url.URL, error) {
	ret := _m.Called()

	var r0 url.URL
	if rf, ok := ret.Get(0).(func() url.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultHTTPAllowUnrestrictedNetworkAccess provides a mock function with given fields:
func (_m *Config) DefaultHTTPAllowUnrestrictedNetworkAccess() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DefaultHTTPLimit provides a mock function with given fields:
func (_m *Config) DefaultHTTPLimit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DefaultHTTPTimeout provides a mock function with given fields: _a0
func (_m *Config) DefaultHTTPTimeout(_a0 logger.Logger) models.Duration {
	ret := _m.Called(_a0)

	var r0 models.Duration
	if rf, ok := ret.Get(0).(func(logger.Logger) models.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Duration)
	}

	return r0
}

<<<<<<< HEAD
// DefaultMaxHTTPAttempts provides a mock function with given fields: _a0
func (_m *Config) DefaultMaxHTTPAttempts(_a0 logger.Logger) uint {
	ret := _m.Called(_a0)

	var r0 uint
	if rf, ok := ret.Get(0).(func(logger.Logger) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// JobPipelineMaxRunDuration provides a mock function with given fields: _a0
func (_m *Config) JobPipelineMaxRunDuration(_a0 logger.Logger) time.Duration {
	ret := _m.Called(_a0)
=======
// JobPipelineMaxRunDuration provides a mock function with given fields:
func (_m *Config) JobPipelineMaxRunDuration() time.Duration {
	ret := _m.Called()
>>>>>>> e76391da9 (Remove unused env vars and re-organise to match documentation layout)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(logger.Logger) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperInterval provides a mock function with given fields: _a0
func (_m *Config) JobPipelineReaperInterval(_a0 logger.Logger) time.Duration {
	ret := _m.Called(_a0)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(logger.Logger) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JobPipelineReaperThreshold provides a mock function with given fields: _a0
func (_m *Config) JobPipelineReaperThreshold(_a0 logger.Logger) time.Duration {
	ret := _m.Called(_a0)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(logger.Logger) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TriggerFallbackDBPollInterval provides a mock function with given fields: _a0
func (_m *Config) TriggerFallbackDBPollInterval(_a0 logger.Logger) time.Duration {
	ret := _m.Called(_a0)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(logger.Logger) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}
