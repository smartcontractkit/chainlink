// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	feeds "github.com/smartcontractkit/chainlink/core/services/feeds"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/core/services/pg"

	uuid "github.com/satori/go.uuid"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// ApproveSpec provides a mock function with given fields: id, externalJobID, qopts
func (_m *ORM) ApproveSpec(id int64, externalJobID uuid.UUID, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, externalJobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, uuid.UUID, ...pg.QOpt) error); ok {
		r0 = rf(id, externalJobID, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelSpec provides a mock function with given fields: id, qopts
func (_m *ORM) CancelSpec(id int64, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) error); ok {
		r0 = rf(id, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountJobProposals provides a mock function with given fields:
func (_m *ORM) CountJobProposals() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountManagers provides a mock function with given fields:
func (_m *ORM) CountManagers() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatchChainConfig provides a mock function with given fields: cfgs, qopts
func (_m *ORM) CreateBatchChainConfig(cfgs []feeds.ChainConfig, qopts ...pg.QOpt) ([]int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cfgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []int64
	if rf, ok := ret.Get(0).(func([]feeds.ChainConfig, ...pg.QOpt) []int64); ok {
		r0 = rf(cfgs, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]feeds.ChainConfig, ...pg.QOpt) error); ok {
		r1 = rf(cfgs, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChainConfig provides a mock function with given fields: cfg, qopts
func (_m *ORM) CreateChainConfig(cfg feeds.ChainConfig, qopts ...pg.QOpt) (int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cfg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(feeds.ChainConfig, ...pg.QOpt) int64); ok {
		r0 = rf(cfg, qopts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(feeds.ChainConfig, ...pg.QOpt) error); ok {
		r1 = rf(cfg, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobProposal provides a mock function with given fields: jp
func (_m *ORM) CreateJobProposal(jp *feeds.JobProposal) (int64, error) {
	ret := _m.Called(jp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*feeds.JobProposal) int64); ok {
		r0 = rf(jp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*feeds.JobProposal) error); ok {
		r1 = rf(jp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManager provides a mock function with given fields: ms, qopts
func (_m *ORM) CreateManager(ms *feeds.FeedsManager, qopts ...pg.QOpt) (int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ms)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*feeds.FeedsManager, ...pg.QOpt) int64); ok {
		r0 = rf(ms, qopts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*feeds.FeedsManager, ...pg.QOpt) error); ok {
		r1 = rf(ms, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpec provides a mock function with given fields: spec, qopts
func (_m *ORM) CreateSpec(spec feeds.JobProposalSpec, qopts ...pg.QOpt) (int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spec)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(feeds.JobProposalSpec, ...pg.QOpt) int64); ok {
		r0 = rf(spec, qopts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(feeds.JobProposalSpec, ...pg.QOpt) error); ok {
		r1 = rf(spec, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChainConfig provides a mock function with given fields: id
func (_m *ORM) DeleteChainConfig(id int64) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsSpecByJobProposalIDAndVersion provides a mock function with given fields: jpID, version, qopts
func (_m *ORM) ExistsSpecByJobProposalIDAndVersion(jpID int64, version int32, qopts ...pg.QOpt) (bool, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, jpID, version)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int32, ...pg.QOpt) bool); ok {
		r0 = rf(jpID, version, qopts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, ...pg.QOpt) error); ok {
		r1 = rf(jpID, version, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainConfig provides a mock function with given fields: id
func (_m *ORM) GetChainConfig(id int64) (*feeds.ChainConfig, error) {
	ret := _m.Called(id)

	var r0 *feeds.ChainConfig
	if rf, ok := ret.Get(0).(func(int64) *feeds.ChainConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.ChainConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobProposal provides a mock function with given fields: id, qopts
func (_m *ORM) GetJobProposal(id int64, qopts ...pg.QOpt) (*feeds.JobProposal, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *feeds.JobProposal
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) *feeds.JobProposal); ok {
		r0 = rf(id, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.JobProposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, ...pg.QOpt) error); ok {
		r1 = rf(id, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobProposalByRemoteUUID provides a mock function with given fields: _a0
func (_m *ORM) GetJobProposalByRemoteUUID(_a0 uuid.UUID) (*feeds.JobProposal, error) {
	ret := _m.Called(_a0)

	var r0 *feeds.JobProposal
	if rf, ok := ret.Get(0).(func(uuid.UUID) *feeds.JobProposal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.JobProposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestSpec provides a mock function with given fields: jpID
func (_m *ORM) GetLatestSpec(jpID int64) (*feeds.JobProposalSpec, error) {
	ret := _m.Called(jpID)

	var r0 *feeds.JobProposalSpec
	if rf, ok := ret.Get(0).(func(int64) *feeds.JobProposalSpec); ok {
		r0 = rf(jpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.JobProposalSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(jpID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManager provides a mock function with given fields: id
func (_m *ORM) GetManager(id int64) (*feeds.FeedsManager, error) {
	ret := _m.Called(id)

	var r0 *feeds.FeedsManager
	if rf, ok := ret.Get(0).(func(int64) *feeds.FeedsManager); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.FeedsManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpec provides a mock function with given fields: id, qopts
func (_m *ORM) GetSpec(id int64, qopts ...pg.QOpt) (*feeds.JobProposalSpec, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *feeds.JobProposalSpec
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) *feeds.JobProposalSpec); ok {
		r0 = rf(id, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*feeds.JobProposalSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, ...pg.QOpt) error); ok {
		r1 = rf(id, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsJobManaged provides a mock function with given fields: jobID, qopts
func (_m *ORM) IsJobManaged(jobID int64, qopts ...pg.QOpt) (bool, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) bool); ok {
		r0 = rf(jobID, qopts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, ...pg.QOpt) error); ok {
		r1 = rf(jobID, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChainConfigsByManagerIDs provides a mock function with given fields: mgrIDs
func (_m *ORM) ListChainConfigsByManagerIDs(mgrIDs []int64) ([]feeds.ChainConfig, error) {
	ret := _m.Called(mgrIDs)

	var r0 []feeds.ChainConfig
	if rf, ok := ret.Get(0).(func([]int64) []feeds.ChainConfig); ok {
		r0 = rf(mgrIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.ChainConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(mgrIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobProposals provides a mock function with given fields:
func (_m *ORM) ListJobProposals() ([]feeds.JobProposal, error) {
	ret := _m.Called()

	var r0 []feeds.JobProposal
	if rf, ok := ret.Get(0).(func() []feeds.JobProposal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.JobProposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobProposalsByManagersIDs provides a mock function with given fields: ids, qopts
func (_m *ORM) ListJobProposalsByManagersIDs(ids []int64, qopts ...pg.QOpt) ([]feeds.JobProposal, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ids)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []feeds.JobProposal
	if rf, ok := ret.Get(0).(func([]int64, ...pg.QOpt) []feeds.JobProposal); ok {
		r0 = rf(ids, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.JobProposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64, ...pg.QOpt) error); ok {
		r1 = rf(ids, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagers provides a mock function with given fields:
func (_m *ORM) ListManagers() ([]feeds.FeedsManager, error) {
	ret := _m.Called()

	var r0 []feeds.FeedsManager
	if rf, ok := ret.Get(0).(func() []feeds.FeedsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.FeedsManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagersByIDs provides a mock function with given fields: ids
func (_m *ORM) ListManagersByIDs(ids []int64) ([]feeds.FeedsManager, error) {
	ret := _m.Called(ids)

	var r0 []feeds.FeedsManager
	if rf, ok := ret.Get(0).(func([]int64) []feeds.FeedsManager); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.FeedsManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpecsByJobProposalIDs provides a mock function with given fields: ids, qopts
func (_m *ORM) ListSpecsByJobProposalIDs(ids []int64, qopts ...pg.QOpt) ([]feeds.JobProposalSpec, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ids)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []feeds.JobProposalSpec
	if rf, ok := ret.Get(0).(func([]int64, ...pg.QOpt) []feeds.JobProposalSpec); ok {
		r0 = rf(ids, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feeds.JobProposalSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64, ...pg.QOpt) error); ok {
		r1 = rf(ids, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectSpec provides a mock function with given fields: id, qopts
func (_m *ORM) RejectSpec(id int64, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, ...pg.QOpt) error); ok {
		r0 = rf(id, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChainConfig provides a mock function with given fields: cfg
func (_m *ORM) UpdateChainConfig(cfg feeds.ChainConfig) (int64, error) {
	ret := _m.Called(cfg)

	var r0 int64
	if rf, ok := ret.Get(0).(func(feeds.ChainConfig) int64); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(feeds.ChainConfig) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobProposalStatus provides a mock function with given fields: id, status, qopts
func (_m *ORM) UpdateJobProposalStatus(id int64, status feeds.JobProposalStatus, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, feeds.JobProposalStatus, ...pg.QOpt) error); ok {
		r0 = rf(id, status, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateManager provides a mock function with given fields: mgr, qopts
func (_m *ORM) UpdateManager(mgr feeds.FeedsManager, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, mgr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(feeds.FeedsManager, ...pg.QOpt) error); ok {
		r0 = rf(mgr, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSpecDefinition provides a mock function with given fields: id, spec, qopts
func (_m *ORM) UpdateSpecDefinition(id int64, spec string, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, spec)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, ...pg.QOpt) error); ok {
		r0 = rf(id, spec, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertJobProposal provides a mock function with given fields: jp, qopts
func (_m *ORM) UpsertJobProposal(jp *feeds.JobProposal, qopts ...pg.QOpt) (int64, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, jp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*feeds.JobProposal, ...pg.QOpt) int64); ok {
		r0 = rf(jp, qopts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*feeds.JobProposal, ...pg.QOpt) error); ok {
		r1 = rf(jp, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewORM interface {
	mock.TestingT
	Cleanup(func())
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORM(t mockConstructorTestingTNewORM) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
