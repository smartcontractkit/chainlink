// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	models "github.com/smartcontractkit/chainlink/core/store/models"
	mock "github.com/stretchr/testify/mock"
)

// ExternalInitiatorManager is an autogenerated mock type for the ExternalInitiatorManager type
type ExternalInitiatorManager struct {
	mock.Mock
}

// DeleteJob provides a mock function with given fields: webhookSpecID
func (_m *ExternalInitiatorManager) DeleteJob(webhookSpecID int32) error {
	ret := _m.Called(webhookSpecID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(webhookSpecID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindExternalInitiatorByName provides a mock function with given fields: name
func (_m *ExternalInitiatorManager) FindExternalInitiatorByName(name string) (models.ExternalInitiator, error) {
	ret := _m.Called(name)

	var r0 models.ExternalInitiator
	if rf, ok := ret.Get(0).(func(string) models.ExternalInitiator); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.ExternalInitiator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notify provides a mock function with given fields: webhookSpecID
func (_m *ExternalInitiatorManager) Notify(webhookSpecID int32) error {
	ret := _m.Called(webhookSpecID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(webhookSpecID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
