// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// BHS is an autogenerated mock type for the BHS type
type BHS struct {
	mock.Mock
}

// IsStored provides a mock function with given fields: ctx, blockNum
func (_m *BHS) IsStored(ctx context.Context, blockNum uint64) (bool, error) {
	ret := _m.Called(ctx, blockNum)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, blockNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, blockNum)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTrusted provides a mock function with given fields:
func (_m *BHS) IsTrusted() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, blockNum
func (_m *BHS) Store(ctx context.Context, blockNum uint64) error {
	ret := _m.Called(ctx, blockNum)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, blockNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreEarliest provides a mock function with given fields: ctx
func (_m *BHS) StoreEarliest(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreTrusted provides a mock function with given fields: ctx, blockNums, blockhashes, recentBlock, recentBlockhash
func (_m *BHS) StoreTrusted(ctx context.Context, blockNums []uint64, blockhashes []common.Hash, recentBlock uint64, recentBlockhash common.Hash) error {
	ret := _m.Called(ctx, blockNums, blockhashes, recentBlock, recentBlockhash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, []common.Hash, uint64, common.Hash) error); ok {
		r0 = rf(ctx, blockNums, blockhashes, recentBlock, recentBlockhash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBHS creates a new instance of BHS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBHS(t interface {
	mock.TestingT
	Cleanup(func())
}) *BHS {
	mock := &BHS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
