// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/v2/core/services/pg"

	s4 "github.com/smartcontractkit/chainlink/v2/core/services/s4"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// DeleteExpired provides a mock function with given fields: qopts
func (_m *ORM) DeleteExpired(qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...pg.QOpt) error); ok {
		r0 = rf(qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: address, slotId, qopts
func (_m *ORM) Get(address common.Address, slotId uint, qopts ...pg.QOpt) (*s4.Row, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address, slotId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s4.Row
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, uint, ...pg.QOpt) (*s4.Row, error)); ok {
		return rf(address, slotId, qopts...)
	}
	if rf, ok := ret.Get(0).(func(common.Address, uint, ...pg.QOpt) *s4.Row); ok {
		r0 = rf(address, slotId, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s4.Row)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, uint, ...pg.QOpt) error); ok {
		r1 = rf(address, slotId, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: minAddress, maxAddress, qopts
func (_m *ORM) GetSnapshot(minAddress *big.Int, maxAddress *big.Int, qopts ...pg.QOpt) ([]*s4.Row, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, minAddress, maxAddress)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*s4.Row
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int, ...pg.QOpt) ([]*s4.Row, error)); ok {
		return rf(minAddress, maxAddress, qopts...)
	}
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int, ...pg.QOpt) []*s4.Row); ok {
		r0 = rf(minAddress, maxAddress, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*s4.Row)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int, *big.Int, ...pg.QOpt) error); ok {
		r1 = rf(minAddress, maxAddress, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: row, qopts
func (_m *ORM) Update(row *s4.Row, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, row)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s4.Row, ...pg.QOpt) error); ok {
		r0 = rf(row, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewORM interface {
	mock.TestingT
	Cleanup(func())
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORM(t mockConstructorTestingTNewORM) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
