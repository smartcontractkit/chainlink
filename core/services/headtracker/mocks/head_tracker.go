// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	eth "github.com/smartcontractkit/chainlink/core/services/eth"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/core/services/headtracker/types"

	zapcore "go.uber.org/zap/zapcore"
)

// HeadTracker is an autogenerated mock type for the HeadTracker type
type HeadTracker struct {
	mock.Mock
}

// Backfill provides a mock function with given fields: ctx, headWithChain, depth
func (_m *HeadTracker) Backfill(ctx context.Context, headWithChain *eth.Head, depth uint) error {
	ret := _m.Called(ctx, headWithChain, depth)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eth.Head, uint) error); ok {
		r0 = rf(ctx, headWithChain, depth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *HeadTracker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Healthy provides a mock function with given fields:
func (_m *HeadTracker) Healthy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listener provides a mock function with given fields:
func (_m *HeadTracker) Listener() types.HeadListener {
	ret := _m.Called()

	var r0 types.HeadListener
	if rf, ok := ret.Get(0).(func() types.HeadListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.HeadListener)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *HeadTracker) Ready() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Saver provides a mock function with given fields:
func (_m *HeadTracker) Saver() types.HeadSaver {
	ret := _m.Called()

	var r0 types.HeadSaver
	if rf, ok := ret.Get(0).(func() types.HeadSaver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.HeadSaver)
		}
	}

	return r0
}

// SetLogLevel provides a mock function with given fields: lvl
func (_m *HeadTracker) SetLogLevel(lvl zapcore.Level) {
	_m.Called(lvl)
}

// Start provides a mock function with given fields:
func (_m *HeadTracker) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
