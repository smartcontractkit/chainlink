// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	synchronization "github.com/smartcontractkit/chainlink/v2/core/services/synchronization"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// ExplorerClient is an autogenerated mock type for the ExplorerClient type
type ExplorerClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ExplorerClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthReport provides a mock function with given fields:
func (_m *ExplorerClient) HealthReport() map[string]error {
	ret := _m.Called()

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ExplorerClient) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *ExplorerClient) Ready() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields: _a0, _a1
func (_m *ExplorerClient) Receive(_a0 context.Context, _a1 ...time.Duration) ([]byte, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...time.Duration) ([]byte, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...time.Duration) []byte); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...time.Duration) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: _a0, _a1, _a2
func (_m *ExplorerClient) Send(_a0 context.Context, _a1 []byte, _a2 ...int) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Start provides a mock function with given fields: _a0
func (_m *ExplorerClient) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *ExplorerClient) Status() synchronization.ConnectionStatus {
	ret := _m.Called()

	var r0 synchronization.ConnectionStatus
	if rf, ok := ret.Get(0).(func() synchronization.ConnectionStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(synchronization.ConnectionStatus)
	}

	return r0
}

// Url provides a mock function with given fields:
func (_m *ExplorerClient) Url() url.URL {
	ret := _m.Called()

	var r0 url.URL
	if rf, ok := ret.Get(0).(func() url.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	return r0
}

type mockConstructorTestingTNewExplorerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewExplorerClient creates a new instance of ExplorerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExplorerClient(t mockConstructorTestingTNewExplorerClient) *ExplorerClient {
	mock := &ExplorerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
