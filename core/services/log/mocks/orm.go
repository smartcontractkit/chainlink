// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// DeleteLogAndBroadcasts provides a mock function with given fields: blockHash, logIndex
func (_m *ORM) DeleteLogAndBroadcasts(blockHash common.Hash, logIndex uint) error {
	ret := _m.Called(blockHash, logIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, uint) error); ok {
		r0 = rf(blockHash, logIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnconsumedBroadcastsForListener provides a mock function with given fields: jobID, jobIDV2
func (_m *ORM) DeleteUnconsumedBroadcastsForListener(jobID *models.ID, jobIDV2 int32) error {
	ret := _m.Called(jobID, jobIDV2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ID, int32) error); ok {
		r0 = rf(jobID, jobIDV2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkBroadcastConsumed provides a mock function with given fields: blockHash, logIndex, jobID, jobIDV2
func (_m *ORM) MarkBroadcastConsumed(blockHash common.Hash, logIndex uint, jobID *models.ID, jobIDV2 int32) error {
	ret := _m.Called(blockHash, logIndex, jobID, jobIDV2)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, uint, *models.ID, int32) error); ok {
		r0 = rf(blockHash, logIndex, jobID, jobIDV2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnconsumedLogsPriorToBlock provides a mock function with given fields: blockNumber
func (_m *ORM) UnconsumedLogsPriorToBlock(blockNumber uint64) ([]types.Log, error) {
	ret := _m.Called(blockNumber)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(uint64) []types.Log); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertLog provides a mock function with given fields: _a0
func (_m *ORM) UpsertLog(_a0 types.Log) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Log) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertLogBroadcastForListener provides a mock function with given fields: _a0, jobID, jobIDV2
func (_m *ORM) UpsertLogBroadcastForListener(_a0 types.Log, jobID *models.ID, jobIDV2 int32) error {
	ret := _m.Called(_a0, jobID, jobIDV2)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Log, *models.ID, int32) error); ok {
		r0 = rf(_a0, jobID, jobIDV2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WasBroadcastConsumed provides a mock function with given fields: blockHash, logIndex, jobID, jobIDV2
func (_m *ORM) WasBroadcastConsumed(blockHash common.Hash, logIndex uint, jobID *models.ID, jobIDV2 int32) (bool, error) {
	ret := _m.Called(blockHash, logIndex, jobID, jobIDV2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Hash, uint, *models.ID, int32) bool); ok {
		r0 = rf(blockHash, logIndex, jobID, jobIDV2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash, uint, *models.ID, int32) error); ok {
		r1 = rf(blockHash, logIndex, jobID, jobIDV2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
