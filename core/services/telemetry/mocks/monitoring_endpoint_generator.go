// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	commontypes "github.com/smartcontractkit/libocr/commontypes"
	mock "github.com/stretchr/testify/mock"

	synchronization "github.com/smartcontractkit/chainlink/v2/core/services/synchronization"
)

// MonitoringEndpointGenerator is an autogenerated mock type for the MonitoringEndpointGenerator type
type MonitoringEndpointGenerator struct {
	mock.Mock
}

// GenMonitoringEndpoint provides a mock function with given fields: network, chainID, contractID, telemType
func (_m *MonitoringEndpointGenerator) GenMonitoringEndpoint(network string, chainID string, contractID string, telemType synchronization.TelemetryType) commontypes.MonitoringEndpoint {
	ret := _m.Called(network, chainID, contractID, telemType)

	if len(ret) == 0 {
		panic("no return value specified for GenMonitoringEndpoint")
	}

	var r0 commontypes.MonitoringEndpoint
	if rf, ok := ret.Get(0).(func(string, string, string, synchronization.TelemetryType) commontypes.MonitoringEndpoint); ok {
		r0 = rf(network, chainID, contractID, telemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commontypes.MonitoringEndpoint)
		}
	}

	return r0
}

// NewMonitoringEndpointGenerator creates a new instance of MonitoringEndpointGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitoringEndpointGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitoringEndpointGenerator {
	mock := &MonitoringEndpointGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
