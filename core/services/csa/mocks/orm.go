// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	csa "github.com/smartcontractkit/chainlink/core/services/csa"
	mock "github.com/stretchr/testify/mock"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// CountCSAKeys provides a mock function with given fields:
func (_m *ORM) CountCSAKeys() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCSAKey provides a mock function with given fields: ctx, kp
func (_m *ORM) CreateCSAKey(ctx context.Context, kp *csa.CSAKey) (uint, error) {
	ret := _m.Called(ctx, kp)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *csa.CSAKey) uint); ok {
		r0 = rf(ctx, kp)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *csa.CSAKey) error); ok {
		r1 = rf(ctx, kp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCSAKey provides a mock function with given fields: ctx, id
func (_m *ORM) GetCSAKey(ctx context.Context, id uint) (*csa.CSAKey, error) {
	ret := _m.Called(ctx, id)

	var r0 *csa.CSAKey
	if rf, ok := ret.Get(0).(func(context.Context, uint) *csa.CSAKey); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.CSAKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCSAKeys provides a mock function with given fields: ctx
func (_m *ORM) ListCSAKeys(ctx context.Context) ([]csa.CSAKey, error) {
	ret := _m.Called(ctx)

	var r0 []csa.CSAKey
	if rf, ok := ret.Get(0).(func(context.Context) []csa.CSAKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]csa.CSAKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
