// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	csa "github.com/smartcontractkit/chainlink/core/services/csa"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CountCSAKeys provides a mock function with given fields:
func (_m *Service) CountCSAKeys() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCSAKey provides a mock function with given fields:
func (_m *Service) CreateCSAKey() (*csa.CSAKey, error) {
	ret := _m.Called()

	var r0 *csa.CSAKey
	if rf, ok := ret.Get(0).(func() *csa.CSAKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.CSAKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCSAKeys provides a mock function with given fields:
func (_m *Service) ListCSAKeys() ([]csa.CSAKey, error) {
	ret := _m.Called()

	var r0 []csa.CSAKey
	if rf, ok := ret.Get(0).(func() []csa.CSAKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]csa.CSAKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
