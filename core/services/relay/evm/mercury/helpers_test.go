package mercury

import (
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/smartcontractkit/chainlink/core/utils"
	ocrtypes "github.com/smartcontractkit/libocr/offchainreporting2/types"
)

const (
	samplePayloadHex = "0x0001fc30092226b37f6924b464e16a54a7978a9a524519a73403af64d487dc45000000000000000000000000000000000000000000000000000000000000061c1b906a49a6e47ba6b38ae1bf45653f56b656fd3aa335ef7fae696b663f1b847200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080466f6f20466565640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010d8800000000000000000000000000000000000000000000000000000000007868e100000000000000000000000000000000000000000000000000000000636532c0000000000000000000000000000000000000000000000000000000000000000291b7ae45cce2cce242c41ce3ecc500169cf7ca5d9644ce8afdfd2278406f03eaf63cf86fa0e1d96857c50f7b6bafd2f5436349fac48bdd35e97293adf37498b400000000000000000000000000000000000000000000000000000000000000021315468ab256d07b2d7492bba6563cc0be5bcac4c7f2668d1690e80dc9f17ac7050e236ec2cdb7c7b6789feea0d2ca8a1ff867c71d55ba45941ffa21b70f37ff"
	sampleReportHex  = "0x466f6f20466565640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010d8800000000000000000000000000000000000000000000000000000000007868e100000000000000000000000000000000000000000000000000000000636532c0"
)

var (
	// Report
	sampleReport        = hexutil.MustDecode(sampleReportHex)
	samplePayload       = hexutil.MustDecode(samplePayloadHex)
	sampleReportContext = ocrtypes.ReportContext{
		ReportTimestamp: ocrtypes.ReportTimestamp{
			ConfigDigest: mustHexToConfigDigest("0x0001fc30092226b37f6924b464e16a54a7978a9a524519a73403af64d487dc45"),
			Epoch:        6,
			Round:        28,
		},
		ExtraHash: [32]uint8{27, 144, 106, 73, 166, 228, 123, 166, 179, 138, 225, 191, 69, 101, 63, 86, 182, 86, 253, 58, 163, 53, 239, 127, 174, 105, 107, 102, 63, 27, 132, 114},
	}

	sig2       = ocrtypes.AttributedOnchainSignature{Signature: mustDecodeBase64("kbeuRczizOJCxBzj7MUAFpz3yl2WRM6K/f0ieEBvA+oTFUaKslbQey10krumVjzAvlvKxMfyZo0WkOgNyfF6xwE="), Signer: 2}
	sig3       = ocrtypes.AttributedOnchainSignature{Signature: mustDecodeBase64("9jz4b6Dh2WhXxQ97a6/S9UNjSfrEi9016XKTrfN0mLQFDiNuws23x7Z4n+6g0sqKH/hnxx1VukWUH/ohtw83/wE="), Signer: 3}
	sampleSigs = []ocrtypes.AttributedOnchainSignature{sig2, sig3}

	// MercuryReport
	sampleFromAccount   = utils.RandomAddress()
	sampleMercuryReport = fmt.Sprintf(`{"Payload":"0x0001fc30092226b37f6924b464e16a54a7978a9a524519a73403af64d487dc45000000000000000000000000000000000000000000000000000000000000061c1b906a49a6e47ba6b38ae1bf45653f56b656fd3aa335ef7fae696b663f1b847200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080466f6f20466565640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010d8800000000000000000000000000000000000000000000000000000000007868e100000000000000000000000000000000000000000000000000000000636532c0000000000000000000000000000000000000000000000000000000000000000291b7ae45cce2cce242c41ce3ecc500169cf7ca5d9644ce8afdfd2278406f03eaf63cf86fa0e1d96857c50f7b6bafd2f5436349fac48bdd35e97293adf37498b400000000000000000000000000000000000000000000000000000000000000021315468ab256d07b2d7492bba6563cc0be5bcac4c7f2668d1690e80dc9f17ac7050e236ec2cdb7c7b6789feea0d2ca8a1ff867c71d55ba45941ffa21b70f37ff","FromAccount":"%s"}`, strings.ToLower(sampleFromAccount.Hex()))
)

func mustDecodeBase64(s string) (b []byte) {
	var err error
	b, err = base64.StdEncoding.DecodeString(s)
	if err != nil {
		panic(err)
	}
	return
}

func mustHexToConfigDigest(s string) (cd ocrtypes.ConfigDigest) {
	b := hexutil.MustDecode(s)
	var err error
	cd, err = ocrtypes.BytesToConfigDigest(b)
	if err != nil {
		panic(err)
	}
	return
}
