// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	client "github.com/smartcontractkit/chainlink/v2/core/chains/evm/client"

	commontypes "github.com/smartcontractkit/chainlink/v2/common/types"

	evmtypes "github.com/smartcontractkit/chainlink/v2/core/chains/evm/types"

	mock "github.com/stretchr/testify/mock"
)

// ChainHeadTracker is an autogenerated mock type for the ChainHeadTracker type
type ChainHeadTracker struct {
	mock.Mock
}

// Client provides a mock function with given fields:
func (_m *ChainHeadTracker) Client() client.Client {
	ret := _m.Called()

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// HeadTracker provides a mock function with given fields:
func (_m *ChainHeadTracker) HeadTracker() commontypes.HeadTracker[*evmtypes.Head, common.Hash] {
	ret := _m.Called()

	var r0 commontypes.HeadTracker[*evmtypes.Head, common.Hash]
	if rf, ok := ret.Get(0).(func() commontypes.HeadTracker[*evmtypes.Head, common.Hash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commontypes.HeadTracker[*evmtypes.Head, common.Hash])
		}
	}

	return r0
}

// NewChainHeadTracker creates a new instance of ChainHeadTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainHeadTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainHeadTracker {
	mock := &ChainHeadTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
