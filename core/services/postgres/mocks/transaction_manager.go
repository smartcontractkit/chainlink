// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	postgres "github.com/smartcontractkit/chainlink/core/services/postgres"
	mock "github.com/stretchr/testify/mock"
)

// TransactionManager is an autogenerated mock type for the TransactionManager type
type TransactionManager struct {
	mock.Mock
}

// Transact provides a mock function with given fields: _a0, _a1
func (_m *TransactionManager) Transact(_a0 postgres.TxFn, _a1 ...postgres.TransactionOption) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(postgres.TxFn, ...postgres.TransactionOption) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactWithContext provides a mock function with given fields: ctx, fn, optsFn
func (_m *TransactionManager) TransactWithContext(ctx context.Context, fn postgres.TxFn, optsFn ...postgres.TransactionOption) error {
	_va := make([]interface{}, len(optsFn))
	for _i := range optsFn {
		_va[_i] = optsFn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.TxFn, ...postgres.TransactionOption) error); ok {
		r0 = rf(ctx, fn, optsFn...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
