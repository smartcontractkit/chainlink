// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"
)

// ConnectionAcceptor is an autogenerated mock type for the ConnectionAcceptor type
type ConnectionAcceptor struct {
	mock.Mock
}

// AbortHandshake provides a mock function with given fields: attemptId
func (_m *ConnectionAcceptor) AbortHandshake(attemptId string) {
	_m.Called(attemptId)
}

// FinalizeHandshake provides a mock function with given fields: attemptId, response, conn
func (_m *ConnectionAcceptor) FinalizeHandshake(attemptId string, response []byte, conn *websocket.Conn) error {
	ret := _m.Called(attemptId, response, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, *websocket.Conn) error); ok {
		r0 = rf(attemptId, response, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartHandshake provides a mock function with given fields: authHeader
func (_m *ConnectionAcceptor) StartHandshake(authHeader []byte) (string, []byte, error) {
	ret := _m.Called(authHeader)

	var r0 string
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) (string, []byte, error)); ok {
		return rf(authHeader)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(authHeader)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) []byte); ok {
		r1 = rf(authHeader)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(authHeader)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewConnectionAcceptor interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectionAcceptor creates a new instance of ConnectionAcceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectionAcceptor(t mockConstructorTestingTNewConnectionAcceptor) *ConnectionAcceptor {
	mock := &ConnectionAcceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
