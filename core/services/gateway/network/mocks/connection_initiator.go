// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// ConnectionInitiator is an autogenerated mock type for the ConnectionInitiator type
type ConnectionInitiator struct {
	mock.Mock
}

// ChallengeResponse provides a mock function with given fields: _a0, challenge
func (_m *ConnectionInitiator) ChallengeResponse(_a0 *url.URL, challenge []byte) ([]byte, error) {
	ret := _m.Called(_a0, challenge)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL, []byte) ([]byte, error)); ok {
		return rf(_a0, challenge)
	}
	if rf, ok := ret.Get(0).(func(*url.URL, []byte) []byte); ok {
		r0 = rf(_a0, challenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL, []byte) error); ok {
		r1 = rf(_a0, challenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthHeader provides a mock function with given fields: _a0
func (_m *ConnectionInitiator) NewAuthHeader(_a0 *url.URL) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConnectionInitiator creates a new instance of ConnectionInitiator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionInitiator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionInitiator {
	mock := &ConnectionInitiator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
