// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	functions_router "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/functions/generated/functions_router"

	mock "github.com/stretchr/testify/mock"
)

// OnchainSubscriptions is an autogenerated mock type for the OnchainSubscriptions type
type OnchainSubscriptions struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *OnchainSubscriptions) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: _a0
func (_m *OnchainSubscriptions) GetSubscription(_a0 common.Address) *functions_router.IFunctionsSubscriptionsSubscription {
	ret := _m.Called(_a0)

	var r0 *functions_router.IFunctionsSubscriptionsSubscription
	if rf, ok := ret.Get(0).(func(common.Address) *functions_router.IFunctionsSubscriptionsSubscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*functions_router.IFunctionsSubscriptionsSubscription)
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *OnchainSubscriptions) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOnchainSubscriptions interface {
	mock.TestingT
	Cleanup(func())
}

// NewOnchainSubscriptions creates a new instance of OnchainSubscriptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOnchainSubscriptions(t mockConstructorTestingTNewOnchainSubscriptions) *OnchainSubscriptions {
	mock := &OnchainSubscriptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
