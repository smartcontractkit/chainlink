// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	api "github.com/smartcontractkit/chainlink/v2/core/services/gateway/api"

	context "context"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// GatewayConnector is an autogenerated mock type for the GatewayConnector type
type GatewayConnector struct {
	mock.Mock
}

// ChallengeResponse provides a mock function with given fields: _a0, challenge
func (_m *GatewayConnector) ChallengeResponse(_a0 *url.URL, challenge []byte) ([]byte, error) {
	ret := _m.Called(_a0, challenge)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL, []byte) ([]byte, error)); ok {
		return rf(_a0, challenge)
	}
	if rf, ok := ret.Get(0).(func(*url.URL, []byte) []byte); ok {
		r0 = rf(_a0, challenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL, []byte) error); ok {
		r1 = rf(_a0, challenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *GatewayConnector) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthHeader provides a mock function with given fields: _a0
func (_m *GatewayConnector) NewAuthHeader(_a0 *url.URL) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToGateway provides a mock function with given fields: ctx, gatewayId, msg
func (_m *GatewayConnector) SendToGateway(ctx context.Context, gatewayId string, msg *api.Message) error {
	ret := _m.Called(ctx, gatewayId, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.Message) error); ok {
		r0 = rf(ctx, gatewayId, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *GatewayConnector) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGatewayConnector creates a new instance of GatewayConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayConnector {
	mock := &GatewayConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
