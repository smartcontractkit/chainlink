// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	directrequestocr "github.com/smartcontractkit/chainlink/core/services/directrequestocr"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// CreateRequest provides a mock function with given fields: contractRequestID, receivedAt, requestTxHash
func (_m *ORM) CreateRequest(contractRequestID [32]byte, receivedAt time.Time, requestTxHash *common.Hash) (int64, error) {
	ret := _m.Called(contractRequestID, receivedAt, requestTxHash)

	var r0 int64
	if rf, ok := ret.Get(0).(func([32]byte, time.Time, *common.Hash) int64); ok {
		r0 = rf(contractRequestID, receivedAt, requestTxHash)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([32]byte, time.Time, *common.Hash) error); ok {
		r1 = rf(contractRequestID, receivedAt, requestTxHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfirmed provides a mock function with given fields: contractRequestID
func (_m *ORM) SetConfirmed(contractRequestID [32]byte) error {
	ret := _m.Called(contractRequestID)

	var r0 error
	if rf, ok := ret.Get(0).(func([32]byte) error); ok {
		r0 = rf(contractRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetError provides a mock function with given fields: id, runID, errorType, computationError, readyAt
func (_m *ORM) SetError(id int64, runID int64, errorType directrequestocr.ErrType, computationError string, readyAt time.Time) error {
	ret := _m.Called(id, runID, errorType, computationError, readyAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, directrequestocr.ErrType, string, time.Time) error); ok {
		r0 = rf(id, runID, errorType, computationError, readyAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResult provides a mock function with given fields: id, runID, computationResult, readyAt
func (_m *ORM) SetResult(id int64, runID int64, computationResult []byte, readyAt time.Time) error {
	ret := _m.Called(id, runID, computationResult, readyAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, []byte, time.Time) error); ok {
		r0 = rf(id, runID, computationResult, readyAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewORM interface {
	mock.TestingT
	Cleanup(func())
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORM(t mockConstructorTestingTNewORM) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
