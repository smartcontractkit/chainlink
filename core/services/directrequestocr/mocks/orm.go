// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	directrequestocr "github.com/smartcontractkit/chainlink/core/services/directrequestocr"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/smartcontractkit/chainlink/core/services/pg"

	time "time"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// CreateRequest provides a mock function with given fields: requestID, receivedAt, requestTxHash, qopts
func (_m *ORM) CreateRequest(requestID directrequestocr.RequestID, receivedAt time.Time, requestTxHash *common.Hash, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requestID, receivedAt, requestTxHash)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestID, time.Time, *common.Hash, ...pg.QOpt) error); ok {
		r0 = rf(requestID, receivedAt, requestTxHash, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: requestID, qopts
func (_m *ORM) FindById(requestID directrequestocr.RequestID, qopts ...pg.QOpt) (*directrequestocr.Request, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requestID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *directrequestocr.Request
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestID, ...pg.QOpt) *directrequestocr.Request); ok {
		r0 = rf(requestID, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directrequestocr.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(directrequestocr.RequestID, ...pg.QOpt) error); ok {
		r1 = rf(requestID, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOldestEntriesByState provides a mock function with given fields: state, limit, qopts
func (_m *ORM) FindOldestEntriesByState(state directrequestocr.RequestState, limit uint32, qopts ...pg.QOpt) ([]directrequestocr.Request, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, state, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []directrequestocr.Request
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestState, uint32, ...pg.QOpt) []directrequestocr.Request); ok {
		r0 = rf(state, limit, qopts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]directrequestocr.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(directrequestocr.RequestState, uint32, ...pg.QOpt) error); ok {
		r1 = rf(state, limit, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetError provides a mock function with given fields: requestID, runID, errorType, computationError, readyAt, qopts
func (_m *ORM) SetError(requestID directrequestocr.RequestID, runID int64, errorType directrequestocr.ErrType, computationError []byte, readyAt time.Time, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requestID, runID, errorType, computationError, readyAt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestID, int64, directrequestocr.ErrType, []byte, time.Time, ...pg.QOpt) error); ok {
		r0 = rf(requestID, runID, errorType, computationError, readyAt, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResult provides a mock function with given fields: requestID, runID, computationResult, readyAt, qopts
func (_m *ORM) SetResult(requestID directrequestocr.RequestID, runID int64, computationResult []byte, readyAt time.Time, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requestID, runID, computationResult, readyAt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestID, int64, []byte, time.Time, ...pg.QOpt) error); ok {
		r0 = rf(requestID, runID, computationResult, readyAt, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetState provides a mock function with given fields: requestID, state, qopts
func (_m *ORM) SetState(requestID directrequestocr.RequestID, state directrequestocr.RequestState, qopts ...pg.QOpt) (directrequestocr.RequestState, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requestID, state)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 directrequestocr.RequestState
	if rf, ok := ret.Get(0).(func(directrequestocr.RequestID, directrequestocr.RequestState, ...pg.QOpt) directrequestocr.RequestState); ok {
		r0 = rf(requestID, state, qopts...)
	} else {
		r0 = ret.Get(0).(directrequestocr.RequestState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(directrequestocr.RequestID, directrequestocr.RequestState, ...pg.QOpt) error); ok {
		r1 = rf(requestID, state, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewORM interface {
	mock.TestingT
	Cleanup(func())
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORM(t mockConstructorTestingTNewORM) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
