// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/smartcontractkit/chainlink/v2/core/capabilities/remote/types"
	ragep2ptypes "github.com/smartcontractkit/libocr/ragep2p/types"
	mock "github.com/stretchr/testify/mock"
)

// Dispatcher is an autogenerated mock type for the Dispatcher type
type Dispatcher struct {
	mock.Mock
}

type Dispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Dispatcher) EXPECT() *Dispatcher_Expecter {
	return &Dispatcher_Expecter{mock: &_m.Mock}
}

// RemoveReceiver provides a mock function with given fields: capabilityId, donId
func (_m *Dispatcher) RemoveReceiver(capabilityId string, donId uint32) {
	_m.Called(capabilityId, donId)
}

// Dispatcher_RemoveReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReceiver'
type Dispatcher_RemoveReceiver_Call struct {
	*mock.Call
}

// RemoveReceiver is a helper method to define mock.On call
//   - capabilityId string
//   - donId uint32
func (_e *Dispatcher_Expecter) RemoveReceiver(capabilityId interface{}, donId interface{}) *Dispatcher_RemoveReceiver_Call {
	return &Dispatcher_RemoveReceiver_Call{Call: _e.mock.On("RemoveReceiver", capabilityId, donId)}
}

func (_c *Dispatcher_RemoveReceiver_Call) Run(run func(capabilityId string, donId uint32)) *Dispatcher_RemoveReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32))
	})
	return _c
}

func (_c *Dispatcher_RemoveReceiver_Call) Return() *Dispatcher_RemoveReceiver_Call {
	_c.Call.Return()
	return _c
}

func (_c *Dispatcher_RemoveReceiver_Call) RunAndReturn(run func(string, uint32)) *Dispatcher_RemoveReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: peerID, msgBody
func (_m *Dispatcher) Send(peerID ragep2ptypes.PeerID, msgBody *types.MessageBody) error {
	ret := _m.Called(peerID, msgBody)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ragep2ptypes.PeerID, *types.MessageBody) error); ok {
		r0 = rf(peerID, msgBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dispatcher_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Dispatcher_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - peerID ragep2ptypes.PeerID
//   - msgBody *types.MessageBody
func (_e *Dispatcher_Expecter) Send(peerID interface{}, msgBody interface{}) *Dispatcher_Send_Call {
	return &Dispatcher_Send_Call{Call: _e.mock.On("Send", peerID, msgBody)}
}

func (_c *Dispatcher_Send_Call) Run(run func(peerID ragep2ptypes.PeerID, msgBody *types.MessageBody)) *Dispatcher_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ragep2ptypes.PeerID), args[1].(*types.MessageBody))
	})
	return _c
}

func (_c *Dispatcher_Send_Call) Return(_a0 error) *Dispatcher_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Dispatcher_Send_Call) RunAndReturn(run func(ragep2ptypes.PeerID, *types.MessageBody) error) *Dispatcher_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetReceiver provides a mock function with given fields: capabilityId, donId, receiver
func (_m *Dispatcher) SetReceiver(capabilityId string, donId uint32, receiver types.Receiver) error {
	ret := _m.Called(capabilityId, donId, receiver)

	if len(ret) == 0 {
		panic("no return value specified for SetReceiver")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, types.Receiver) error); ok {
		r0 = rf(capabilityId, donId, receiver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dispatcher_SetReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReceiver'
type Dispatcher_SetReceiver_Call struct {
	*mock.Call
}

// SetReceiver is a helper method to define mock.On call
//   - capabilityId string
//   - donId uint32
//   - receiver types.Receiver
func (_e *Dispatcher_Expecter) SetReceiver(capabilityId interface{}, donId interface{}, receiver interface{}) *Dispatcher_SetReceiver_Call {
	return &Dispatcher_SetReceiver_Call{Call: _e.mock.On("SetReceiver", capabilityId, donId, receiver)}
}

func (_c *Dispatcher_SetReceiver_Call) Run(run func(capabilityId string, donId uint32, receiver types.Receiver)) *Dispatcher_SetReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32), args[2].(types.Receiver))
	})
	return _c
}

func (_c *Dispatcher_SetReceiver_Call) Return(_a0 error) *Dispatcher_SetReceiver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Dispatcher_SetReceiver_Call) RunAndReturn(run func(string, uint32, types.Receiver) error) *Dispatcher_SetReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// NewDispatcher creates a new instance of Dispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dispatcher {
	mock := &Dispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
