// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package logevent

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

func (cfg Config) New(w *sdk.WorkflowSpecFactory, id string) OutputCap {
	ref := "trigger"
	def := sdk.StepDefinition{
		ID: id, Ref: ref,
		Inputs: sdk.StepInputs{},
		Config: map[string]any{
			"contractAddress":      cfg.ContractAddress,
			"contractEventName":    cfg.ContractEventName,
			"contractName":         cfg.ContractName,
			"contractReaderConfig": cfg.ContractReaderConfig,
		},
		CapabilityType: capabilities.CapabilityTypeTrigger,
	}

	step := sdk.Step[Output]{Definition: def}
	return OutputCapFromStep(w, step)
}

type HeadCap interface {
	sdk.CapDefinition[Head]
	Hash() sdk.CapDefinition[string]
	Height() sdk.CapDefinition[string]
	Timestamp() sdk.CapDefinition[uint64]
	private()
}

// HeadCapFromStep should only be called from generated code to assure type safety
func HeadCapFromStep(w *sdk.WorkflowSpecFactory, step sdk.Step[Head]) HeadCap {
	raw := step.AddTo(w)
	return &head{CapDefinition: raw}
}

type head struct {
	sdk.CapDefinition[Head]
}

func (*head) private() {}
func (c *head) Hash() sdk.CapDefinition[string] {
	return sdk.AccessField[Head, string](c.CapDefinition, "Hash")
}
func (c *head) Height() sdk.CapDefinition[string] {
	return sdk.AccessField[Head, string](c.CapDefinition, "Height")
}
func (c *head) Timestamp() sdk.CapDefinition[uint64] {
	return sdk.AccessField[Head, uint64](c.CapDefinition, "Timestamp")
}

func NewHeadFromFields(
	hash sdk.CapDefinition[string],
	height sdk.CapDefinition[string],
	timestamp sdk.CapDefinition[uint64]) HeadCap {
	return &simpleHead{
		CapDefinition: sdk.ComponentCapDefinition[Head]{
			"Hash":      hash.Ref(),
			"Height":    height.Ref(),
			"Timestamp": timestamp.Ref(),
		},
		hash:      hash,
		height:    height,
		timestamp: timestamp,
	}
}

type simpleHead struct {
	sdk.CapDefinition[Head]
	hash      sdk.CapDefinition[string]
	height    sdk.CapDefinition[string]
	timestamp sdk.CapDefinition[uint64]
}

func (c *simpleHead) Hash() sdk.CapDefinition[string] {
	return c.hash
}
func (c *simpleHead) Height() sdk.CapDefinition[string] {
	return c.height
}
func (c *simpleHead) Timestamp() sdk.CapDefinition[uint64] {
	return c.timestamp
}

func (c *simpleHead) private() {}

type OutputCap interface {
	sdk.CapDefinition[Output]
	Cursor() sdk.CapDefinition[string]
	Data() OutputDataCap
	Head() HeadCap
	private()
}

// OutputCapFromStep should only be called from generated code to assure type safety
func OutputCapFromStep(w *sdk.WorkflowSpecFactory, step sdk.Step[Output]) OutputCap {
	raw := step.AddTo(w)
	return &output{CapDefinition: raw}
}

type output struct {
	sdk.CapDefinition[Output]
}

func (*output) private() {}
func (c *output) Cursor() sdk.CapDefinition[string] {
	return sdk.AccessField[Output, string](c.CapDefinition, "Cursor")
}
func (c *output) Data() OutputDataCap {
	return OutputDataCap(sdk.AccessField[Output, OutputData](c.CapDefinition, "Data"))
}
func (c *output) Head() HeadCap {
	return &head{CapDefinition: sdk.AccessField[Output, Head](c.CapDefinition, "Head")}
}

func NewOutputFromFields(
	cursor sdk.CapDefinition[string],
	data OutputDataCap,
	head HeadCap) OutputCap {
	return &simpleOutput{
		CapDefinition: sdk.ComponentCapDefinition[Output]{
			"Cursor": cursor.Ref(),
			"Data":   data.Ref(),
			"Head":   head.Ref(),
		},
		cursor: cursor,
		data:   data,
		head:   head,
	}
}

type simpleOutput struct {
	sdk.CapDefinition[Output]
	cursor sdk.CapDefinition[string]
	data   OutputDataCap
	head   HeadCap
}

func (c *simpleOutput) Cursor() sdk.CapDefinition[string] {
	return c.cursor
}
func (c *simpleOutput) Data() OutputDataCap {
	return c.data
}
func (c *simpleOutput) Head() HeadCap {
	return c.head
}

func (c *simpleOutput) private() {}

type OutputDataCap sdk.CapDefinition[OutputData]
