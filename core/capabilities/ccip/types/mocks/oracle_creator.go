// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/smartcontractkit/chainlink/v2/core/capabilities/ccip/types"
	mock "github.com/stretchr/testify/mock"
)

// OracleCreator is an autogenerated mock type for the OracleCreator type
type OracleCreator struct {
	mock.Mock
}

type OracleCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *OracleCreator) EXPECT() *OracleCreator_Expecter {
	return &OracleCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, donID, config
func (_m *OracleCreator) Create(ctx context.Context, donID uint32, config types.OCR3ConfigWithMeta) (types.CCIPOracle, error) {
	ret := _m.Called(ctx, donID, config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.CCIPOracle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, types.OCR3ConfigWithMeta) (types.CCIPOracle, error)); ok {
		return rf(ctx, donID, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, types.OCR3ConfigWithMeta) types.CCIPOracle); ok {
		r0 = rf(ctx, donID, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CCIPOracle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, types.OCR3ConfigWithMeta) error); ok {
		r1 = rf(ctx, donID, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OracleCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OracleCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - donID uint32
//   - config types.OCR3ConfigWithMeta
func (_e *OracleCreator_Expecter) Create(ctx interface{}, donID interface{}, config interface{}) *OracleCreator_Create_Call {
	return &OracleCreator_Create_Call{Call: _e.mock.On("Create", ctx, donID, config)}
}

func (_c *OracleCreator_Create_Call) Run(run func(ctx context.Context, donID uint32, config types.OCR3ConfigWithMeta)) *OracleCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(types.OCR3ConfigWithMeta))
	})
	return _c
}

func (_c *OracleCreator_Create_Call) Return(_a0 types.CCIPOracle, _a1 error) *OracleCreator_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OracleCreator_Create_Call) RunAndReturn(run func(context.Context, uint32, types.OCR3ConfigWithMeta) (types.CCIPOracle, error)) *OracleCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *OracleCreator) Type() types.OracleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 types.OracleType
	if rf, ok := ret.Get(0).(func() types.OracleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.OracleType)
	}

	return r0
}

// OracleCreator_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type OracleCreator_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *OracleCreator_Expecter) Type() *OracleCreator_Type_Call {
	return &OracleCreator_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *OracleCreator_Type_Call) Run(run func()) *OracleCreator_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OracleCreator_Type_Call) Return(_a0 types.OracleType) *OracleCreator_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OracleCreator_Type_Call) RunAndReturn(run func() types.OracleType) *OracleCreator_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewOracleCreator creates a new instance of OracleCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleCreator {
	mock := &OracleCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
