// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/smartcontractkit/chainlink/v2/core/capabilities/ccip/types"
	mock "github.com/stretchr/testify/mock"
)

// OracleCreator is an autogenerated mock type for the OracleCreator type
type OracleCreator struct {
	mock.Mock
}

type OracleCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *OracleCreator) EXPECT() *OracleCreator_Expecter {
	return &OracleCreator_Expecter{mock: &_m.Mock}
}

// CreateBootstrapOracle provides a mock function with given fields: config
func (_m *OracleCreator) CreateBootstrapOracle(config types.OCR3ConfigWithMeta) (types.CCIPOracle, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateBootstrapOracle")
	}

	var r0 types.CCIPOracle
	var r1 error
	if rf, ok := ret.Get(0).(func(types.OCR3ConfigWithMeta) (types.CCIPOracle, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(types.OCR3ConfigWithMeta) types.CCIPOracle); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CCIPOracle)
		}
	}

	if rf, ok := ret.Get(1).(func(types.OCR3ConfigWithMeta) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OracleCreator_CreateBootstrapOracle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBootstrapOracle'
type OracleCreator_CreateBootstrapOracle_Call struct {
	*mock.Call
}

// CreateBootstrapOracle is a helper method to define mock.On call
//   - config types.OCR3ConfigWithMeta
func (_e *OracleCreator_Expecter) CreateBootstrapOracle(config interface{}) *OracleCreator_CreateBootstrapOracle_Call {
	return &OracleCreator_CreateBootstrapOracle_Call{Call: _e.mock.On("CreateBootstrapOracle", config)}
}

func (_c *OracleCreator_CreateBootstrapOracle_Call) Run(run func(config types.OCR3ConfigWithMeta)) *OracleCreator_CreateBootstrapOracle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.OCR3ConfigWithMeta))
	})
	return _c
}

func (_c *OracleCreator_CreateBootstrapOracle_Call) Return(_a0 types.CCIPOracle, _a1 error) *OracleCreator_CreateBootstrapOracle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OracleCreator_CreateBootstrapOracle_Call) RunAndReturn(run func(types.OCR3ConfigWithMeta) (types.CCIPOracle, error)) *OracleCreator_CreateBootstrapOracle_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePluginOracle provides a mock function with given fields: pluginType, config
func (_m *OracleCreator) CreatePluginOracle(pluginType types.PluginType, config types.OCR3ConfigWithMeta) (types.CCIPOracle, error) {
	ret := _m.Called(pluginType, config)

	if len(ret) == 0 {
		panic("no return value specified for CreatePluginOracle")
	}

	var r0 types.CCIPOracle
	var r1 error
	if rf, ok := ret.Get(0).(func(types.PluginType, types.OCR3ConfigWithMeta) (types.CCIPOracle, error)); ok {
		return rf(pluginType, config)
	}
	if rf, ok := ret.Get(0).(func(types.PluginType, types.OCR3ConfigWithMeta) types.CCIPOracle); ok {
		r0 = rf(pluginType, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CCIPOracle)
		}
	}

	if rf, ok := ret.Get(1).(func(types.PluginType, types.OCR3ConfigWithMeta) error); ok {
		r1 = rf(pluginType, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OracleCreator_CreatePluginOracle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePluginOracle'
type OracleCreator_CreatePluginOracle_Call struct {
	*mock.Call
}

// CreatePluginOracle is a helper method to define mock.On call
//   - pluginType types.PluginType
//   - config types.OCR3ConfigWithMeta
func (_e *OracleCreator_Expecter) CreatePluginOracle(pluginType interface{}, config interface{}) *OracleCreator_CreatePluginOracle_Call {
	return &OracleCreator_CreatePluginOracle_Call{Call: _e.mock.On("CreatePluginOracle", pluginType, config)}
}

func (_c *OracleCreator_CreatePluginOracle_Call) Run(run func(pluginType types.PluginType, config types.OCR3ConfigWithMeta)) *OracleCreator_CreatePluginOracle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.PluginType), args[1].(types.OCR3ConfigWithMeta))
	})
	return _c
}

func (_c *OracleCreator_CreatePluginOracle_Call) Return(_a0 types.CCIPOracle, _a1 error) *OracleCreator_CreatePluginOracle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OracleCreator_CreatePluginOracle_Call) RunAndReturn(run func(types.PluginType, types.OCR3ConfigWithMeta) (types.CCIPOracle, error)) *OracleCreator_CreatePluginOracle_Call {
	_c.Call.Return(run)
	return _c
}

// NewOracleCreator creates a new instance of OracleCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleCreator {
	mock := &OracleCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
