// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	sessions "github.com/smartcontractkit/chainlink/v2/core/sessions"
	mock "github.com/stretchr/testify/mock"
)

// LocalAdminUsersORM is an autogenerated mock type for the LocalAdminUsersORM type
type LocalAdminUsersORM struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *LocalAdminUsersORM) CreateUser(user *sessions.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sessions.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: email
func (_m *LocalAdminUsersORM) FindUser(email string) (sessions.User, error) {
	ret := _m.Called(email)

	var r0 sessions.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (sessions.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) sessions.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(sessions.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *LocalAdminUsersORM) ListUsers() ([]sessions.User, error) {
	ret := _m.Called()

	var r0 []sessions.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]sessions.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []sessions.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sessions.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocalAdminUsersORM creates a new instance of LocalAdminUsersORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalAdminUsersORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalAdminUsersORM {
	mock := &LocalAdminUsersORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
