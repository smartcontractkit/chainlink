#!/usr/bin/env bash

# get machine / kernel name
_get_platform() {
  uname | tr '[:upper:]' '[:lower:]'
}

# get machine architecture name
# See https://github.com/joschi/asdf-java/blob/aarch64-support/bin/functions#L33
_get_arch() {
  arch="$(uname -m)"
  case "${arch}" in
  x86_64 | amd64) echo "x86_64" ;;
  aarch64 | arm64) echo "arm64" ;;
  *)
    echo "Unknown machine architecture: ${arch}"
    exit 1
    ;;
  esac
}

# get lib wasmvm path
_get_wasmvm_lib_path() {
  local -r platform="$1"
  local -r arch="$2"
  wasmvm_dir=$(go list -json -m all | jq -r '. | select(.Path == "github.com/CosmWasm/wasmvm") | .Dir')
  shared_lib_dir="$wasmvm_dir/api"
  lib_name="libwasmvm"
  if [ "$platform" == "darwin" ]; then
    lib_extension="dylib"
  elif [ "$platform" == "linux" ]; then
    case "${arch}" in
    x86_64 | amd64) lib_extension="x86_64.so" ;;
    aarch64 | arm64) lib_extension="aarch64.so" ;;
    *) echo "Unsupported arch $arch" && exit 1 ;;
    esac
  else
    echo "Unsupported platform $platform"
    exit 1
  fi
  echo "$shared_lib_dir/${lib_name}.$lib_extension"
}

# global goreleaser before hook
# moves native libraries to temp directories used by docker images / archives
before_hook() {
  local -r lib_path=tmp
  local -r wasmvm_lib_path_linux_amd64=$(_get_wasmvm_lib_path "linux" "amd64")
  local -r wasmvm_lib_path_linux_arm64=$(_get_wasmvm_lib_path "linux" "arm64")
  local -r wasmvm_lib_path_darwin_amd64=$(_get_wasmvm_lib_path "darwin" "amd64")
  local -r wasmvm_lib_path_darwin_arm64=$(_get_wasmvm_lib_path "darwin" "arm64")
  mkdir -p "$lib_path/linux_amd64/libs"
  cp -f "$wasmvm_lib_path_linux_amd64" "$lib_path/linux_amd64/libs"
  mkdir -p "$lib_path/linux_arm64/libs"
  cp -f "$wasmvm_lib_path_linux_arm64" "$lib_path/linux_arm64/libs"
  mkdir -p "$lib_path/darwin_amd64/libs"
  cp -f "$wasmvm_lib_path_darwin_amd64" "$lib_path/darwin_amd64/libs"
  mkdir -p "$lib_path/darwin_arm64/libs"
  cp -f "$wasmvm_lib_path_darwin_arm64" "$lib_path/darwin_arm64/libs"
}

# binary build post hook
# moves native libraries to binary libs directory
build_post_hook() {
  local -r dist_path=$1
  local -r lib_path=$dist_path/libs
  local -r platform=$2
  local -r arch=$3
  local -r wasmvm_lib_path=$(_get_wasmvm_lib_path "$platform" "$arch")
  mkdir -p "$lib_path"
  cp "$wasmvm_lib_path" "$lib_path"
}

"$@"
