#!/usr/bin/env zx
// Taken from https://raw.githubusercontent.com/actions/toolkit/main/packages/core/src/summary.ts
// Commit: 07242b37a49ef3c3704f429570b3c9e377b72ecb
/**
 * @typedef {(SummaryTableCell | string)[]} SummaryTableRow
 */

/**
 * @typedef {object} SummaryTableCell
 * @prop {string} data - Cell content
 * @prop {boolean} [header=false] - Render cell as header
 * @prop {string} [ colspan='1' ] - Number of columns the cell extends
 * @prop {string} [rowspan='1'] - Number of rows the cell extends
 */

/**
 * @typedef {object} SummaryImageOptions
 * @prop {string=} width
 * @prop {string=} height
 */

/**
 * @typedef SummaryWriteOptions
 * @prop {boolean=} overwrite - Replace all existing content in summary file with buffer contents
 */

import { EOL } from 'os'
import { constants, promises } from 'fs'
const { access, appendFile, writeFile } = promises

export const SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY'
export const SUMMARY_DOCS_URL =
  'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary'

class Summary {
  _buffer
  _filePath

  constructor() {
    this._buffer = ''
  }

  /**
   * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
   * Also checks r/w permissions.
   *
   * @returns step summary file path
   */
  async filePath() {
    if (this._filePath) {
      return this._filePath
    }

    const pathFromEnv = process.env[SUMMARY_ENV_VAR]
    if (!pathFromEnv) {
      throw new Error(
        `Unable to find environment variable for $${SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`,
      )
    }

    try {
      await access(pathFromEnv, constants.R_OK | constants.W_OK)
    } catch {
      throw new Error(
        `Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`,
      )
    }

    this._filePath = pathFromEnv
    return this._filePath
  }

  /**
   * Wraps content in an HTML tag, adding any HTML attributes
   *
   * @param {string} tag HTML tag to wrap
   * @param {string | null} content content within the tag
   * @param {[attribute]} attrs key-value list of HTML attributes to add
   *
   * @returns {string} content wrapped in HTML element
   */
  wrap(tag, content, attrs = {}) {
    const htmlAttrs = Object.entries(attrs)
      .map(([key, value]) => ` ${key}="${value}"`)
      .join('')

    if (!content) {
      return `<${tag}${htmlAttrs}>`
    }

    return `<${tag}${htmlAttrs}>${content}</${tag}>`
  }

  /**
   * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
   *
   * @param {SummaryWriteOptions} [options] (optional) options for write operation
   *
   * @returns {Promise<Summary>} summary instance
   */
  async write(options) {
    const overwrite = !!options?.overwrite
    const filePath = await this.filePath()
    const writeFunc = overwrite ? writeFile : appendFile
    await writeFunc(filePath, this._buffer, { encoding: 'utf8' })
    return this.emptyBuffer()
  }

  /**
   * Clears the summary buffer and wipes the summary file
   *
   * @returns {Summary} summary instance
   */
  async clear() {
    return this.emptyBuffer().write({ overwrite: true })
  }

  /**
   * Returns the current summary buffer as a string
   *
   * @returns {string} string of summary buffer
   */
  stringify() {
    return this._buffer
  }

  /**
   * If the summary buffer is empty
   *
   * @returns {boolen} true if the buffer is empty
   */
  isEmptyBuffer() {
    return this._buffer.length === 0
  }

  /**
   * Resets the summary buffer without writing to summary file
   *
   * @returns {Summary} summary instance
   */
  emptyBuffer() {
    this._buffer = ''
    return this
  }

  /**
   * Adds raw text to the summary buffer
   *
   * @param {string} text content to add
   * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
   *
   * @returns {Summary} summary instance
   */
  addRaw(text, addEOL) {
    this._buffer += text
    return addEOL ? this.addEOL() : this
  }

  /**
   * Adds the operating system-specific end-of-line marker to the buffer
   *
   * @returns {Summary} summary instance
   */
  addEOL() {
    return this.addRaw(EOL)
  }

  /**
   * Adds an HTML codeblock to the summary buffer
   *
   * @param {string} code content to render within fenced code block
   * @param {string} lang (optional) language to syntax highlight code
   *
   * @returns {Summary} summary instance
   */
  addCodeBlock(code, lang) {
    const attrs = {
      ...(lang && { lang }),
    }
    const element = this.wrap('pre', this.wrap('code', code), attrs)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML list to the summary buffer
   *
   * @param {string[]} items list of items to render
   * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
   *
   * @returns {Summary} summary instance
   */
  addList(items, ordered = false) {
    const tag = ordered ? 'ol' : 'ul'
    const listItems = items.map((item) => this.wrap('li', item)).join('')
    const element = this.wrap(tag, listItems)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML table to the summary buffer
   *
   * @param {SummaryTableCell[]} rows table rows
   *
   * @returns {Summary} summary instance
   */
  addTable(rows) {
    const tableBody = rows
      .map((row) => {
        const cells = row
          .map((cell) => {
            if (typeof cell === 'string') {
              return this.wrap('td', cell)
            }

            const { header, data, colspan, rowspan } = cell
            const tag = header ? 'th' : 'td'
            const attrs = {
              ...(colspan && { colspan }),
              ...(rowspan && { rowspan }),
            }

            return this.wrap(tag, data, attrs)
          })
          .join('')

        return this.wrap('tr', cells)
      })
      .join('')

    const element = this.wrap('table', tableBody)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds a collapsable HTML details element to the summary buffer
   *
   * @param {string} label text for the closed state
   * @param {string} content collapsable content
   *
   * @returns {Summary} summary instance
   */
  addDetails(label, content) {
    const element = this.wrap('details', this.wrap('summary', label) + content)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML image tag to the summary buffer
   *
   * @param {string} src path to the image you to embed
   * @param {string} alt text description of the image
   * @param {SummaryImageOptions} options (optional) addition image attributes
   *
   * @returns {Summary} summary instance
   */
  addImage(src, alt, options) {
    const { width, height } = options || {}
    const attrs = {
      ...(width && { width }),
      ...(height && { height }),
    }

    const element = this.wrap('img', null, { src, alt, ...attrs })
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML section heading element
   *
   * @param {string} text heading text
   * @param {number | string} [level=1] (optional) the heading level, default: 1
   *
   * @returns {Summary} summary instance
   */
  addHeading(text, level) {
    const tag = `h${level}`
    const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
      ? tag
      : 'h1'
    const element = this.wrap(allowedTag, text)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML thematic break (<hr>) to the summary buffer
   *
   * @returns {Summary} summary instance
   */
  addSeparator() {
    const element = this.wrap('hr', null)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML line break (<br>) to the summary buffer
   *
   * @returns {Summary} summary instance
   */
  addBreak() {
    const element = this.wrap('br', null)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML blockquote to the summary buffer
   *
   * @param {string} text quote text
   * @param {string} cite (optional) citation url
   *
   * @returns {Summary} summary instance
   */
  addQuote(text, cite) {
    const attrs = {
      ...(cite && { cite }),
    }
    const element = this.wrap('blockquote', text, attrs)
    return this.addRaw(element).addEOL()
  }

  /**
   * Adds an HTML anchor tag to the summary buffer
   *
   * @param {string} text link text/content
   * @param {string} href hyperlink
   *
   * @returns {Summary} summary instance
   */
  addLink(text, href) {
    const element = this.wrap('a', text, { href })
    return this.addRaw(element).addEOL()
  }
}

await runAtGitRoot()

$.verbose = false
const numOfShards = Number(process.env.SHARDS) || 5
const packages = await $`go list ./...`
const parsedPackages = packages.stdout.trimEnd().split('\n')
console.log(`${parsedPackages.length} packages to shard...`)
const maxPackagesPerShard = Math.max(parsedPackages.length / numOfShards)
const shardedPackages = new Array(numOfShards).fill(null).map(() => [])

parsedPackages.forEach((pkg, i) => {
  const shardIndex = Math.floor(i / maxPackagesPerShard)
  shardedPackages[shardIndex].push(pkg)
})

const mappedShardedPackages = shardedPackages.map((gp, i) => ({
  idx: `${i + 1}`,
  id: `${i + 1}/${numOfShards}`,
  pkgs: gp.join(' '),
}))

const serializedShardedPackages = JSON.stringify(mappedShardedPackages)
setOutput('shards', serializedShardedPackages)
createSummary(parsedPackages, shardedPackages, mappedShardedPackages)

function setOutput(name, body) {
  if (process.env.CI) {
    console.log(`::set-output name=${name}::${body}`)
  } else {
    console.log(body)
  }
}

function createSummary(parsedPackages, shardedPackages, mappedShardedPackages) {
  if (!process.env.CI) {
    return
  }
  const numberOfPackages = parsedPackages.length
  const numberOfShards = shardedPackages.length
  const postProcessedNumberOfPackages = shardedPackages.flat().length

  const summary = new Summary()
  summary
    .addHeading('Sharding Summary')
    .addHeading(
      `Number of packages from "go list ./...": ${numberOfPackages}`,
      3,
    )
    .addHeading(
      `Number of packages placed into shards: ${postProcessedNumberOfPackages}`,
      3,
    )
    .addHeading(`Number of shards created: ${numberOfShards}`, 3)
    .addBreak()
    .addTable([
      [
        { data: 'Shard Number', header: true },
        { data: 'Packages Tested', header: true },
      ],
      ...mappedShardedPackages.map((p) => {
        const mappedPackages = p.pkgs
          .split(' ')
          .map(
            (packageName) =>
              `<li> ${packageName.replace(
                'github.com/smartcontractkit/',
                '',
              )} </li>`,
          )
          .join('\n')

        return [p.id, mappedPackages]
      }),
    ])
    .write()
}

async function runAtGitRoot() {
  const gitRoot = await $`git rev-parse --show-toplevel`
  cd(gitRoot.stdout.trimEnd())
}
