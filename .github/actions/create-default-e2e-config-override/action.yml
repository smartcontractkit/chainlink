name: 'Create Default E2E Test Config Override From Inputs'
inputs:
  chainlink_version:
    required: false
    description: 'Chainlink version to use for the tests. Example: "v2.10.0" or sha'
  chainlink_postgres_version:
    required: false
    description: 'Chainlink Postgres version to use for the tests'
  chainlink_upgrade_version:
    required: false
    description: 'Chainlink upgrade version to use for the tests'
  selected_networks:
    required: false
    description: 'Selected networks for the tests (comma separated)'
  test_log_collect:
    required: false
    description: 'Whether to always collect test logs'
  logging_run_id:
    required: false
    description: 'Logging run ID for the tests'
  logstream_log_targets:
    required: false
    description: 'Logstream log targets for the tests (comma separated)'
  private_ethereum_network_execution_layer:
    required: false
    description: 'Private Ethereum network execution layer for the tests'    
  private_ethereum_network_custom_docker_image:
    required: false
    description: 'Private Ethereum network custom Docker image for the tests'
outputs:
  chainlink_version:
    value: ${{ steps.build-args.outputs.chainlink_version }}
    description: 'Chainlink version resolved from the input'

runs:
  using: 'composite'
  steps:
    - name: Checkout chainlink-testing-framework to use citool
      uses: actions/checkout@v3
      with:
        repository: 'smartcontractkit/chainlink-testing-framework'
        ref: 818e45a055b7e9ebd5775f6b8eaabb38e400d1d4
        path: 'chainlink-testing-framework'

    - name: Create default E2E test config override
      id: build-args
      shell: bash
      run: |
        cd chainlink-testing-framework/tools/citool/

        create_args=()
        if [ -n "${{ inputs.chainlink_version }}" ]; then
          create_args+=(--chainlink-version="${{ inputs.chainlink_version }}")
          echo "chainlink_version=$(go run main.go envresolve "${{ inputs.chainlink_version }}")" >> $GITHUB_OUTPUT
        fi
        if [ -n "${{ inputs.chainlink_postgres_version }}" ]; then
          create_args+=(--chainlink-postgres-version="${{ inputs.chainlink_postgres_version }}")
        fi
        if [ -n "${{ inputs.chainlink_upgrade_version }}" ]; then
          create_args+=(--chainlink-upgrade-version="${{ inputs.chainlink_upgrade_version }}")
        fi
        if [ -n "${{ inputs.logging_run_id }}" ]; then
          create_args+=(--logging-run-id="${{ inputs.logging_run_id }}")
        fi
        if [ -n "${{ inputs.test_log_collect }}" ]; then
          create_args+=(--logging-test-log-collect="${{ inputs.test_log_collect }}")
        fi
        if [ -n "${{ inputs.private_ethereum_network_execution_layer }}" ]; then
          create_args+=(--private-ethereum-network-execution-layer="${{ inputs.private_ethereum_network_execution_layer }}")
        fi
        if [ -n "${{ inputs.private_ethereum_network_custom_docker_image }}" ]; then
          create_args+=(--private-ethereum-network-custom-docker-image="${{ inputs.private_ethereum_network_custom_docker_image }}")
        fi
        
        # # Split the log targets input by comma and add to the command line arguments
        IFS=',' read -ra ADDR <<< "${{ inputs.logstream_log_targets }}"
        for i in "${ADDR[@]}"; do
          create_args+=(--logging-log-targets="$i")
        done

        # Split selected_networks input by comma and add to the command line arguments
        IFS=',' read -ra ADDR <<< "${{ inputs.selected_networks }}"
        for i in "${ADDR[@]}"; do
          create_args+=(--selected-networks="$i")
        done

        config_override=$(go run main.go test-config create "${create_args[@]}")
        # echo "go run main.go test-config create ${create_args[*]}"
        echo "Test config override:"
        echo "$config_override"

        BASE64_CONFIG_OVERRIDE=$(echo "$config_override" | base64 -w 0)
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV        
    