name: Create Base64 Config
description: A composite action that creates a base64-encoded config to be used by integration tests

inputs:
  runId:
    description: The run id
  testLogCollect:
    description: Whether to always collect logs, even for passing tests
    default: "false"
  selectedNetworks:
    description: The networks to run tests against
  chainlinkImage:
    description: The chainlink image to use
    default: "public.ecr.aws/chainlink/chainlink"
  chainlinkVersion:
    description: The git commit sha to use for the image tag
  pyroscopeServer:
    description: URL of Pyroscope server
  pyroscopeEnvironment:
    description: Name of Pyroscope environment
  pyroscopeKey:
    description: Pyroscope server key
  lokiEndpoint:
    description: Loki push endpoint
  lokiTenantId:
    description: Loki tenant id
  lokiBasicAuth:
    description: Loki basic auth
  logstreamLogTargets:
    description: Where to send logs (e.g. file, loki)
  grafanaUrl:
    description: Grafana URL
  grafanaDashboardUrl:
    description: Grafana dashboard URL

runs:
  using: composite
  steps:
    - name: Prepare Base64 TOML override
      shell: bash
      id: base64-config-override
      env:
        RUN_ID: ${{ inputs.runId }}
        TEST_LOG_COLLECT: ${{ inputs.testLogCollect }}
        SELECTED_NETWORKS: ${{ inputs.selectedNetworks }}
        PYROSCOPE_SERVER: ${{ inputs.pyroscopeServer }}
        PYROSCOPE_ENVIRONMENT: ${{ inputs.pyroscopeEnvironment }}
        PYROSCOPE_KEY: ${{ inputs.pyroscopeKey }}
        CHAINLINK_IMAGE: ${{ inputs.chainlinkImage }}
        CHAINLINK_VERSION: ${{ inputs.chainlinkVersion }}
        LOKI_ENDPOINT: ${{ inputs.lokiEndpoint }}
        LOKI_TENANT_ID: ${{ inputs.lokiTenantId }}
        LOKI_BASIC_AUTH: ${{ inputs.lokiBasicAuth }}
        LOGSTREAM_LOG_TARGETS: ${{ inputs.logstreamLogTargets }}
        GRAFANA_URL: ${{ inputs.grafanaUrl }}
        GRAFANA_DASHBOARD_URL: ${{ inputs.grafanaDashboardUrl }}
      run: |
        echo ::add-mask::$CHAINLINK_IMAGE
        function convert_to_toml_array() {
          local IFS=','
          local input_array=($1)
          local toml_array_format="["

          for element in "${input_array[@]}"; do
              toml_array_format+="\"$element\","
          done

          toml_array_format="${toml_array_format%,}]"
          echo "$toml_array_format"
        }

        selected_networks=$(convert_to_toml_array "$SELECTED_NETWORKS")
        log_targets=$(convert_to_toml_array "$LOGSTREAM_LOG_TARGETS")

        if [ -n "$PYROSCOPE_SERVER" ]; then
          pyroscope_enabled=true
        else
          pyroscope_enabled=false
        fi

        if [ -n "$TEST_LOG_COLLECT" ]; then
          test_log_collect=true
        else
          test_log_collect=false
        fi

        cat << EOF > config.toml
        [Network]
        selected_networks=$selected_networks

        [ChainlinkImage]
        image="$CHAINLINK_IMAGE"
        version="$CHAINLINK_VERSION"

        [Pyroscope]
        enabled=$pyroscope_enabled
        server_url="$PYROSCOPE_SERVER"
        environment="$PYROSCOPE_ENVIRONMENT"
        key_secret="$PYROSCOPE_KEY"

        [Logging]
        test_log_collect=$test_log_collect
        run_id="$RUN_ID"

        [Logging.LogStream]
        log_targets=$log_targets

        [Logging.Loki]
        tenant_id="$LOKI_TENANT_ID"
        endpoint="$LOKI_ENDPOINT"
        basic_auth_secret="$LOKI_BASIC_AUTH"

        [Logging.Grafana]
        base_url="$GRAFANA_URL"
        dashboard_url="$GRAFANA_DASHBOARD_URL"
        EOF

        BASE64_CONFIG_OVERRIDE=$(cat config.toml | base64 -w 0)
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV
