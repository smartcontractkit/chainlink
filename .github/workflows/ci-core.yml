name: CI Core

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  schedule:
    - cron: "0 0 * * *"

jobs:
  split-packages:
    name: Split Go Tests
    runs-on: ubuntu-latest
    outputs:
      splits: ${{ steps.split.outputs.splits }}
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@v1
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Split Go Tests
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          only-modules: "true"
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Generate splits
        id: split
        uses: ./.github/actions/split-tests
        with:
          config: ./ci.json

  core:
    needs: [split-packages]
    strategy:
      fail-fast: false
      matrix:
        cmd: ["go_core_tests", "go_core_race_tests"]
        split: ${{ fromJson(needs.split-packages.outputs.splits) }}
    name: Core Tests (${{ matrix.cmd }}) ${{ matrix.split.id }}
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable
      CL_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable
      LOG_LEVEL: debug
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chainlink_test
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name cl_pg
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@v1
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Core Tests (${{ matrix.cmd }}) ${{ matrix.split.id }}
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      - name: Setup node
        uses: actions/setup-node@v3
      - name: Setup NodeJS
        uses: ./.github/actions/setup-nodejs
        with:
          prod: "true"
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Setup Solana
        uses: ./.github/actions/setup-solana
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Download Go vendor packages
        run: go mod download
      - name: Build binary
        run: go build -o chainlink.test ./core
      - name: Install psql # TODO: pin version?
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
      - name: Increase max_connections and shared_buffers
        run: |
          docker exec -i cl_pg bash << EOF
            sed -i -e 's/max_connections = 100/max_connections = 1000/' /var/lib/postgresql/data/postgresql.conf
            sed -i -e 's/shared_buffers = 128MB/shared_buffers = 2GB/' /var/lib/postgresql/data/postgresql.conf
          EOF
      - name: Show PostgreSQL config file
        run: psql -h localhost -p 5432 -U postgres -c 'SHOW config_file;'
      - name: Restart PostgreSQL container
        run: docker restart --time 0 cl_pg
      - name: Sleep a bit until the DB starts up
        run: sleep 5
      - name: Show max_connections
        run: psql -h localhost -p 5432 -U postgres -c 'SHOW max_connections;'
      - name: Show shared_buffers
        run: psql -h localhost -p 5432 -U postgres -c 'SHOW shared_buffers;'
      - name: Setup DB
        run: ./chainlink.test local db preparetest
      - name: Increase Race Timeout
        if: github.event.schedule != ''
        run: |
          echo "TIMEOUT=10m" >> $GITHUB_ENV
          echo "COUNT=50" >> $GITHUB_ENV
      - name: Run tests
        run: ./tools/bin/${{ matrix.cmd }} "${{ matrix.split.pkgs }}"
      - name: Store logs artifacts on failure
        if: failure()
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        with:
          name: ${{ matrix.cmd }}_${{ matrix.split.idx }}_logs
          path: |
            ./output.txt
            ./race.*
      - name: Print postgres logs
        if: always()
        uses: docker://docker:latest
        with:
          args: logs ${{ job.services.postgres.id }}

  # Satisfy required check for core tests
  # while still allowing for adjustable splitting
  core-complete:
    needs: [core]
    name: Core Tests (${{ matrix.cmd }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cmd: ["go_core_tests", "go_core_race_tests"]
    steps:
      - run: echo "${{ matrix.cmd }} have finished"
