name: Automation Benchmark Test
on:
  workflow_dispatch:
    inputs:
      chainlinkVersion:
        description: Chainlink image version to use
        required: true
        type: string
        default: 1.10.0
      chainlinkImage:
        description: Chainlink image repo to use
        required: true
        type: string
        default: public.ecr.aws/chainlink/chainlink
      network:
        description: Network to run tests on
        required: true
        type: choice
        options:
          - SIMULATED
          - SIMULATED_NONDEV
          - GOERLI
          - ARBITRUM_GOERLI
          - OPTIMISM_GOERLI
          - MUMBAI
          - SEPOLIA
      TestInputs:
        description: TestInputs
        required: false
        type: string
      wsURL:
        description: WS URL for the network (Skip for Simulated)
        required: false
        type: string
      httpURL:
        description: HTTP URL for the network (Skip for Simulated)
        required: false
        type: string
      slackMemberID:
        description: Notifies test results (Not your @)
        required: true
        default: U02Q14G80TY
        type: string
      fundingPrivateKey:
        description: Private funding key (Skip for Simulated)
        required: false
        type: string

jobs:
  automation_benchmark:
    environment: integration
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    name: ${{ inputs.network }} Automation Benchmark Test
    runs-on: ubuntu-latest
    env:
      SELECTED_NETWORKS: ${{ inputs.network }}
      SLACK_API_KEY: ${{ secrets.QA_SLACK_API_KEY }}
      SLACK_CHANNEL: C03KJ5S7KEK
      TEST_INPUTS: ${{ inputs.TestInputs }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      REF_NAME: ${{ github.head_ref || github.ref_name }}
      ENV_JOB_IMAGE_BASE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-tests
    steps:
      - name: Setup Push Tag
        id: push
        shell: bash
        run: |
          echo "### chainlink image used for this test run :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ inputs.chainlinkVersion }}\`" >>$GITHUB_STEP_SUMMARY
          echo "### chainlink-tests image tag for this test run :ship:" >>$GITHUB_STEP_SUMMARY
          if [ "${{ env.REF_NAME }}" != "develop" ]; then
            # use sha if not on develop
            echo "tag=${{ env.ENV_JOB_IMAGE_BASE }}:benchmark.${{ github.sha }}" >>$GITHUB_OUTPUT
            echo "\`benchmark.${{ github.sha }}\`" >>$GITHUB_STEP_SUMMARY
          else
            # default to develop
            echo "tag=${{ env.ENV_JOB_IMAGE_BASE }}:develop" >>$GITHUB_OUTPUT
            echo "\`develop\`" >>$GITHUB_STEP_SUMMARY
          fi
      - name: Add mask
        run: |
          EVM_URLS=$(jq -r '.inputs.wsURL' $GITHUB_EVENT_PATH)
          EVM_HTTP_URLS=$(jq -r '.inputs.httpURL' $GITHUB_EVENT_PATH)
          EVM_KEYS=$(jq -r '.inputs.fundingPrivateKey' $GITHUB_EVENT_PATH)
          SLACK_USER=$(jq -r '.inputs.slackMemberID' $GITHUB_EVENT_PATH)
          echo ::add-mask::$EVM_URLS
          echo ::add-mask::$EVM_HTTP_URLS
          echo ::add-mask::$EVM_KEYS
          echo ::add-mask::$SLACK_USER
          echo EVM_URLS=$EVM_URLS >> $GITHUB_ENV
          echo EVM_HTTP_URLS=$EVM_HTTP_URLS >> $GITHUB_ENV
          echo EVM_KEYS=$EVM_KEYS >> $GITHUB_ENV
          echo SLACK_USER=$SLACK_USER >> $GITHUB_ENV
      - name: Checkout the repo
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ env.REF_NAME }}
      - name: build test runner
        if: ${{ env.REF_NAME != 'develop' }}
        uses: smartcontractkit/chainlink-github-actions/docker/build-push@ce87f8986ca18336cc5015df75916c2ec0a7c4b3 # v2.1.2
        with:
          tags: ${{ steps.push.outputs.tag }}
          file: ./integration-tests/test.Dockerfile
          build-args: |
            BASE_IMAGE=${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/test-base-image
            IMAGE_VERSION=v0.3.8
            SUITES="benchmark"
          AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@ce87f8986ca18336cc5015df75916c2ec0a7c4b3 # v2.1.2
        env:
          DETACH_RUNNER: true
          TEST_SUITE: benchmark
          TEST_ARGS: -test.timeout 720h
          ENV_JOB_IMAGE: ${{ steps.push.outputs.tag }}
        with:
          test_command_to_run: cd integration-tests && go test -timeout 30m -v -run ^TestAutomationBenchmark$ ./benchmark -count=1
          test_download_vendor_packages_command: make gomod
          cl_repo: ${{ inputs.chainlinkImage }}
          cl_image_tag: ${{ inputs.chainlinkVersion }}
          token: ${{ secrets.GITHUB_TOKEN }}
          should_cleanup: false
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}
      - name: Collect Metrics
        if: always()
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@808c183d1f5c26a4f3fd50b75d3cf7b58d9aa293
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: ${{ inputs.network }} Automation Benchmark Test
        continue-on-error: true
