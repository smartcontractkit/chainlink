name: On Demand OCR Soak Test
on:
  workflow_dispatch:
    inputs:
      network:
        description: Network to run tests on
        type: choice
        options:
          - "SIMULATED"
          - "GOERLI"
          - "OPTIMISM_GOERLI"
          - "ARBITRUM_GOERLI"
      fundingPrivateKey:
        description: Private funding key (Skip for Simulated)
        required: false
        type: string
      wsURL:
        description: WS URL for the network (Skip for Simulated)
        required: false
        type: string
      httpURL:
        description: HTTP URL for the network (Skip for Simulated)
        required: false
        type: string
      slackMemberID:
        description: Slack Member ID (Not your @)
        required: true
        default: U01A2B2C3D4
        type: string
      chainlinkImage:
        description: Container image location for the Chainlink nodes
        required: true
        default: public.ecr.aws/chainlink/chainlink
      chainlinkVersion:
        description: Container image version for the Chainlink nodes
        required: true
        default: "1.11.0"
      testDuration:
        description: Duration of the test (time string)
        required: false
        default: 15m
      chainlinkNodeFunding:
        description: How much to fund each Chainlink node (in ETH)
        required: false
        default: ".001"
      timeBetweenRounds:
        description: How long to wait before starting a new round
        required: false
        default: 1m

jobs:
  ocr_soak_test:
    name: ${{ inputs.network }} OCR Soak Test
    environment: integration
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    env:
      CHAINLINK_COMMIT_SHA: ${{ inputs.chainlinkVersion }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      SELECTED_NETWORKS: ${{ inputs.network }}
      EVM_KEYS: ${{ inputs.fundingPrivateKey }}
      EVM_URLS: ${{ inputs.wsURL }}
      EVM_HTTP_URLS: ${{ inputs.httpURL }}
      SLACK_USER: ${{ inputs.slackMemberID }}
      SLACK_API_KEY: ${{ secrets.QA_SLACK_API_KEY }}
      SLACK_CHANNEL: ${{ secrets.QA_SLACK_CHANNEL }}
      OCR_TEST_DURATION: ${{ inputs.testDuration }}
      OCR_CHAINLINK_NODE_FUNDING: ${{ inputs.chainlinkNodeFunding }}
      OCR_TIME_BETWEEN_ROUNDS: ${{ inputs.timeBetweenRounds }}
      TEST_LOG_LEVEL: debug
      REF_NAME: ${{ github.head_ref || github.ref_name }}
      ENV_JOB_IMAGE_BASE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-tests
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@v1
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: ${{ inputs.network }} OCR Soak Test
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ env.REF_NAME }}
      - name: Setup Push Tag
        id: push
        shell: bash
        run: |
          echo "### chainlink image used for this test run :link:" >>$GITHUB_STEP_SUMMARY
          echo "\`${{ inputs.chainlinkVersion }}\`" >>$GITHUB_STEP_SUMMARY
          echo "### chainlink-tests image tag for this test run :ship:" >>$GITHUB_STEP_SUMMARY
          if [ "${{ env.REF_NAME }}" != "develop" ]; then
            # use sha if not on develop
            echo "tag=${{ env.ENV_JOB_IMAGE_BASE }}:soak.${{ github.sha }}" >>$GITHUB_OUTPUT
            echo "\`soak.${{ github.sha }}\`" >>$GITHUB_STEP_SUMMARY
          else
            # default to develop
            echo "tag=${{ env.ENV_JOB_IMAGE_BASE }}:develop" >>$GITHUB_OUTPUT
            echo "\`develop\`" >>$GITHUB_STEP_SUMMARY
          fi
      - name: build test runner
        if: ${{ env.REF_NAME != 'develop' }}
        uses: smartcontractkit/chainlink-github-actions/docker/build-push@ce87f8986ca18336cc5015df75916c2ec0a7c4b3 # v2.1.2
        with:
          tags: ${{ steps.push.outputs.tag }}
          file: ./integration-tests/test.Dockerfile
          build-args: |
            BASE_IMAGE=${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/test-base-image
            IMAGE_VERSION=v0.3.8
            SUITES="soak"
          AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@ce87f8986ca18336cc5015df75916c2ec0a7c4b3 # v2.1.2
        env:
          DETACH_RUNNER: true
          TEST_SUITE: soak
          TEST_ARGS: -test.timeout 900h -test.memprofile memprofile.out -test.cpuprofile profile.out
          ENV_JOB_IMAGE: ${{ steps.push.outputs.tag }}
          # We can comment these out when we have a stable soak test and aren't worried about resource consumption
          TEST_UPLOAD_CPU_PROFILE: true
          TEST_UPLOAD_MEM_PROFILE: true
        with:
          test_command_to_run: cd ./integration-tests && go test -v -count=1 -run ^TestOCRSoak$ ./soak
          test_download_vendor_packages_command: make gomod
          cl_repo: ${{ inputs.chainlinkImage }}
          cl_image_tag: ${{ inputs.chainlinkVersion }}
          token: ${{ secrets.GITHUB_TOKEN }}
          should_cleanup: false
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}
