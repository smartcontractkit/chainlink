version: 2
jobs:
  go-sqlite:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/init_gcloud
      - run: ./tools/ci/go_test
  go-sqlite-race:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/gorace_test
  go-postgres:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.16
      - image: circleci/postgres:11-alpine
        environment:
          POSTGRES_USER: circleci_postgres
          POSTGRES_DB: circleci_test
    environment:
      DATABASE_URL: postgres://circleci_postgres@localhost:5432/circleci_test?sslmode=disable
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/go_single_threaded_test
  rust:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/rust_test
  sgx:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    environment:
      SGX_ENABLED: yes
      # XXX: These are set in the base image but circleci seems to wipe them out
      PATH: "/root/.cargo/bin:/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/sgxsdk/bin:/opt/sgxsdk/bin/x64"
      LD_LIBRARY_PATH: "/opt/sgxsdk/sdk_libs"
      SGX_SDK: "/opt/sgxsdk"
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: make enclave
      - run: ./tools/ci/sgx_test
  geth-postgres:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.16
      - image: circleci/postgres:11-alpine
        environment:
          POSTGRES_USER: circleci_postgres
          POSTGRES_DB: circleci_test
    environment:
      DATABASE_URL: postgres://circleci_postgres@localhost:5432/circleci_test?sslmode=disable
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/ethereum_test
  parity-postgres:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.16
      - image: circleci/postgres:11-alpine
        environment:
          POSTGRES_USER: circleci_postgres
          POSTGRES_DB: circleci_test
      - image: smartcontract/devnet:latest
    environment:
      DATABASE_URL: postgres://circleci_postgres@localhost:5432/circleci_test?sslmode=disable
      ETH_WS_PORT: 8546
      ETH_HTTP_PORT: 8545
      MIN_OUTGOING_CONFIRMATIONS: 1
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
      - run: dep ensure -vendor-only
      - save_cache:
          name: Save Go Vendor Cache
          key: v{{ checksum "cache.version" }}-go-vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: ./tools/ci/ethereum_test parity
  truffle:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Yarn Package Cache
          key: v{{ checksum "cache.version" }}-yarn-vendor-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: v{{ checksum "cache.version" }}-yarn-vendor-{{ checksum "yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
      - run: ./tools/ci/truffle_test
  gui:
    working_directory: /go/src/github.com/smartcontractkit/chainlink
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: echo $CACHE_VERSION > cache.version
      - restore_cache:
          name: Restore Yarn Package Cache
          key: v{{ checksum "cache.version" }}-yarn-vendor-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: v{{ checksum "cache.version" }}-yarn-vendor-{{ checksum "yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
      - run: ./tools/ci/init_gcloud
      - run: ./tools/ci/gui_test
  reportcoverage:
    docker:
      - image: smartcontract/builder:1.0.17
    steps:
      - checkout
      - run: ./tools/ci/init_gcloud
      - run: ./tools/ci/report_coverage
  deploy:
    docker:
      - image: smartcontract/deployer:latest
    environment:
      ENVIRONMENT: release
      DOCKER_TAG: staging
    steps:
      - checkout
      - run: ./tools/ci/init_gcloud
      - setup_remote_docker
      - run: echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
      - run: make docker
      - run: make dockerpush
      - run: |
          docker inspect --format='{{index .RepoDigests 0}}' "smartcontract/chainlink:staging" \
            | awk -F'@' '{print$2}' \
            | xargs -I'%' kubectl set image deployment.apps/chainlink-deploy \
                "chainlink=smartcontract/chainlink:staging@%"

workflows:
  version: 2
  test:
    jobs:
      - go-sqlite
      - go-sqlite-race
      - go-postgres
      - truffle
      - geth-postgres
      - parity-postgres
      - gui
      - rust
      - sgx
      - reportcoverage:
          requires:
            - go-sqlite
            - gui
      - deploy:
          requires:
            - go-sqlite
            - go-sqlite-race
            - go-postgres
            - truffle
            - geth-postgres
            - parity-postgres
            - gui
          filters:
            branches:
              only: master
