version: 2.1
jobs:
  build-publish-chainlink:
    resource_class: 2xlarge
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    steps:
      - checkout
      - setup-aws-ecr
      - run:
          name: Docker build
          command: DOCKER_TAG=circleci make docker
      - run:
          name: Docker push, if applicable
          command: |
            tools/ci/push_chainlink "${CIRCLE_BRANCH}" "${CIRCLE_TAG}" "${CIRCLE_SHA1}"

workflows:
  version: 2
  test:
    jobs:
      - build-publish-chainlink:
          filters:
            tags:
              only: /^v.*/
commands:
  setup-aws-ecr:
    description: 'Install aws cli and log docker in ECR'
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm awscliv2.zip
            aws --version
      - run:
          name: Docker login for ECR using temporary creds
          command: |
            # Get temporary credentials to access resoures available to specific role
            temporaryCredentials=$(
              aws sts assume-role \
                --role-arn "${AWS_ROLE_TO_ASSUME}" \
                --role-session-name "cirlceci-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_TAG}"
            )
            # Deconstruct json response, extracting aws credentials
            accessKeyID=$(echo $temporaryCredentials | jq .Credentials.AccessKeyId | xargs)
            secretAccessKey=$(echo $temporaryCredentials | jq .Credentials.SecretAccessKey | xargs)
            sessionToken=$(echo $temporaryCredentials | jq .Credentials.SessionToken | xargs)
            # Store aws creds in .aws folder
            aws configure set aws_access_key_id ${accessKeyID}
            aws configure set aws_secret_access_key ${secretAccessKey}
            aws configure set aws_session_token ${sessionToken}
            # Use temporary keys to get account ID
            accountID=$(aws sts get-caller-identity --output text --query 'Account')
            # docker cli login to ECR
            aws ecr get-login-password --region "${AWS_REGION}" --profile "default" | docker login --username AWS --password-stdin "${accountID}.dkr.ecr.us-west-2.amazonaws.com/chainlink"
