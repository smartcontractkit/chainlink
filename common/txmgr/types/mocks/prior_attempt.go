// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	commontypes "github.com/smartcontractkit/chainlink/v2/common/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/common/txmgr/types"
)

// PriorAttempt is an autogenerated mock type for the PriorAttempt type
type PriorAttempt[F types.Fee, TX_HASH commontypes.Hashable] struct {
	mock.Mock
}

// Fee provides a mock function with given fields:
func (_m *PriorAttempt[F, TX_HASH]) Fee() F {
	ret := _m.Called()

	var r0 F
	if rf, ok := ret.Get(0).(func() F); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(F)
	}

	return r0
}

// GetBroadcastBeforeBlockNum provides a mock function with given fields:
func (_m *PriorAttempt[F, TX_HASH]) GetBroadcastBeforeBlockNum() *int64 {
	ret := _m.Called()

	var r0 *int64
	if rf, ok := ret.Get(0).(func() *int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// GetChainSpecificFeeLimit provides a mock function with given fields:
func (_m *PriorAttempt[F, TX_HASH]) GetChainSpecificFeeLimit() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetHash provides a mock function with given fields:
func (_m *PriorAttempt[F, TX_HASH]) GetHash() TX_HASH {
	ret := _m.Called()

	var r0 TX_HASH
	if rf, ok := ret.Get(0).(func() TX_HASH); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(TX_HASH)
	}

	return r0
}

// GetTxType provides a mock function with given fields:
func (_m *PriorAttempt[F, TX_HASH]) GetTxType() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewPriorAttempt interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriorAttempt creates a new instance of PriorAttempt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriorAttempt[F types.Fee, TX_HASH commontypes.Hashable](t mockConstructorTestingTNewPriorAttempt) *PriorAttempt[F, TX_HASH] {
	mock := &PriorAttempt[F, TX_HASH]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
