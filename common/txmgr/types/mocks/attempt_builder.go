// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	logger "github.com/smartcontractkit/chainlink/core/logger"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/common/txmgr/types"
)

// AttemptBuilder is an autogenerated mock type for the AttemptBuilder type
type AttemptBuilder[H types.Head, F types.Fee, A interface{}, HA interface{}, GU interface{}, T interface{}, TA interface{}] struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeeEstimator provides a mock function with given fields:
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) FeeEstimator() types.FeeEstimator[H, F, GU, HA] {
	ret := _m.Called()

	var r0 types.FeeEstimator[H, F, GU, HA]
	if rf, ok := ret.Get(0).(func() types.FeeEstimator[H, F, GU, HA]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.FeeEstimator[H, F, GU, HA])
		}
	}

	return r0
}

// HealthReport provides a mock function with given fields:
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) HealthReport() map[string]error {
	ret := _m.Called()

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewAttempt provides a mock function with given fields: ctx, etx, lggr, opts
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) NewAttempt(ctx context.Context, etx T, lggr logger.Logger, opts ...types.Opt) (TA, F, uint32, bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, etx, lggr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 TA
	var r1 F
	var r2 uint32
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, T, logger.Logger, ...types.Opt) (TA, F, uint32, bool, error)); ok {
		return rf(ctx, etx, lggr, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, logger.Logger, ...types.Opt) TA); ok {
		r0 = rf(ctx, etx, lggr, opts...)
	} else {
		r0 = ret.Get(0).(TA)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, logger.Logger, ...types.Opt) F); ok {
		r1 = rf(ctx, etx, lggr, opts...)
	} else {
		r1 = ret.Get(1).(F)
	}

	if rf, ok := ret.Get(2).(func(context.Context, T, logger.Logger, ...types.Opt) uint32); ok {
		r2 = rf(ctx, etx, lggr, opts...)
	} else {
		r2 = ret.Get(2).(uint32)
	}

	if rf, ok := ret.Get(3).(func(context.Context, T, logger.Logger, ...types.Opt) bool); ok {
		r3 = rf(ctx, etx, lggr, opts...)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(context.Context, T, logger.Logger, ...types.Opt) error); ok {
		r4 = rf(ctx, etx, lggr, opts...)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewAttemptWithType provides a mock function with given fields: ctx, etx, lggr, txType, opts
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) NewAttemptWithType(ctx context.Context, etx T, lggr logger.Logger, txType int, opts ...types.Opt) (TA, F, uint32, bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, etx, lggr, txType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 TA
	var r1 F
	var r2 uint32
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, T, logger.Logger, int, ...types.Opt) (TA, F, uint32, bool, error)); ok {
		return rf(ctx, etx, lggr, txType, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, logger.Logger, int, ...types.Opt) TA); ok {
		r0 = rf(ctx, etx, lggr, txType, opts...)
	} else {
		r0 = ret.Get(0).(TA)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, logger.Logger, int, ...types.Opt) F); ok {
		r1 = rf(ctx, etx, lggr, txType, opts...)
	} else {
		r1 = ret.Get(1).(F)
	}

	if rf, ok := ret.Get(2).(func(context.Context, T, logger.Logger, int, ...types.Opt) uint32); ok {
		r2 = rf(ctx, etx, lggr, txType, opts...)
	} else {
		r2 = ret.Get(2).(uint32)
	}

	if rf, ok := ret.Get(3).(func(context.Context, T, logger.Logger, int, ...types.Opt) bool); ok {
		r3 = rf(ctx, etx, lggr, txType, opts...)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(context.Context, T, logger.Logger, int, ...types.Opt) error); ok {
		r4 = rf(ctx, etx, lggr, txType, opts...)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewBumpAttempt provides a mock function with given fields: ctx, etx, previousAttempt, txType, priorAttempts, lggr
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) NewBumpAttempt(ctx context.Context, etx T, previousAttempt TA, txType int, priorAttempts []types.PriorAttempt[F, HA], lggr logger.Logger) (TA, F, uint32, bool, error) {
	ret := _m.Called(ctx, etx, previousAttempt, txType, priorAttempts, lggr)

	var r0 TA
	var r1 F
	var r2 uint32
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) (TA, F, uint32, bool, error)); ok {
		return rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) TA); ok {
		r0 = rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	} else {
		r0 = ret.Get(0).(TA)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) F); ok {
		r1 = rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	} else {
		r1 = ret.Get(1).(F)
	}

	if rf, ok := ret.Get(2).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) uint32); ok {
		r2 = rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	} else {
		r2 = ret.Get(2).(uint32)
	}

	if rf, ok := ret.Get(3).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) bool); ok {
		r3 = rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(context.Context, T, TA, int, []types.PriorAttempt[F, HA], logger.Logger) error); ok {
		r4 = rf(ctx, etx, previousAttempt, txType, priorAttempts, lggr)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewCustomAttempt provides a mock function with given fields: etx, fee, gasLimit, txType, lggr
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) NewCustomAttempt(etx T, fee F, gasLimit uint32, txType int, lggr logger.Logger) (TA, bool, error) {
	ret := _m.Called(etx, fee, gasLimit, txType, lggr)

	var r0 TA
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(T, F, uint32, int, logger.Logger) (TA, bool, error)); ok {
		return rf(etx, fee, gasLimit, txType, lggr)
	}
	if rf, ok := ret.Get(0).(func(T, F, uint32, int, logger.Logger) TA); ok {
		r0 = rf(etx, fee, gasLimit, txType, lggr)
	} else {
		r0 = ret.Get(0).(TA)
	}

	if rf, ok := ret.Get(1).(func(T, F, uint32, int, logger.Logger) bool); ok {
		r1 = rf(etx, fee, gasLimit, txType, lggr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(T, F, uint32, int, logger.Logger) error); ok {
		r2 = rf(etx, fee, gasLimit, txType, lggr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewEmptyTransaction provides a mock function with given fields: nonce, feeLimit, fee, fromAddress
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) NewEmptyTransaction(nonce uint64, feeLimit uint32, fee F, fromAddress A) (TA, error) {
	ret := _m.Called(nonce, feeLimit, fee, fromAddress)

	var r0 TA
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint32, F, A) (TA, error)); ok {
		return rf(nonce, feeLimit, fee, fromAddress)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint32, F, A) TA); ok {
		r0 = rf(nonce, feeLimit, fee, fromAddress)
	} else {
		r0 = ret.Get(0).(TA)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint32, F, A) error); ok {
		r1 = rf(nonce, feeLimit, fee, fromAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnNewLongestChain provides a mock function with given fields: ctx, head
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) OnNewLongestChain(ctx context.Context, head H) {
	_m.Called(ctx, head)
}

// Ready provides a mock function with given fields:
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) Ready() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *AttemptBuilder[H, F, A, HA, GU, T, TA]) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAttemptBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttemptBuilder creates a new instance of AttemptBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttemptBuilder[H types.Head, F types.Fee, A interface{}, HA interface{}, GU interface{}, T interface{}, TA interface{}](t mockConstructorTestingTNewAttemptBuilder) *AttemptBuilder[H, F, A, HA, GU, T, TA] {
	mock := &AttemptBuilder[H, F, A, HA, GU, T, TA]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
