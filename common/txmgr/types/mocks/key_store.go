// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	pg "github.com/smartcontractkit/chainlink/v2/core/services/pg"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/common/types"
)

// KeyStore is an autogenerated mock type for the KeyStore type
type KeyStore[ADDR types.Hashable, ID interface{}, TX interface{}, META interface{}] struct {
	mock.Mock
}

// CheckEnabled provides a mock function with given fields: address, chainID
func (_m *KeyStore[ADDR, ID, TX, META]) CheckEnabled(address ADDR, chainID ID) error {
	ret := _m.Called(address, chainID)

	var r0 error
	if rf, ok := ret.Get(0).(func(ADDR, ID) error); ok {
		r0 = rf(address, chainID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnabledAddressesForChain provides a mock function with given fields: chainId
func (_m *KeyStore[ADDR, ID, TX, META]) EnabledAddressesForChain(chainId ID) ([]ADDR, error) {
	ret := _m.Called(chainId)

	var r0 []ADDR
	var r1 error
	if rf, ok := ret.Get(0).(func(ID) ([]ADDR, error)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(ID) []ADDR); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ADDR)
		}
	}

	if rf, ok := ret.Get(1).(func(ID) error); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementNextSequence provides a mock function with given fields: address, chainID, currentNonce, qopts
func (_m *KeyStore[ADDR, ID, TX, META]) IncrementNextSequence(address ADDR, chainID ID, currentNonce META, qopts ...pg.QOpt) error {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address, chainID, currentNonce)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ADDR, ID, META, ...pg.QOpt) error); ok {
		r0 = rf(address, chainID, currentNonce, qopts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NextSequence provides a mock function with given fields: address, chainID, qopts
func (_m *KeyStore[ADDR, ID, TX, META]) NextSequence(address ADDR, chainID ID, qopts ...pg.QOpt) (META, error) {
	_va := make([]interface{}, len(qopts))
	for _i := range qopts {
		_va[_i] = qopts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address, chainID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 META
	var r1 error
	if rf, ok := ret.Get(0).(func(ADDR, ID, ...pg.QOpt) (META, error)); ok {
		return rf(address, chainID, qopts...)
	}
	if rf, ok := ret.Get(0).(func(ADDR, ID, ...pg.QOpt) META); ok {
		r0 = rf(address, chainID, qopts...)
	} else {
		r0 = ret.Get(0).(META)
	}

	if rf, ok := ret.Get(1).(func(ADDR, ID, ...pg.QOpt) error); ok {
		r1 = rf(address, chainID, qopts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignTx provides a mock function with given fields: fromAddress, tx, chainID
func (_m *KeyStore[ADDR, ID, TX, META]) SignTx(fromAddress ADDR, tx *TX, chainID ID) (*TX, error) {
	ret := _m.Called(fromAddress, tx, chainID)

	var r0 *TX
	var r1 error
	if rf, ok := ret.Get(0).(func(ADDR, *TX, ID) (*TX, error)); ok {
		return rf(fromAddress, tx, chainID)
	}
	if rf, ok := ret.Get(0).(func(ADDR, *TX, ID) *TX); ok {
		r0 = rf(fromAddress, tx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TX)
		}
	}

	if rf, ok := ret.Get(1).(func(ADDR, *TX, ID) error); ok {
		r1 = rf(fromAddress, tx, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToKeyChanges provides a mock function with given fields:
func (_m *KeyStore[ADDR, ID, TX, META]) SubscribeToKeyChanges() (chan struct{}, func()) {
	ret := _m.Called()

	var r0 chan struct{}
	var r1 func()
	if rf, ok := ret.Get(0).(func() (chan struct{}, func())); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	if rf, ok := ret.Get(1).(func() func()); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewKeyStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyStore creates a new instance of KeyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyStore[ADDR types.Hashable, ID interface{}, TX interface{}, META interface{}](t mockConstructorTestingTNewKeyStore) *KeyStore[ADDR, ID, TX, META] {
	mock := &KeyStore[ADDR, ID, TX, META]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
