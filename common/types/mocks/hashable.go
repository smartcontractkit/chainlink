// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hashable is an autogenerated mock type for the Hashable type
type Hashable[T interface{}] struct {
	mock.Mock
}

// Empty provides a mock function with given fields:
func (_m *Hashable[T]) Empty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Equals provides a mock function with given fields: t
func (_m *Hashable[T]) Equals(t T) bool {
	ret := _m.Called(t)

	var r0 bool
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MarshalText provides a mock function with given fields:
func (_m *Hashable[T]) MarshalText() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Hashable[T]) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewHashable interface {
	mock.TestingT
	Cleanup(func())
}

// NewHashable creates a new instance of Hashable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHashable[T interface{}](t mockConstructorTestingTNewHashable) *Hashable[T] {
	mock := &Hashable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
