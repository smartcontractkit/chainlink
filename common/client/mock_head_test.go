// Code generated by mockery v2.35.4. DO NOT EDIT.

package client

import (
	utils "github.com/smartcontractkit/chainlink/v2/core/utils"
	mock "github.com/stretchr/testify/mock"
)

// mockHead is an autogenerated mock type for the Head type
type mockHead struct {
	mock.Mock
}

// BlockDifficulty provides a mock function with given fields:
func (_m *mockHead) BlockDifficulty() *utils.Big {
	ret := _m.Called()

	var r0 *utils.Big
	if rf, ok := ret.Get(0).(func() *utils.Big); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Big)
		}
	}

	return r0
}

// BlockNumber provides a mock function with given fields:
func (_m *mockHead) BlockNumber() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// newMockHead creates a new instance of mockHead. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockHead(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockHead {
	mock := &mockHead{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
