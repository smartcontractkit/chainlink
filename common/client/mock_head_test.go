// Code generated by mockery v2.38.0. DO NOT EDIT.

package client

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// mockHead is an autogenerated mock type for the Head type
type mockHead struct {
	mock.Mock
}

// BlockDifficulty provides a mock function with given fields:
func (_m *mockHead) BlockDifficulty() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockDifficulty")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// BlockNumber provides a mock function with given fields:
func (_m *mockHead) BlockNumber() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockNumber")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// newMockHead creates a new instance of mockHead. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockHead(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockHead {
	mock := &mockHead{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
