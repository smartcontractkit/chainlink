// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/smartcontractkit/chainlink/v2/common/client"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/v2/common/types"

	utils "github.com/smartcontractkit/chainlink/v2/core/utils"
)

// Node is an autogenerated mock type for the Node type
type Node[CHAIN_ID types.ID, HEAD client.Head, RPC client.NodeClient[CHAIN_ID, HEAD]] struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfiguredChainID provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) ConfiguredChainID() CHAIN_ID {
	ret := _m.Called()

	var r0 CHAIN_ID
	if rf, ok := ret.Get(0).(func() CHAIN_ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(CHAIN_ID)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Order provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) Order() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// RPC provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) RPC() RPC {
	ret := _m.Called()

	var r0 RPC
	if rf, ok := ret.Get(0).(func() RPC); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(RPC)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *Node[CHAIN_ID, HEAD, RPC]) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) State() client.NodeState {
	ret := _m.Called()

	var r0 client.NodeState
	if rf, ok := ret.Get(0).(func() client.NodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.NodeState)
	}

	return r0
}

// StateAndLatest provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) StateAndLatest() (client.NodeState, int64, *utils.Big) {
	ret := _m.Called()

	var r0 client.NodeState
	var r1 int64
	var r2 *utils.Big
	if rf, ok := ret.Get(0).(func() (client.NodeState, int64, *utils.Big)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() client.NodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.NodeState)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() *utils.Big); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*utils.Big)
		}
	}

	return r0, r1, r2
}

// String provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SubscribersCount provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) SubscribersCount() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// UnsubscribeAllExceptAliveLoop provides a mock function with given fields:
func (_m *Node[CHAIN_ID, HEAD, RPC]) UnsubscribeAllExceptAliveLoop() {
	_m.Called()
}

type mockConstructorTestingTNewNode interface {
	mock.TestingT
	Cleanup(func())
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNode[CHAIN_ID types.ID, HEAD client.Head, RPC client.NodeClient[CHAIN_ID, HEAD]](t mockConstructorTestingTNewNode) *Node[CHAIN_ID, HEAD, RPC] {
	mock := &Node[CHAIN_ID, HEAD, RPC]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
