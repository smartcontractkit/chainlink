# Dev enables development mode. This setting is not recommended for production deployments. It can be useful for enabling experimental features and collecting debug information.
Dev = false # Default
# ExplorerURL is the websocket URL for the node to push stats to.
ExplorerURL = 'ws://explorer.url' # Example
# **ADVANCED**
# InsecureFastScrypt causes all key stores to encrypt using "fast" scrypt params instead. This is insecure and only useful for local testing. DO NOT ENABLE THIS IN PRODUCTION.
InsecureFastScrypt = false # Default
# ReaperExpiration represents how long an API session lasts before expiring and requiring a new login.
ReaperExpiration = '240h' # Default
# RootDir is the Chainlink node's root directory. This is the default directory for logging, database backups, cookies, and other misc Chainlink node files. Chainlink nodes will always ensure this directory has 700 permissions because it might contain sensitive data.
RootDir = '~/.chainlink' # Default
# ShutdownGracePeriod is the maximum time allowed to shut down gracefully. If exceeded, the node will terminate immediately to avoid being SIGKILLed.
ShutdownGracePeriod = '5s' # Default

[Feature]
# FeedsManager enables the experimental feeds manager service.
FeedsManager = false # Default
# LogPoller enables the log poller, an experimental approach to processing logs, required if also using Evm.UseForwarders or OCR2.
LogPoller = false # Default
# OffchainReporting2 enables OCR2 jobs.
OffchainReporting2 = false # Default
# OffchainReporting enables OCR jobs.
OffchainReporting = false # Default

[Database]
# DefaultIdleInTxSessionTimeout is the maximum time allowed for queries to idle in transaction before timing out.
DefaultIdleInTxSessionTimeout = '1h' # Default
# DefaultLockTimeout is the maximum time allowed for a query stuck waiting to take a lock before timing out.
DefaultLockTimeout = '15s' # Default
# DefaultQueryTimeout is the maximum time allowed for standard queries before timing out.
DefaultQueryTimeout = '10s' # Default
# MigrateOnStartup controls whether a Chainlink node will attempt to automatically migrate the database on boot. If you want more control over your database migration process, set this variable to `false` and manually migrate the database using the CLI `migrate` command instead.
MigrateOnStartup = true # Default
# ORMMaxIdleConns configures the maximum number of idle database connections that the Chainlink node will keep open. Think of this as the baseline number of database connections per Chainlink node instance. Increasing this number can help to improve performance under database-heavy workloads.
#
# Postgres has connection limits, so you must use cation when increasing this value. If you are running several instances of a Chainlink node or another application on a single database server, you might run out of Postgres connection slots if you raise this value too high.
ORMMaxIdleConns = 10 # Default
# ORMMaxOpenConns configures the maximum number of database connections that a Chainlink node will have open at any one time. Think of this as the maximum burst upper bound limit of database connections per Chainlink node instance. Increasing this number can help to improve performance under database-heavy workloads.
#
# Postgres has connection limits, so you must use cation when increasing this value. If you are running several instances of a Chainlink node or another application on a single database server, you might run out of Postgres connection slots if you raise this value too high.
ORMMaxOpenConns = 20 # Default

# As a best practice, take regular database backups in case of accidental data loss. This best practice is especially important when you upgrade your Chainlink node to a new version. Chainlink nodes support automated database backups to make this process easier.
#
# NOTE: Dumps can cause high load and massive database latencies, which will negatively impact the normal functioning of the Chainlink node. For this reason, it is recommended to set a `URL` and point it to a read replica if you enable automatic backups.
[Database.Backup]
# Mode sets the type of automatic database backup, which can be one of _none_, `lite`, or `full`. If enabled, the Chainlink node will always dump a backup on every boot before running migrations. Additionally, it will automatically take database backups that overwrite the backup file for the given version at regular intervals if `Frequency` is set to a non-zero interval.
#
# _none_ - Disables backups.
# `lite` - Dumps small tables including configuration and keys that are essential for the node to function, which excludes historical data like job runs, transaction history, etc.
# `full` - Dumps the entire database.
#
# It will write to a file like `$ROOT/backup/cl_backup_<VERSION>.dump`. There is one backup dump file per version of the Chainlink node. If you upgrade the node, it will keep the backup taken right before the upgrade migration so you can restore to an older version if necessary.
Mode = 'none' # Default
# Dir sets the directory to use for saving the backup file. Use this if you want to save the backup file in a directory other than the default ROOT directory.
Dir = 'test/backup/dir' # Example
# OnVersionUpgrade enables automatic backups of the database before running migrations, when you are upgrading to a new version.
OnVersionUpgrade = true # Default
# URL, if specified, is an alternative for the automatic database backup to use instead of the main database url.
#
# It is recommended to set this value to a _read replica_ if you have one to avoid excessive load on the main database.
URL = 'http://test.back.up/fake' # Example
# Frequency sets the interval for database dumps, if set to a positive duration and `Mode` is not _none_.
#
# Set to `0` to disable periodic backups.
Frequency = '1h' # Default

# **ADVANCED**
# These settings control the postgres event listener.
[Database.Listener]
# MaxReconnectDuration is the maximum duration to wait between reconnect attempts.
MaxReconnectDuration = '10m' # Default
# MinReconnectInterval controls the duration to wait before trying to re-establish the database connection after connection loss. After each consecutive failure this interval is doubled, until MaxReconnectInterval is reached.  Successfully completing the connection establishment procedure resets the interval back to MinReconnectInterval.
MinReconnectInterval = '1m' # Default
# FallbackPollInterval controls how often clients should manually poll as a fallback in case the postgres event was missed/dropped.
FallbackPollInterval = '30s' # Default

# **ADVANCED**
# Ideally, you should use a container orchestration system like [Kubernetes](https://kubernetes.io/) to ensure that only one Chainlink node instance can ever use a specific Postgres database. However, some node operators do not have the technical capacity to do this. Common use cases run multiple Chainlink node instances in failover mode as recommended by our official documentation. The first instance takes a lock on the database and subsequent instances will wait trying to take this lock in case the first instance fails.
#
# By default, Chainlink nodes use the `dual` setting to provide both advisory locks and lease locks for backward and forward compatibility. Using advisory locks alone presents the following problems:
#
# - If your nodes or applications hold locks open for several hours or days, Postgres is unable to complete internal cleanup tasks. The Postgres maintainers explicitly discourage holding locks open for long periods of time.
# - Advisory locks can silently disappear when you upgrade Postgres, so a new Chainlink node instance can take over even while the old node is still running.
# - Advisory locks do not work well with pooling tools such as [pgbouncer](https://www.pgbouncer.org/).
# - If the Chainlink node crashes, an advisory lock can hang around for up to several hours, which might require you to manually remove it so another instance of the Chainlink node will allow itself to boot.
#
# Because of the complications with advisory locks, Chainlink nodes with v1.1.0 and later support a new `lease` locking mode. This mode might become the default in future. The `lease` locking mode works using the following process:
#
# - Node A creates one row in the database with the client ID and updates it once per second.
# - Node B spinlocks and checks periodically to see if the client ID is too old. If the client ID is not updated after a period of time, node B assumes that node A failed and takes over. Node B becomes the owner of the row and updates the client ID once per second.
# - If node A comes back, it attempts to take out a lease, realizes that the database has been leased to another process, and exits the entire application immediately.
[Database.Lock]
# Mode variable can be set to 'dual', 'advisorylock', 'lease', or 'none'. It controls which mode to use to enforce that only one Chainlink node can use the database. It is recommended to set this to `lease`.
#
# - `dual` - The default: Uses both advisory locks and lease locks for backward and forward compatibility
# - `advisorylock` - Advisory lock only
# - `lease` - Lease lock only
# - _none_ - No locking at all: This option useful for advanced deployment environments when you are sure that only one instance of a Chainlink node will ever be running.
Mode = 'dual' # Default
# AdvisoryCheckInterval controls how often the Chainlink node checks to make sure it still holds the advisory lock when advisory locking is enabled. If a node no longer holds the lock, it will try to re-acquire it. If the node cannot re-acquire the lock, the application will exit.
#
# This setting applies only if `Mode` is set to enable advisory locking.
AdvisoryCheckInterval = '1s' # Default
# AdvisoryID must match all other Chainlink nodes that might access this database. It is unlikely you will ever need to change this from the default.
#
# This setting applies only if `Mode` is set to enable advisory locking.
AdvisoryID = 1027321974924625846 # Default
# LeaseDuration is how long the lease lock will last before expiring.
#
# This setting applies only if `Mode` is set to enable lease locking.
LeaseDuration = '10s' # Default
# LeaseRefreshInterval determines how often to refresh the lease lock. Also controls how often a standby node will check to see if it can grab the lease.
#
# This setting applies only if Mode is set to enable lease locking.
LeaseRefreshInterval = '1s' # Default

[TelemetryIngress]
# UniConn toggles which ws connection style is used.
UniConn = true # Default
# Logging toggles verbose logging of the raw telemetry messages being sent.
Logging = false # Default
# ServerPubKey is the public key of the telemetry server.
ServerPubKey = 'test-pub-key' # Default
# URL is where to send telemetry.
URL = 'https://prom.test' # Example
# BufferSize is the number of telemetry messages to buffer before dropping new ones.
BufferSize = 100 # Default
# MaxBatchSize is the maximum number of messages to batch into one telemetry request.
MaxBatchSize = 50 # Default
# SendInterval determines how often batched telemetry is sent to the ingress server.
SendInterval = '500ms' # Default
# SendTimeout is the max duration to wait for the request to complete when sending batch telemetry.
SendTimeout = '10s' # Default
# UseBatchSend toggles sending telemetry to the ingress server using the batch client.
UseBatchSend = true # Default

[Log]
# DatabaseQueries tells the Chainlink node to log database queries made using the default logger. SQL statements will be logged at `debug` level. Not all statements can be logged. The best way to get a true log of all SQL statements is to enable SQL statement logging on Postgres.
DatabaseQueries = false # Default
# JSONConsole enables JSON logging. Otherwise, the log is saved in a human-friendly console format.
JSONConsole = false # Default
# FileDir sets the log directory. By default, Chainlink nodes write log data to `$ROOT/log.jsonl`.
FileDir = '/my/log/directory' # Example
# FileMaxSize determines the log file's max size in megabytes before file rotation. Having this not set will disable logging to disk. If your disk doesn't have enough disk space, the logging will pause and the application will log errors until space is available again.
#
# Values must have suffixes with a unit like: `5120mb` (5,120 megabytes). If no unit suffix is provided, the value defaults to `b` (bytes). The list of valid unit suffixes are:
#
# - b (bytes)
# - kb (kilobytes)
# - mb (megabytes)
# - gb (gigabytes)
# - tb (terabytes)
FileMaxSize = '5120mb' # Default
# FileMaxAgeDays determines the log file's max age in days before file rotation. Keeping this config with the default value will not remove log files based on age.
FileMaxAgeDays = 0 # Default
# FileMaxBackups determines the maximum number of old log files to retain. Keeping this config with the default value retains all old log files. The `FileMaxAgeDays` variable can still cause them to get deleted.
FileMaxBackups = 1 # Default
# UnixTS enables legacy unix timestamps.
#
# Previous versions of Chainlink nodes wrote JSON logs with a unix timestamp. As of v1.1.0 and up, the default has changed to use ISO8601 timestamps for better readability.
UnixTS = false # Default

[WebServer]
# AllowOrigins controls the URLs Chainlink nodes emit in the `Allow-Origins` header of its API responses. The setting can be a comma-separated list with no spaces. You might experience CORS issues if this is not set correctly.
#
# You should set this to the external URL that you use to access the Chainlink UI.
#
# You can set `AllowOrigins = '*'` to allow the UI to work from any URL, but it is recommended for security reasons to make it explicit instead.
AllowOrigins = 'http://localhost:3000,http://localhost:6688' # Default
# BridgeResponseURL defines the URL for bridges to send a response to. This _must_ be set when using async external adapters.
#
# Usually this will be the same as the URL/IP and port you use to connect to the Chainlink UI.
BridgeResponseURL = 'https://my-chainlink-node.example.com:6688' # Example
# **ADVANCED**
# HTTPWriteTimeout controls how long the Chainlink node's API server can hold a socket open for writing a response to an HTTP request. Sometimes, this must be increased for pprof.
HTTPWriteTimeout = '10s' # Default
# HTTPPort is the port used for the Chainlink Node API, [CLI](/docs/configuration-variables/#cli-client), and GUI.
HTTPPort = 6688 # Default
# SecureCookies requires the use of secure cookies for authentication. Set to false to enable standard HTTP requests along with `TLSPort = 0`.
SecureCookies = true # Default
# SessionTimeout determines the amount of idle time to elapse before session cookies expire. This signs out GUI users from their sessions.
SessionTimeout = '15m' # Default

[WebServer.RateLimit]
# Authenticated defines the threshold to which authenticated requests get limited. More than this many authenticated requests per `AuthenticatedRateLimitPeriod` will be rejected.
Authenticated = 42 # Default
# AuthenticatedPeriod defines the period to which authenticated requests get limited.
AuthenticatedPeriod = '1m' # Default
# Unauthenticated defines the threshold to which authenticated requests get limited. More than this many unauthenticated requests per `UnAuthenticatedRateLimitPeriod` will be rejected.
Unauthenticated = 5 # Default
# UnauthenticatedPeriod defines the period to which unauthenticated requests get limited.
UnauthenticatedPeriod = '20s' # Default


# The Operator UI frontend supports enabling Multi Factor Authentication via Webauthn per account. When enabled, logging in will require the account password and a hardware or OS security key such as Yubikey. To enroll, log in to the operator UI and click the circle purple profile button at the top right and then click **Register MFA Token**. Tap your hardware security key or use the OS public key management feature to enroll a key. Next time you log in, this key will be required to authenticate.
[WebServer.MFA]
# RPID is the FQDN of where the Operator UI is served. When serving locally, the value should be `localhost`.
RPID = 'localhost' # Example
# RPOrigin is the origin URL where WebAuthn requests initiate, including scheme and port. When serving locally, the value should be `http://localhost:6688/`.
RPOrigin = 'http://localhost:6688/' # Example

# The TLS settings apply only if you want to enable TLS security on your Chainlink node.
[WebServer.TLS]
# CertPath is the location of the TLS certificate file.
CertPath = '/home/$USER/.chainlink/tls/server.crt' # Example
# Host is the hostname configured for TLS to be used by the Chainlink node. This is useful if you configured a domain name specific for your Chainlink node.
Host = 'tls-host' # Example
# KeyPath is the location of the TLS private key file.
KeyPath = '/home/$USER/.chainlink/tls/server.key' # Example
# HTTPSPort is the port used for HTTPS connections. Set this to `0` to disable HTTPS. Disabling HTTPS also relieves Chainlink nodes of the requirement for a TLS certificate.
HTTPSPort = 6689 # Default
# ForceRedirect forces TLS redirect for unencrypted connections.
ForceRedirect = false # Default

[JobPipeline]
# HTTPRequestMaxSize defines the maximum size for HTTP requests and responses made by `http` and `bridge` adapters.
HTTPRequestMaxSize = '32768' # Default
# DefaultHTTPRequestTimeout defines the default timeout for HTTP requests made by `http` and `bridge` adapters.
DefaultHTTPRequestTimeout = '15s' # Default
# ExternalInitiatorsEnabled enables the External Initiator feature. If disabled, `webhook` jobs can ONLY be initiated by a logged-in user. If enabled, `webhook` jobs can be initiated by a whitelisted external initiator.
ExternalInitiatorsEnabled = false # Default
# MaxRunDuration is the maximum time allowed for a single job run. If it takes longer, it will exit early and be marked errored. If set to zero, disables the time limit completely.
MaxRunDuration = '10m' # Default
# ReaperInterval controls how often the job pipeline reaper will run to delete completed jobs older than ReaperThreshold, in order to keep database size manageable.
#
# Set to `0` to disable the periodic reaper.
ReaperInterval = '1h' # Default
# ReaperThreshold determines the age limit for job runs. Completed job runs older than this will be automatically purged from the database.
ReaperThreshold = '24h' # Default
# **ADVANCED**
# ResultWriteQueueDepth controls how many writes will be buffered before subsequent writes are dropped, for jobs that write results asynchronously for performance reasons, such as OCR.
ResultWriteQueueDepth = 100 # Default

[FluxMonitor]
# **ADVANCED**
# DefaultTransactionQueueDepth controls the queue size for `DropOldestStrategy` in Flux Monitor. Set to 0 to use `SendEvery` strategy instead.
DefaultTransactionQueueDepth = 1 # Default
# SimulateTransactions enables transaction simulation for Flux Monitor.
SimulateTransactions = false # Default

[OCR2]
# ContractConfirmations is the number of block confirmations to wait for before enacting an on-chain
# configuration change. This value doesn't need to be very high (in
# particular, it does not need to protect against malicious re-orgs).
# Since configuration changes create some overhead, and mini-reorgs
# are fairly common, recommended values are between two and ten.
#
# Malicious re-orgs are not any more of concern here than they are in
# blockchain applications in general: Since nodes check the contract for the
# latest config every ContractConfigTrackerPollInterval.Seconds(), they will
# come to a common view of the current config within any interval longer than
# that, as long as the latest setConfig transaction in the longest chain is
# stable. They will thus be able to continue reporting after the poll
# interval, unless an adversary is able to repeatedly re-org the transaction
# out during every poll interval, which would amount to the capability to
# censor any transaction.
#
# Note that 1 confirmation implies that the transaction/event has been mined in one block.
# 0 confirmations would imply that the event would be recognised before it has even been mined, which is not currently supported.
# e.g.
# Current block height: 42
# Changed in block height: 43
# Contract config confirmations: 1
# STILL PENDING
#
# Current block height: 43
# Changed in block height: 43
# Contract config confirmations: 1
# CONFIRMED
ContractConfirmations = 3 # Default
# BlockchainTimeout is the timeout for blockchain queries (mediated through
# ContractConfigTracker and ContractTransmitter).
# (This is necessary because an oracle's operations are serialized, so
# blocking forever on a chain interaction would break the oracle.)
BlockchainTimeout = '20s' # Default
# ContractPollInterval is the polling interval at which ContractConfigTracker is queried for# updated on-chain configurations. Recommended values are between
# fifteen seconds and two minutes.
ContractPollInterval = '1m' # Default
# ContractSubscribeInterval is the interval at which we try to establish a subscription on ContractConfigTracker
# if one doesn't exist. Recommended values are between two and five minutes.
ContractSubscribeInterval = '2m' # Default
# ContractTransmitterTransmitTimeout is the timeout for ContractTransmitter.Transmit calls.
ContractTransmitterTransmitTimeout = '10s' # Default
# DatabaseTimeout is the timeout for database interactions.
# (This is necessary because an oracle's operations are serialized, so
# blocking forever on an observation would break the oracle.)
DatabaseTimeout = '10s' # Default
# KeyBundleID is a sha256 hexadecimal hash identifier.
KeyBundleID = '7a5f66bbe6594259325bf2b4f5b1a9c900000000000000000000000000000000' # Example

# This section applies only if you are running off-chain reporting jobs.
[OCR]
# ObservationTimeout is the timeout for making observations using the DataSource.Observe method.
# (This is necessary because an oracle's operations are serialized, so
# blocking forever on an observation would break the oracle.)
ObservationTimeout = '5s' # Default
# BlockchainTimeout is the timeout for blockchain queries (mediated through
# ContractConfigTracker and ContractTransmitter).
# (This is necessary because an oracle's operations are serialized, so
# blocking forever on a chain interaction would break the oracle.)
BlockchainTimeout = '20s' # Default
# ContractPollInterval is the polling interval at which ContractConfigTracker is queried for
# updated on-chain configurations. Recommended values are between
# fifteen seconds and two minutes.
ContractPollInterval = '1m' # Default
# ContractSubscribeInterval is the interval at which we try to establish a subscription on ContractConfigTracker
# if one doesn't exist. Recommended values are between two and five minutes.
ContractSubscribeInterval = '2m' # Default
# **ADVANCED**
# DefaultTransactionQueueDepth controls the queue size for `DropOldestStrategy` in OCR. Set to 0 to use `SendEvery` strategy instead.
DefaultTransactionQueueDepth = 1 # Default
# KeyBundleID is the default key bundle ID to use for OCR jobs. If you have an OCR job that does not explicitly specify a key bundle ID, it will fall back to this value.
KeyBundleID = 'acdd42797a8b921b2910497badc5000600000000000000000000000000000000' # Example
# SimulateTransactions enables transaction simulation for OCR.
SimulateTransactions = false # Default
# TransmitterAddress is the default sending address to use for OCR. If you have an OCR job that does not explicitly specify a transmitter address, it will fall back to this value.
TransmitterAddress = '0xa0788FC17B1dEe36f057c42B6F373A34B014687e' # Example

# P2P supports multiple networking stack versions. You may configure `[P2P.V1]`, `[P2P.V2]`, or both to run simultaneously.
# If both are configured, then for each link with another peer, V2 networking will be preferred. If V2 does not work, the link will
# automatically fall back to V1. If V2 starts working again later, it will automatically be preferred again. This is useful
# for migrating networks without downtime. Note that the two networking stacks _must not_ be configured to bind to the same IP/port.
#
# All nodes in the OCR network should share the same networking stack.
[P2P]
# IncomingMessageBufferSize is the per-remote number of incoming
# messages to buffer. Any additional messages received on top of those
# already in the queue will be dropped.
IncomingMessageBufferSize = 10 # Default
# OutgoingMessageBufferSize is the per-remote number of outgoing
# messages to buffer. Any additional messages send on top of those
# already in the queue will displace the oldest.
# NOTE: OutgoingMessageBufferSize should be comfortably smaller than remote's
# IncomingMessageBufferSize to give the remote enough space to process
# them all in case we regained connection and now send a bunch at once
OutgoingMessageBufferSize = 10 # Default
# TraceLogging enables trace level logging.
TraceLogging = false # Default

[P2P.V1]
# AnnounceIP should be set as the externally reachable IP address of the Chainlink node.
AnnounceIP = '1.2.3.4' # Example
# AnnouncePort should be set as the externally reachable port of the Chainlink node.
AnnouncePort = 1337 # Example
# BootstrapCheckInterval is the interval at which nodes check connections to bootstrap nodes and reconnect if any of them is lost.
# Setting this to a small value would allow newly joined bootstrap nodes to get more connectivityBootstrapCheckInterval = '20s' # Default
# more quickly, which helps to make bootstrap process faster. The cost of this operation is relatively# DefaultBootstrapPeers is the default set of bootstrap peers.
# cheap. We set this to 1 minute during our test.DefaultBootstrapPeers = ['/dns4/example.com/tcp/1337/p2p/12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U', '/ip4/1.2.3.4/tcp/9999/p2p/12D3KooWLZ9uTC3MrvKfDpGju6RAQubiMDL7CuJcAgDRTYP7fh7R'] # Example
BootstrapCheckInterval = '20s' # Default
# DefaultBootstrapPeers is the default set of bootstrap peers.
DefaultBootstrapPeers = ['/dns4/example.com/tcp/1337/p2p/12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U', '/ip4/1.2.3.4/tcp/9999/p2p/12D3KooWLZ9uTC3MrvKfDpGju6RAQubiMDL7CuJcAgDRTYP7fh7R'] # Example
# DHTAnnouncementCounterUserPrefix can be used to restore the node's
# ability to announce its IP/port on the P2P network after a database
# rollback. Make sure to only increase this value, and *never* decrease it.
# Don't use this variable unless you really know what you're doing, since you
# could semi-permanently exclude your node from the P2P network by
# misconfiguring it.
DHTAnnouncementCounterUserPrefix = 0 # Default
# **ADVANCED**
# DHTLookupInterval is the interval between which we do the expensive peer
# lookup using DHT.
#
# Every DHTLookupInterval failures to open a stream to a peer, we will
# attempt to lookup its IP from DHT
DHTLookupInterval = 10 # Default
# ListenIP is the default IP address to bind to.
ListenIP = '0.0.0.0' # Default
# ListenPort is the port to listen on. If left blank, the node randomly selects a different port each time it boots. It is highly recommended to set this to a static value to avoid network instability.
ListenPort = 1337 # Example
# **ADVANCED**
# NewStreamTimeout is the maximum length of time to wait to open a
# stream before we give up.
# We shouldn't hit this in practice since libp2p will give up fast if
# it can't get a connection, but it is here anyway as a failsafe.
# Set to 0 to disable any timeout on top of what libp2p gives us by default.
NewStreamTimeout = '10s' # Default
# PeerID is the default peer ID to use for OCR jobs. If unspecified, uses the first available peer ID.
PeerID = '12D3KooWMoejJznyDuEk5aX6GvbjaG12UzeornPCBNzMRqdwrFJw' # Example
# **ADVANCED**
# PeerstoreWriteInterval controls how often the peerstore for the OCR V1 networking stack is persisted to the database.
PeerstoreWriteInterval = '5m' # Default

[P2P.V2]
# AnnounceAddresses is the addresses the peer will advertise on the network in host:port form as accepted by net.Dial. The addresses should be reachable by peers of interest.
AnnounceAddresses = ['1.2.3.4:9999', '[a52d:0:a88:1274::abcd]:1337'] # Example
# DefaultBootstrappers is the default bootstrapper peers for libocr's v2 networking stack.
DefaultBootstrappers = ['12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U@1.2.3.4:9999', '12D3KooWM55u5Swtpw9r8aFLQHEtw7HR4t44GdNs654ej5gRs2Dh@example.com:1234'] # Example
# DeltaDial controls how far apart Dial attempts are
DeltaDial = '15s' # Default
# DeltaReconcile controls how often a Reconcile message is sent to every peer.
DeltaReconcile = '1m' # Default
# ListenAddresses is the addresses the peer will listen to on the network in `host:port` form as accepted by `net.Listen()`, but the host and port must be fully specified and cannot be empty. You can specify `0.0.0.0` (IPv4) or `::` (IPv6) to listen on all interfaces, but that is not recommended.
ListenAddresses = ['1.2.3.4:9999', '[a52d:0:a88:1274::abcd]:1337'] # Example

[Keeper]
# **ADVANCED**
# DefaultTransactionQueueDepth controls the queue size for `DropOldestStrategy` in Keeper. Set to 0 to use `SendEvery` strategy instead.
DefaultTransactionQueueDepth = 1 # Default
# GasPriceBufferPercent specifies the percentage to add to the gas price used for checking whether to perform an upkeep. Only applies in legacy mode (EIP-1559 off).
GasPriceBufferPercent = 20 # Default
# GasTipCapBufferPercent specifies the percentage to add to the gas price used for checking whether to perform an upkeep. Only applies in EIP-1559 mode.
GasTipCapBufferPercent = 20 # Default
# BaseFeeBufferPercent specifies the percentage to add to the base fee used for checking whether to perform an upkeep. Applies only in EIP-1559 mode.
BaseFeeBufferPercent = 20 # Default
# **ADVANCED**
# MaximumGracePeriod is the maximum number of blocks that a keeper will wait after performing an upkeep before it resumes checking that upkeep
MaximumGracePeriod = 100 # Default
# **ADVANCED**
# RegistryCheckGasOverhead is the amount of extra gas to provide checkUpkeep() calls to account for the gas consumed by the keeper registry.
RegistryCheckGasOverhead = '200000' # Default
# **ADVANCED**
# RegistryPerformGasOverhead is the amount of extra gas to provide performUpkeep() calls to account for the gas consumed by the keeper registry
RegistryPerformGasOverhead = '150000' # Default
# **ADVANCED**
# RegistrySyncInterval is the interval in which the RegistrySynchronizer performs a full sync of the keeper registry contract it is tracking.
RegistrySyncInterval = '30m' # Default
# **ADVANCED**
# RegistrySyncUpkeepQueueSize represents the maximum number of upkeeps that can be synced in parallel.
RegistrySyncUpkeepQueueSize = 10 # Default
# TurnLookBack is the number of blocks in the past to look back when getting a block for a turn.
TurnLookBack = 1000 # Default
# TurnFlagEnabled enables a new algorithm for how keepers take turns.
TurnFlagEnabled = false # Default
# **ADVANCED**
# UpkeepCheckGasPriceEnabled includes gas price in calls to `checkUpkeep()` when set to `true`.
UpkeepCheckGasPriceEnabled = false # Default

# The Chainlink node is equipped with an internal "nurse" service that can perform automatic `pprof` profiling when the certain resource thresholds are exceeded, such as memory and goroutine count. These profiles are saved to disk to facilitate fine-grained debugging of performance-related issues. In general, if you notice that your node has begun to accumulate profiles, forward them to the Chainlink team.
#
# To learn more about these profiles, read the [Profiling Go programs with pprof](https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/) guide.
[AutoPprof]
# Enabled enables the automatic profiling service.
Enabled = false # Default
# ProfileRoot sets the location on disk where pprof profiles will be stored. Defaults to `RootDir`.
ProfileRoot = 'prof/root' # Example
# PollInterval is the interval at which the node's resources are checked.
PollInterval = '10s' # Default
# GatherDuration is the duration for which profiles are gathered when profiling starts.
GatherDuration = '10s' # Default
# GatherTraceDuration is the duration for which traces are gathered when profiling is kicked off. This is separately configurable because traces are significantly larger than other types of profiles.
GatherTraceDuration = '5s' # Default
# MaxProfileSize is the maximum amount of disk space that profiles may consume before profiling is disabled.
MaxProfileSize = '100mb' # Default
# CPUProfileRate sets the rate for CPU profiling. See https://pkg.go.dev/runtime#SetCPUProfileRate.
CPUProfileRate = 1 # Default
# MemProfileRate sets the rate for memory profiling. See https://pkg.go.dev/runtime#pkg-variables.
MemProfileRate = 1 # Default
# BlockProfileRate sets the fraction of blocking events for goroutine profiling. See https://pkg.go.dev/runtime#SetBlockProfileRate.
BlockProfileRate = 1 # Default
# MutexProfileFraction sets the fraction of contention events for mutex profiling. See https://pkg.go.dev/runtime#SetMutexProfileFraction.
MutexProfileFraction = 1 # Default
# MemThreshold sets the maximum amount of memory the node can actively consume before profiling begins.
MemThreshold = '4gb' # Default
# GoroutineThreshold is the maximum number of actively-running goroutines the node can spawn before profiling begins.
GoroutineThreshold = 5000 # Default

[Sentry]
# **ADVANCED**
# Debug enables printing of Sentry SDK debug messages.
Debug = false # Default
# DSN is the data source name where events will be sent. Sentry is completely disabled if this is left blank.
DSN = 'sentry-dsn' # Example
# Environment overrides the Sentry environment to the given value. Otherwise autodetects between dev/prod.
Environment = 'prod' # Default
# Release overrides the Sentry release to the given value. Otherwise uses the compiled-in version number.
Release = 'v1.2.3' # Example

# EVM defaults depend on ChainID:
#
# **EXTENDED**
[[EVM]]
# ChainID is the EVM chain ID. Mandatory.
ChainID = '1' # Example
# Enabled enables this chain.
Enabled = true # Default
# **ADVANCED**
# BlockBackfillDepth specifies the number of blocks before the current HEAD that the log broadcaster will try to re-consume logs from.
BlockBackfillDepth = 10 # Default
# BlockBackfillSkip enables skipping of very long backfills.
BlockBackfillSkip = false # Default
# ChainType is automatically detected from chain ID. Set this to force a certain chain type regardless of chain ID.
ChainType = 'Optimism' # Example
# FinalityDepth is the number of blocks after which an ethereum transaction is considered "final". Note that the default is automatically set based on chain ID so it should not be necessary to change this under normal operation.
# BlocksConsideredFinal determines how deeply we look back to ensure that transactions are confirmed onto the longest chain
# There is not a large performance penalty to setting this relatively high (on the order of hundreds)
# It is practically limited by the number of heads we store in the database and should be less than this with a comfortable margin.
# If a transaction is mined in a block more than this many blocks ago, and is reorged out, we will NOT retransmit this transaction and undefined behaviour can occur including gaps in the nonce sequence that require manual intervention to fix.
# Therefore this number represents a number of blocks we consider large enough that no re-org this deep will ever feasibly happen.
#
# Special cases:
# `FinalityDepth`=0 would imply that transactions can be final even before they were mined into a block. This is not supported.
# `FinalityDepth`=1 implies that transactions are final after we see them in one block.
#
# Examples:
#
# Transaction sending:
# A transaction is sent at block height 42
#
# `FinalityDepth` is set to 5
# A re-org occurs at height 44 starting at block 41, transaction is marked for rebroadcast
# A re-org occurs at height 46 starting at block 41, transaction is marked for rebroadcast
# A re-org occurs at height 47 starting at block 41, transaction is NOT marked for rebroadcast
FinalityDepth = 50 # Default
# **ADVANCED**
# FlagsContractAddress can optionally point to a [Flags contract](../contracts/src/v0.8/Flags.sol). If set, the node will lookup that contract for each job that supports flags contracts (currently OCR and FM jobs are supported). If the job's contractAddress is set as hibernating in the FlagsContractAddress address, it overrides the standard update parameters (such as heartbeat/threshold).
FlagsContractAddress = '0xae4E781a6218A8031764928E88d457937A954fC3' # Example
# LinkContractAddress is the canonical ERC-677 LINK token contract address on the given chain. Note that this is usually autodetected from chain ID.
LinkContractAddress = '0x538aAaB4ea120b2bC2fe5D296852D948F07D849e' # Example
# **ADVANCED**
# LogBackfillBatchSize sets the batch size for calling FilterLogs when we backfill missing logs.
LogBackfillBatchSize = 100 # Default
# **ADVANCED**
# LogPollInterval works in conjunction with Feature.LogPoller. Controls how frequently the log poller polls for logs. Defaults to the block production rate.
LogPollInterval = '15s' # Default
# MaxInFlightTransactions controls how many transactions are allowed to be "in-flight" i.e. broadcast but unconfirmed at any one time. You can consider this a form of transaction throttling.
#
# The default is set conservatively at 16 because this is a pessimistic minimum that both geth and parity will hold without evicting local transactions. If your node is falling behind and you need higher throughput, you can increase this setting, but you MUST make sure that your ETH node is configured properly otherwise you can get nonce gapped and your node will get stuck.
#
# 0 value disables the limit. Use with caution.
MaxInFlightTransactions = 16 # Default
# MaxQueuedTransactions is the maximum number of unbroadcast transactions per key that are allowed to be enqueued before jobs will start failing and rejecting send of any further transactions. This represents a sanity limit and generally indicates a problem with your ETH node (transactions are not getting mined).
#
# Do NOT blindly increase this value thinking it will fix things if you start hitting this limit because transactions are not getting mined, you will instead only make things worse.
#
# In deployments with very high burst rates, or on chains with large re-orgs, you _may_ consider increasing this.
#
# 0 value disables any limit on queue size. Use with caution.
MaxQueuedTransactions = 250 # Default
# MinIncomingConfirmations is the minimum required confirmations before a log event will be consumed.
MinIncomingConfirmations = 3 # Default
# MinimumContractPayment is the minimum payment in LINK required to execute a direct request job. This can be overridden on a per-job basis.
MinimumContractPayment = '10000000000000 juels' # Default
# NonceAutoSync enables automatic nonce syncing on startup. Chainlink nodes will automatically try to sync its local nonce with the remote chain on startup and fast forward if necessary. This is almost always safe but can be disabled in exceptional cases by setting this value to false.
NonceAutoSync = true # Default
# OperatorFactoryAddress is the address of the canonical operator forwarder contract on the given chain. Note that this is usually autodetected from chain ID.
OperatorFactoryAddress = '0xa5B85635Be42F21f94F28034B7DA440EeFF0F418' # Example
# RPCDefaultBatchSize is the default batch size for batched RPC calls.
RPCDefaultBatchSize = 100 # Default
# TxReaperInterval controls how often the EthTx reaper will run.
TxReaperInterval = '1h' # Default
# TxReaperThreshold indicates how old an EthTx ought to be before it can be reaped.
TxReaperThreshold = '168h' # Default
# TxResendAfterThreshold controls how long to wait before re-broadcasting a transaction that has not yet been confirmed.
TxResendAfterThreshold = '1m' # Default
# UseForwarders enables or disables sending transactions through forwarder contracts.
UseForwarders = false # Default

[EVM.BalanceMonitor]
# Enabled balance monitoring for all keys.
Enabled = true # Default
# **ADVANCED**
# BlockDelay is the number of blocks that the balance monitor trails behind head. This is required when load balancing
# across multiple nodes announce a new head, then route a request to a different node which does not have this head yet.
BlockDelay = 1 # Default

[EVM.GasEstimator]
# Mode controls what type of gas estimator is used.
#
# - `FixedPrice` uses static configured values for gas price (can be set via API call).
# - `BlockHistory` dynamically adjusts default gas price based on heuristics from mined blocks.
# - `L2Suggested`
#
# Chainlink nodes decide what gas price to use using an `Estimator`. It ships with several simple and battle-hardened built-in estimators that should work well for almost all use-cases. Note that estimators will change their behaviour slightly depending on if you are in EIP-1559 mode or not.
#
# You can also use your own estimator for gas price by selecting the `FixedPrice` estimator and using the exposed API to set the price.
#
# An important point to note is that the Chainlink node does _not_ ship with built-in support for go-ethereum's `estimateGas` call. This is for several reasons, including security and reliability. We have found empirically that it is not generally safe to rely on the remote ETH node's idea of what gas price should be.
Mode = 'BlockHistory' # Default
# PriceDefault is the default gas price to use when submitting transactions to the blockchain. Will be overridden by the built-in `BlockHistoryEstimator` if enabled, and might be increased if gas bumping is enabled.
#
# (Only applies to legacy transactions)
#
# Can be used with the `chainlink setgasprice` to be updated while the node is still running.
PriceDefault = '20 gwei' # Default
# PriceMax is the maximum gas price. Chainlink nodes will never pay more than this for a transaction.
PriceMax = '100 micro' # Default
# PriceMin is the minimum gas price. Chainlink nodes will never pay less than this for a transaction.
#
# (Only applies to legacy transactions)
#
# It is possible to force the Chainlink node to use a fixed gas price by setting a combination of these, e.g.
#
# ```toml
# EIP1559DynamicFees = false
# PriceMax = 100
# PriceMin = 100
# PriceDefault = 100
# BumpThreshold = 0
# Mode = 'FixedPrice'
# ```
PriceMin = '1 gwei' # Default
# LimitDefault sets default gas limit for outgoing transactions. This should not need to be changed in most cases.
# Some job types, such as Keeper jobs, might set their own gas limit unrelated to this value.
LimitDefault = 500_000 # Default
# LimitMultiplier is the factor by which a transaction's GasLimit is multiplied before transmission. So if the value is 1.1, and the GasLimit for a transaction is 10, 10% will be added before transmission.
#
# This factor is always applied, so includes Optimism L2 transactions which uses a default gas limit of 1 and is also applied to `LimitDefault`.
LimitMultiplier = '1.0' # Default
# LimitTransfer is the gas limit used for an ordinary ETH transfer.
LimitTransfer = 21_000 # Default
# BumpMin is the minimum fixed amount of wei by which gas is bumped on each transaction attempt.
BumpMin = '5 gwei' # Default
# BumpPercent is the percentage by which to bump gas on a transaction that has exceeded `BumpThreshold`. The larger of `GasBumpPercent` and `GasBumpWei` is taken for gas bumps.
BumpPercent = 20 # Default
# BumpThreshold is the number of blocks to wait for a transaction stuck in the mempool before automatically bumping the gas price. Set to 0 to disable gas bumping completely.
BumpThreshold = 3 # Default
# BumpTxDepth is the number of transactions to gas bump starting from oldest. Set to 0 for no limit (i.e. bump all).
BumpTxDepth = 10 # Default
# EIP1559DynamicFees torces EIP-1559 transaction mode. Enabling EIP-1559 mode can help reduce gas costs on chains that support it. This is supported only on official Ethereum mainnet and testnets. It is not recommended to enable this setting on Polygon because the EIP-1559 fee market appears to be broken on all Polygon chains and EIP-1559 transactions are less likely to be included than legacy transactions.
#
# #### Technical details
#
# Chainlink nodes include experimental support for submitting transactions using type 0x2 (EIP-1559) envelope.
#
# EIP-1559 mode is enabled by default on the Ethereum Mainnet, but can be enabled on a per-chain basis or globally.
#
# This might help to save gas on spikes. Chainlink nodes should react faster on the upleg and avoid overpaying on the downleg. It might also be possible to set `EVM.GasEstimator.BlockHistory.BatchSize` to a smaller value such as 12 or even 6 because tip cap should be a more consistent indicator of inclusion time than total gas price. This would make Chainlink nodes more responsive and should reduce response time variance. Some experimentation is required to find optimum settings.
#
# Set with caution, if you set this on a chain that does not actually support EIP-1559 your node will be broken.
#
# In EIP-1559 mode, the total price for the transaction is the minimum of base fee + tip cap and fee cap. More information can be found on the [official EIP](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).
#
# Chainlink's implementation of EIP-1559 works as follows:
#
# If you are using FixedPriceEstimator:
# - With gas bumping disabled, it will submit all transactions with `feecap=MaxGasPriceWei` and `tipcap=GasTipCapDefault`
# - With gas bumping enabled, it will submit all transactions initially with `feecap=GasFeeCapDefault` and `tipcap=GasTipCapDefault`.
#
# If you are using BlockHistoryEstimator (default for most chains):
# - With gas bumping disabled, it will submit all transactions with `feecap=MaxGasPriceWei` and `tipcap=<calculated using past blocks>`
# - With gas bumping enabled (default for most chains) it will submit all transactions initially with `feecap=current block base fee * (1.125 ^ N)` where N is configurable by setting `EVM.GasEstimator.BlockHistory.EIP1559FeeCapBufferBlocks` but defaults to `gas bump threshold+1` and `tipcap=<calculated using past blocks>`
#
# Bumping works as follows:
#
# - Increase tipcap by `max(tipcap * (1 + GasBumpPercent), tipcap + GasBumpWei)`
# - Increase feecap by `max(feecap * (1 + GasBumpPercent), feecap + GasBumpWei)`
#
# A quick note on terminology - Chainlink nodes use the same terms used internally by go-ethereum source code to describe various prices. This is not the same as the externally used terms. For reference:
#
# - Base Fee Per Gas = BaseFeePerGas
# - Max Fee Per Gas = FeeCap
# - Max Priority Fee Per Gas = TipCap
#
# In EIP-1559 mode, the following changes occur to how configuration works:
#
# - All new transactions will be sent as type 0x2 transactions specifying a TipCap and FeeCap. Be aware that existing pending legacy transactions will continue to be gas bumped in legacy mode.
# - `BlockHistoryEstimator` will apply its calculations (gas percentile etc) to the TipCap and this value will be used for new transactions (GasPrice will be ignored)
# - `FixedPriceEstimator` will use `GasTipCapDefault` instead of `GasPriceDefault` for the tip cap
# - `FixedPriceEstimator` will use `GasFeeCapDefault` instaed of `GasPriceDefault` for the fee cap
# - `PriceMinWei` is ignored for new transactions and `GasTipCapMinimum` is used instead (default 0)
# - `PriceMaxWei` still represents that absolute upper limit that Chainlink will ever spend (total) on a single tx
# - `Keeper.GasTipCapBufferPercent` is ignored in EIP-1559 mode and `Keeper.GasTipCapBufferPercent` is used instead
EIP1559DynamicFees = false # Default
# FeeCapDefault controls the fixed initial fee cap, if EIP1559 mode is enabled and `FixedPrice` gas estimator is used.
FeeCapDefault = '100 gwei' # Default
# TipCapDefault is the default gas tip to use when submitting transactions to the blockchain. Will be overridden by the built-in `BlockHistoryEstimator` if enabled, and might be increased if gas bumping is enabled.
#
# (Only applies to EIP-1559 transactions)
TipCapDefault = '1 wei' # Default
# TipCapMinimum is the minimum gas tip to use when submitting transactions to the blockchain.
#
# Only applies to EIP-1559 transactions)
TipCapMinimum = '1 wei' # Default


# These settings allow you to configure how your node calculates gas prices when using the block history estimator.
# In most cases, leaving these values at their defaults should give good results.
[EVM.GasEstimator.BlockHistory]
# BatchSize sets the maximum number of blocks to fetch in one batch in the block history estimator.
# If the `BatchSize` variable is set to 0, it defaults to `EVM.RPCDefaultBatchSize`.
BatchSize = 4 # Default
# BlockDelay controls the number of blocks that the block history estimator trails behind head.
# For example, if this is set to 3, and we receive block 10, block history estimator will fetch block 7.
#
# CAUTION: You might be tempted to set this to 0 to use the latest possible
# block, but it is possible to receive a head BEFORE that block is actually
# available from the connected node via RPC, due to race conditions in the code of the remote ETH node. In this case you will get false
# "zero" blocks that are missing transactions.
BlockDelay = 1 # Default
# BlockHistorySize controls the number of past blocks to keep in memory to use as a basis for calculating a percentile gas price.
BlockHistorySize = 8 # Default
# **ADVANCED**
# EIP1559FeeCapBufferBlocks controls the buffer blocks to add to the current base fee when sending a transaction. By default, the gas bumping threshold + 1 block is used.
#
# Only applies to EIP-1559 transactions)
EIP1559FeeCapBufferBlocks = 13 # Example
# TransactionPercentile specifies gas price to choose. E.g. if the block history contains four transactions with gas prices `[100, 200, 300, 400]` then picking 25 for this number will give a value of 200. If the calculated gas price is higher than `GasPriceDefault` then the higher price will be used as the base price for new transactions.
#
# Must be in range 0-100.
#
# Only has an effect if gas updater is enabled.
#
# Think of this number as an indicator of how aggressive you want your node to price its transactions.
#
# Setting this number higher will cause the Chainlink node to select higher gas prices.
#
# Setting it lower will tend to set lower gas prices.
TransactionPercentile = 60 # Default

[EVM.HeadTracker]
# BlockEmissionIdleWarningThreshold will cause Chainlink to log warnings if this duration is exceeded without any new blocks being emitted.
BlockEmissionIdleWarningThreshold = '1m' # Default
# HistoryDepth tracks the top N block numbers to keep in the `heads` database table.
# Note that this can easily result in MORE than N records since in the case of re-orgs we keep multiple heads for a particular block height.
# This number should be at least as large as `FinalityDepth`.
# There may be a small performance penalty to setting this to something very large (10,000+)
HistoryDepth = 100 # Default
# MaxBufferSize is the maximum number of heads that may be
# buffered in front of the head tracker before older heads start to be
# dropped. You may think of it as something like the maximum permittable "lag"
# for the head tracker before we start dropping heads to keep up.
MaxBufferSize = 3 # Default
# **ADVANCED**
# SamplingInterval means that head tracker callbacks will at maximum be made once in every window of this duration. This is a performance optimisation for fast chains. Set to 0 to disable sampling entirely.
SamplingInterval = '1s' # Default

[[EVM.KeySpecific]]
# Key is the account to apply these settings to
Key = '0x2a3e23c6f242F5345320814aC8a1b4E58707D292' # Example
# GasEstimator.PriceMax overrides the maximum gas price for this key. See EVM.GasEstimator.PriceMaxWei.
GasEstimator.PriceMax = '79 gwei' # Example

[EVM.NodePool]
# NoNewHeadsThreshold controls how long to wait after receiving no new heads before marking the node as out-of-sync.
#
# Set to zero to disable out-of-sync checking.
NoNewHeadsThreshold = '3m' # Default
# PollFailureThreshold indicates how many consecutive polls must fail in order to mark a node as unreachable.
#
# Set to zero to disable poll checking.
PollFailureThreshold = 3 # Default
# PollInterval controls how often to poll the node to check for liveness.
#
# Set to zero to disable poll checking.
PollInterval = '10s' # Default

[EVM.OCR]
# ContractConfirmations sets `OCR.ContractConfirmations` for this EVM chain.
ContractConfirmations = 4 # Default
# ContractTransmitterTransmitTimeout sets `OCR.ContractTransmitterTransmitTimeout` for this EVM chain.
ContractTransmitterTransmitTimeout = '10s' # Default
# DatabaseTimeout sets `OCR.DatabaseTimeout` for this EVM chain.
DatabaseTimeout = '10s' # Default
# ObservationGracePeriod sets `OCR.ObservationGracePeriod` for this EVM chain.
ObservationGracePeriod = '1s' # Default
# ObservationTimeout sets `OCR.ObservationTimeout` for this EVM chain.
ObservationTimeout = '1m' # Example

[[EVM.Nodes]]
# Name is a unique (per-chain) identifier for this node.
Name = 'foo' # Example
# WSURL is the WS(S) endpoint for this node. Required for primary nodes.
WSURL = 'wss://web.socket/test' # Example
# HTTPURL is the HTTP(S) endpoint for this node. Recommended for primary nodes. Required for `SendOnly`.
HTTPURL = 'https://foo.web' # Example
# SendOnly limits usage to sending transaction broadcasts only. With this enabled, only HTTPURL is required, and WSURL is not used.
SendOnly = false # Default

[[Solana]]
# ChainID is the Solana chain ID. Must be one of: mainnet, testnet, devnet, localnet. Mandatory.
ChainID = 'mainnet' # Example
# Enabled enables this chain.
Enabled = false # Default
# BalancePollPeriod is the rate to poll for SOL balance and update Prometheus metrics.
BalancePollPeriod = '5s' # Default
# ConfirmPollPeriod is the rate to poll for signature confirmation.
ConfirmPollPeriod = '500ms' # Default
# OCR2CachePollPeriod is the rate to poll for the OCR2 state cache.
OCR2CachePollPeriod = '1s' # Default
# OCR2CacheTTL is the stale OCR2 cache deadline.
OCR2CacheTTL = '1m' # Default
# TxTimeout is the timeout for sending txes to an RPC endpoint.
TxTimeout = '1h' # Default
# TxRetryTimeout is the duration for tx manager to attempt rebroadcasting to RPC, before giving up.
TxRetryTimeout = '10s' # Default
# TxConfirmTimeout is the duration to wait when confirming a tx signature, before discarding as unconfirmed.
TxConfirmTimeout = '30s' # Default
# SkipPreflight enables or disables preflight checks when sending txs.
SkipPreflight = true # Default
# Commitment is the confirmation level for solana state and transactions. ([documentation](https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment))
Commitment = 'confirmed' # Default
# MaxRetries is the maximum number of times the RPC node will automatically rebroadcast a tx.
# The default is 0 for custom txm rebroadcasting method, set to -1 to use the RPC node's default retry strategy.
MaxRetries = 0 # Default

[[Solana.Nodes]]
# Name is a unique (per-chain) identifier for this node.
Name = 'primary' # Example
# URL is the HTTP(S) endpoint for this node.
URL = 'http://solana.web' # Example

[[Terra]]
# ChainID is the Terra chain ID. Mandatory.
ChainID = 'Bombay-12' # Example
# Enabled enables this chain.
Enabled = true # Default
# BlockRate is the average time between blocks.
BlockRate = '6s' # Default
# BlocksUntilTxTimeout is the number of blocks to wait before giving up on the tx getting confirmed.
BlocksUntilTxTimeout = 30 # Default
# ConfirmPollPeriod sets how often check for tx confirmation.
ConfirmPollPeriod = '1s' # Default
# FallbackGasPriceULuna sets a fallback gas price to use when the estimator is not available.
FallbackGasPriceULuna = '0.015' # Default
# FCDURL sets the FCD URL.
FCDURL = 'http://terra.com' # Example
# GasLimitMultiplier scales the estimated gas limit.
GasLimitMultiplier = '1.5' # Default
# MaxMsgsPerBatch limits the numbers of mesages per transaction batch.
MaxMsgsPerBatch = 100 # Default
# OCR2CachePollPeriod is the rate to poll for the OCR2 state cache.
OCR2CachePollPeriod = '4s' # Default
# OCR2CacheTTL is the stale OCR2 cache deadline.
OCR2CacheTTL = '1m' # Default
# TxMsgTimeout is the maximum age for resending transaction before they expire.
TxMsgTimeout = '10m' # Default

[[Terra.Nodes]]
# Name is a unique (per-chain) identifier for this node.
Name = 'primary' # Example
# TendermintURL is the HTTP(S) tendermint endpoint for this node.
TendermintURL = 'http://tender.mint' # Example
