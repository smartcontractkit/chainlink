#!/bin/bash

# Runs a Chainlink (CL) node preconfigured to communicate with gethnet.
# Steps:
# 1. ./internal/bin/gethnet
# 2. yarn install
# 3. cd solidity && truffle migrate && cd ..
# 4. ./internal/bin/cldev

GIT_ROOT=`git rev-parse --show-toplevel`
PROJECT_ROOT=${TRAVIS_BUILD_DIR:-$GIT_ROOT}
LDFLAGS=`$PROJECT_ROOT/internal/bin/ldflags`

pushd $PROJECT_ROOT >/dev/null
source internal/bin/clenv
export ROOT=$PROJECT_ROOT/internal/clroot

mainexec() {
  go run -ldflags "$LDFLAGS" main.go $@
}

if [ "$#" == 0 ]; then
  ## Build React GUI and then run CL node
  CHAINLINK_VERSION="$(mainexec --version)"
  export CHAINLINK_VERSION

  pushd gui >/dev/null
  yarn install --no-progress | cat
  yarn build | cat
  popd >/dev/null
  mainexec node -d -p $ROOT/password.txt -a $ROOT/apicredentials
  exit
fi

case "$1" in
  node)
    mainexec node -d -p $ROOT/password.txt -a $ROOT/apicredentials ${@:2}
    ;;
  clean)
    rm -f $ROOT/db.bolt $ROOT/log.jsonl
    ;;
  migration)
    timestamp=$(date +%s)
    pkg="store/migrations/migration${timestamp}"
    echo Creating migration package $pkg
    mkdir -p $pkg
    echo package migration${timestamp}_test > $pkg/migrate_test.go
    cat > $pkg/migrate.go <<-EOF
package migration$timestamp

import "github.com/smartcontractkit/chainlink/store/orm"

type Migration struct{}

func (m Migration) Timestamp() string {
    return "$timestamp"
}

func (m Migration) Migrate(orm *orm.ORM) error {
    return nil
}
EOF
    ;;
  *)
    mainexec $@
    ;;
esac
