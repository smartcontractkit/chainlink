// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethereum

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingPoolConstructorParams is an auto generated low-level Go binding around an user-defined struct.
type StakingPoolConstructorParams struct {
	LINKAddress                    common.Address
	MonitoredFeed                  common.Address
	InitialMaxPoolSize             *big.Int
	InitialMaxCommunityStakeAmount *big.Int
	InitialMaxOperatorStakeAmount  *big.Int
	MinCommunityStakeAmount        *big.Int
	MinOperatorStakeAmount         *big.Int
	PriorityPeriodThreshold        *big.Int
	RegularPeriodThreshold         *big.Int
	MaxAlertingRewardAmount        *big.Int
	MinInitialOperatorCount        *big.Int
	MinRewardDuration              *big.Int
	SlashableDuration              *big.Int
	DelegationRateDenominator      *big.Int
}

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"LINKAddress\",\"type\":\"address\"},{\"internalType\":\"contractAggregatorV3Interface\",\"name\":\"monitoredFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxCommunityStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxOperatorStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCommunityStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOperatorStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityPeriodThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regularPeriodThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAlertingRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialOperatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashableDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRateDenominator\",\"type\":\"uint256\"}],\"internalType\":\"structStaking.PoolConstructorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"AlertAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlertInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CastError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"ExcessiveStakeAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ExistingStakeFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentOperatorsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialOperatorsCount\",\"type\":\"uint256\"}],\"name\":\"InadequateInitialOperatorsCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredPoolSize\",\"type\":\"uint256\"}],\"name\":\"InsufficientRemainingPoolSpace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegationRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxAlertingRewardAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidMaxStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMigrationTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinCommunityStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinOperatorStakeAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"}],\"name\":\"InvalidPoolSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"currentStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiredStatus\",\"type\":\"bool\"}],\"name\":\"InvalidPoolStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegularPeriodThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleRootNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorIsAssignedToFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotLinkToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"StakeNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alerter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AlertRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrationTarget\",\"type\":\"address\"}],\"name\":\"MigrationTargetAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrationTarget\",\"type\":\"address\"}],\"name\":\"MigrationTargetProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegationReward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptMigrationTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"canAlert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityStakerLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelegatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelegationRateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDelegationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarnedBaseRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarnedDelegationRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMigrationTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMonitoredFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCommunityStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDelegatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRemovedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrationTarget\",\"type\":\"address\"}],\"name\":\"proposeMigrationTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raiseAlert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"removeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"setFeedOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCommunityStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOperatorStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setPoolConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialRewardRate\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemovedStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnusedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend, params StakingPoolConstructorParams) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend, params)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// CanAlert is a free data retrieval call binding the contract method 0xc1852f58.
//
// Solidity: function canAlert(address alerter) view returns(bool)
func (_Staking *StakingCaller) CanAlert(opts *bind.CallOpts, alerter common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "canAlert", alerter)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanAlert is a free data retrieval call binding the contract method 0xc1852f58.
//
// Solidity: function canAlert(address alerter) view returns(bool)
func (_Staking *StakingSession) CanAlert(alerter common.Address) (bool, error) {
	return _Staking.Contract.CanAlert(&_Staking.CallOpts, alerter)
}

// CanAlert is a free data retrieval call binding the contract method 0xc1852f58.
//
// Solidity: function canAlert(address alerter) view returns(bool)
func (_Staking *StakingCallerSession) CanAlert(alerter common.Address) (bool, error) {
	return _Staking.Contract.CanAlert(&_Staking.CallOpts, alerter)
}

// GetAvailableReward is a free data retrieval call binding the contract method 0xe0974ea5.
//
// Solidity: function getAvailableReward() view returns(uint256)
func (_Staking *StakingCaller) GetAvailableReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getAvailableReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAvailableReward is a free data retrieval call binding the contract method 0xe0974ea5.
//
// Solidity: function getAvailableReward() view returns(uint256)
func (_Staking *StakingSession) GetAvailableReward() (*big.Int, error) {
	return _Staking.Contract.GetAvailableReward(&_Staking.CallOpts)
}

// GetAvailableReward is a free data retrieval call binding the contract method 0xe0974ea5.
//
// Solidity: function getAvailableReward() view returns(uint256)
func (_Staking *StakingCallerSession) GetAvailableReward() (*big.Int, error) {
	return _Staking.Contract.GetAvailableReward(&_Staking.CallOpts)
}

// GetBaseReward is a free data retrieval call binding the contract method 0x9a109bc2.
//
// Solidity: function getBaseReward(address staker) view returns(uint256)
func (_Staking *StakingCaller) GetBaseReward(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getBaseReward", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBaseReward is a free data retrieval call binding the contract method 0x9a109bc2.
//
// Solidity: function getBaseReward(address staker) view returns(uint256)
func (_Staking *StakingSession) GetBaseReward(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetBaseReward(&_Staking.CallOpts, staker)
}

// GetBaseReward is a free data retrieval call binding the contract method 0x9a109bc2.
//
// Solidity: function getBaseReward(address staker) view returns(uint256)
func (_Staking *StakingCallerSession) GetBaseReward(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetBaseReward(&_Staking.CallOpts, staker)
}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_Staking *StakingCaller) GetChainlinkToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getChainlinkToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_Staking *StakingSession) GetChainlinkToken() (common.Address, error) {
	return _Staking.Contract.GetChainlinkToken(&_Staking.CallOpts)
}

// GetChainlinkToken is a free data retrieval call binding the contract method 0x165d35e1.
//
// Solidity: function getChainlinkToken() view returns(address)
func (_Staking *StakingCallerSession) GetChainlinkToken() (common.Address, error) {
	return _Staking.Contract.GetChainlinkToken(&_Staking.CallOpts)
}

// GetCommunityStakerLimits is a free data retrieval call binding the contract method 0x0641bdd8.
//
// Solidity: function getCommunityStakerLimits() view returns(uint256, uint256)
func (_Staking *StakingCaller) GetCommunityStakerLimits(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getCommunityStakerLimits")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetCommunityStakerLimits is a free data retrieval call binding the contract method 0x0641bdd8.
//
// Solidity: function getCommunityStakerLimits() view returns(uint256, uint256)
func (_Staking *StakingSession) GetCommunityStakerLimits() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetCommunityStakerLimits(&_Staking.CallOpts)
}

// GetCommunityStakerLimits is a free data retrieval call binding the contract method 0x0641bdd8.
//
// Solidity: function getCommunityStakerLimits() view returns(uint256, uint256)
func (_Staking *StakingCallerSession) GetCommunityStakerLimits() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetCommunityStakerLimits(&_Staking.CallOpts)
}

// GetDelegatesCount is a free data retrieval call binding the contract method 0x32e28850.
//
// Solidity: function getDelegatesCount() view returns(uint256)
func (_Staking *StakingCaller) GetDelegatesCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDelegatesCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelegatesCount is a free data retrieval call binding the contract method 0x32e28850.
//
// Solidity: function getDelegatesCount() view returns(uint256)
func (_Staking *StakingSession) GetDelegatesCount() (*big.Int, error) {
	return _Staking.Contract.GetDelegatesCount(&_Staking.CallOpts)
}

// GetDelegatesCount is a free data retrieval call binding the contract method 0x32e28850.
//
// Solidity: function getDelegatesCount() view returns(uint256)
func (_Staking *StakingCallerSession) GetDelegatesCount() (*big.Int, error) {
	return _Staking.Contract.GetDelegatesCount(&_Staking.CallOpts)
}

// GetDelegationRateDenominator is a free data retrieval call binding the contract method 0x5e8b40d7.
//
// Solidity: function getDelegationRateDenominator() view returns(uint256)
func (_Staking *StakingCaller) GetDelegationRateDenominator(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDelegationRateDenominator")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelegationRateDenominator is a free data retrieval call binding the contract method 0x5e8b40d7.
//
// Solidity: function getDelegationRateDenominator() view returns(uint256)
func (_Staking *StakingSession) GetDelegationRateDenominator() (*big.Int, error) {
	return _Staking.Contract.GetDelegationRateDenominator(&_Staking.CallOpts)
}

// GetDelegationRateDenominator is a free data retrieval call binding the contract method 0x5e8b40d7.
//
// Solidity: function getDelegationRateDenominator() view returns(uint256)
func (_Staking *StakingCallerSession) GetDelegationRateDenominator() (*big.Int, error) {
	return _Staking.Contract.GetDelegationRateDenominator(&_Staking.CallOpts)
}

// GetDelegationReward is a free data retrieval call binding the contract method 0x87e900b1.
//
// Solidity: function getDelegationReward(address staker) view returns(uint256)
func (_Staking *StakingCaller) GetDelegationReward(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDelegationReward", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelegationReward is a free data retrieval call binding the contract method 0x87e900b1.
//
// Solidity: function getDelegationReward(address staker) view returns(uint256)
func (_Staking *StakingSession) GetDelegationReward(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDelegationReward(&_Staking.CallOpts, staker)
}

// GetDelegationReward is a free data retrieval call binding the contract method 0x87e900b1.
//
// Solidity: function getDelegationReward(address staker) view returns(uint256)
func (_Staking *StakingCallerSession) GetDelegationReward(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDelegationReward(&_Staking.CallOpts, staker)
}

// GetEarnedBaseRewards is a free data retrieval call binding the contract method 0x1a9d4c7c.
//
// Solidity: function getEarnedBaseRewards() view returns(uint256)
func (_Staking *StakingCaller) GetEarnedBaseRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getEarnedBaseRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEarnedBaseRewards is a free data retrieval call binding the contract method 0x1a9d4c7c.
//
// Solidity: function getEarnedBaseRewards() view returns(uint256)
func (_Staking *StakingSession) GetEarnedBaseRewards() (*big.Int, error) {
	return _Staking.Contract.GetEarnedBaseRewards(&_Staking.CallOpts)
}

// GetEarnedBaseRewards is a free data retrieval call binding the contract method 0x1a9d4c7c.
//
// Solidity: function getEarnedBaseRewards() view returns(uint256)
func (_Staking *StakingCallerSession) GetEarnedBaseRewards() (*big.Int, error) {
	return _Staking.Contract.GetEarnedBaseRewards(&_Staking.CallOpts)
}

// GetEarnedDelegationRewards is a free data retrieval call binding the contract method 0x74104002.
//
// Solidity: function getEarnedDelegationRewards() view returns(uint256)
func (_Staking *StakingCaller) GetEarnedDelegationRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getEarnedDelegationRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEarnedDelegationRewards is a free data retrieval call binding the contract method 0x74104002.
//
// Solidity: function getEarnedDelegationRewards() view returns(uint256)
func (_Staking *StakingSession) GetEarnedDelegationRewards() (*big.Int, error) {
	return _Staking.Contract.GetEarnedDelegationRewards(&_Staking.CallOpts)
}

// GetEarnedDelegationRewards is a free data retrieval call binding the contract method 0x74104002.
//
// Solidity: function getEarnedDelegationRewards() view returns(uint256)
func (_Staking *StakingCallerSession) GetEarnedDelegationRewards() (*big.Int, error) {
	return _Staking.Contract.GetEarnedDelegationRewards(&_Staking.CallOpts)
}

// GetFeedOperators is a free data retrieval call binding the contract method 0x5fec60f8.
//
// Solidity: function getFeedOperators() view returns(address[])
func (_Staking *StakingCaller) GetFeedOperators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getFeedOperators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetFeedOperators is a free data retrieval call binding the contract method 0x5fec60f8.
//
// Solidity: function getFeedOperators() view returns(address[])
func (_Staking *StakingSession) GetFeedOperators() ([]common.Address, error) {
	return _Staking.Contract.GetFeedOperators(&_Staking.CallOpts)
}

// GetFeedOperators is a free data retrieval call binding the contract method 0x5fec60f8.
//
// Solidity: function getFeedOperators() view returns(address[])
func (_Staking *StakingCallerSession) GetFeedOperators() ([]common.Address, error) {
	return _Staking.Contract.GetFeedOperators(&_Staking.CallOpts)
}

// GetMaxPoolSize is a free data retrieval call binding the contract method 0x0fbc8f5b.
//
// Solidity: function getMaxPoolSize() view returns(uint256)
func (_Staking *StakingCaller) GetMaxPoolSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getMaxPoolSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxPoolSize is a free data retrieval call binding the contract method 0x0fbc8f5b.
//
// Solidity: function getMaxPoolSize() view returns(uint256)
func (_Staking *StakingSession) GetMaxPoolSize() (*big.Int, error) {
	return _Staking.Contract.GetMaxPoolSize(&_Staking.CallOpts)
}

// GetMaxPoolSize is a free data retrieval call binding the contract method 0x0fbc8f5b.
//
// Solidity: function getMaxPoolSize() view returns(uint256)
func (_Staking *StakingCallerSession) GetMaxPoolSize() (*big.Int, error) {
	return _Staking.Contract.GetMaxPoolSize(&_Staking.CallOpts)
}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x49590657.
//
// Solidity: function getMerkleRoot() view returns(bytes32)
func (_Staking *StakingCaller) GetMerkleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getMerkleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x49590657.
//
// Solidity: function getMerkleRoot() view returns(bytes32)
func (_Staking *StakingSession) GetMerkleRoot() ([32]byte, error) {
	return _Staking.Contract.GetMerkleRoot(&_Staking.CallOpts)
}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x49590657.
//
// Solidity: function getMerkleRoot() view returns(bytes32)
func (_Staking *StakingCallerSession) GetMerkleRoot() ([32]byte, error) {
	return _Staking.Contract.GetMerkleRoot(&_Staking.CallOpts)
}

// GetMigrationTarget is a free data retrieval call binding the contract method 0x1ddb5552.
//
// Solidity: function getMigrationTarget() view returns(address)
func (_Staking *StakingCaller) GetMigrationTarget(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getMigrationTarget")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMigrationTarget is a free data retrieval call binding the contract method 0x1ddb5552.
//
// Solidity: function getMigrationTarget() view returns(address)
func (_Staking *StakingSession) GetMigrationTarget() (common.Address, error) {
	return _Staking.Contract.GetMigrationTarget(&_Staking.CallOpts)
}

// GetMigrationTarget is a free data retrieval call binding the contract method 0x1ddb5552.
//
// Solidity: function getMigrationTarget() view returns(address)
func (_Staking *StakingCallerSession) GetMigrationTarget() (common.Address, error) {
	return _Staking.Contract.GetMigrationTarget(&_Staking.CallOpts)
}

// GetMonitoredFeed is a free data retrieval call binding the contract method 0x83db28a0.
//
// Solidity: function getMonitoredFeed() view returns(address)
func (_Staking *StakingCaller) GetMonitoredFeed(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getMonitoredFeed")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMonitoredFeed is a free data retrieval call binding the contract method 0x83db28a0.
//
// Solidity: function getMonitoredFeed() view returns(address)
func (_Staking *StakingSession) GetMonitoredFeed() (common.Address, error) {
	return _Staking.Contract.GetMonitoredFeed(&_Staking.CallOpts)
}

// GetMonitoredFeed is a free data retrieval call binding the contract method 0x83db28a0.
//
// Solidity: function getMonitoredFeed() view returns(address)
func (_Staking *StakingCallerSession) GetMonitoredFeed() (common.Address, error) {
	return _Staking.Contract.GetMonitoredFeed(&_Staking.CallOpts)
}

// GetOperatorLimits is a free data retrieval call binding the contract method 0x8856398f.
//
// Solidity: function getOperatorLimits() view returns(uint256, uint256)
func (_Staking *StakingCaller) GetOperatorLimits(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getOperatorLimits")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetOperatorLimits is a free data retrieval call binding the contract method 0x8856398f.
//
// Solidity: function getOperatorLimits() view returns(uint256, uint256)
func (_Staking *StakingSession) GetOperatorLimits() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetOperatorLimits(&_Staking.CallOpts)
}

// GetOperatorLimits is a free data retrieval call binding the contract method 0x8856398f.
//
// Solidity: function getOperatorLimits() view returns(uint256, uint256)
func (_Staking *StakingCallerSession) GetOperatorLimits() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetOperatorLimits(&_Staking.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256)
func (_Staking *StakingCaller) GetRewardRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getRewardRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256)
func (_Staking *StakingSession) GetRewardRate() (*big.Int, error) {
	return _Staking.Contract.GetRewardRate(&_Staking.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256)
func (_Staking *StakingCallerSession) GetRewardRate() (*big.Int, error) {
	return _Staking.Contract.GetRewardRate(&_Staking.CallOpts)
}

// GetRewardTimestamps is a free data retrieval call binding the contract method 0x59f01879.
//
// Solidity: function getRewardTimestamps() view returns(uint256, uint256)
func (_Staking *StakingCaller) GetRewardTimestamps(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getRewardTimestamps")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetRewardTimestamps is a free data retrieval call binding the contract method 0x59f01879.
//
// Solidity: function getRewardTimestamps() view returns(uint256, uint256)
func (_Staking *StakingSession) GetRewardTimestamps() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetRewardTimestamps(&_Staking.CallOpts)
}

// GetRewardTimestamps is a free data retrieval call binding the contract method 0x59f01879.
//
// Solidity: function getRewardTimestamps() view returns(uint256, uint256)
func (_Staking *StakingCallerSession) GetRewardTimestamps() (*big.Int, *big.Int, error) {
	return _Staking.Contract.GetRewardTimestamps(&_Staking.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address staker) view returns(uint256)
func (_Staking *StakingCaller) GetStake(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getStake", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address staker) view returns(uint256)
func (_Staking *StakingSession) GetStake(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetStake(&_Staking.CallOpts, staker)
}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address staker) view returns(uint256)
func (_Staking *StakingCallerSession) GetStake(staker common.Address) (*big.Int, error) {
	return _Staking.Contract.GetStake(&_Staking.CallOpts, staker)
}

// GetTotalCommunityStakedAmount is a free data retrieval call binding the contract method 0x049b2ca0.
//
// Solidity: function getTotalCommunityStakedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetTotalCommunityStakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getTotalCommunityStakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalCommunityStakedAmount is a free data retrieval call binding the contract method 0x049b2ca0.
//
// Solidity: function getTotalCommunityStakedAmount() view returns(uint256)
func (_Staking *StakingSession) GetTotalCommunityStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalCommunityStakedAmount(&_Staking.CallOpts)
}

// GetTotalCommunityStakedAmount is a free data retrieval call binding the contract method 0x049b2ca0.
//
// Solidity: function getTotalCommunityStakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetTotalCommunityStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalCommunityStakedAmount(&_Staking.CallOpts)
}

// GetTotalDelegatedAmount is a free data retrieval call binding the contract method 0xa7a2f5aa.
//
// Solidity: function getTotalDelegatedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetTotalDelegatedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getTotalDelegatedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDelegatedAmount is a free data retrieval call binding the contract method 0xa7a2f5aa.
//
// Solidity: function getTotalDelegatedAmount() view returns(uint256)
func (_Staking *StakingSession) GetTotalDelegatedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalDelegatedAmount(&_Staking.CallOpts)
}

// GetTotalDelegatedAmount is a free data retrieval call binding the contract method 0xa7a2f5aa.
//
// Solidity: function getTotalDelegatedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetTotalDelegatedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalDelegatedAmount(&_Staking.CallOpts)
}

// GetTotalRemovedAmount is a free data retrieval call binding the contract method 0x8019e7d0.
//
// Solidity: function getTotalRemovedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetTotalRemovedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getTotalRemovedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalRemovedAmount is a free data retrieval call binding the contract method 0x8019e7d0.
//
// Solidity: function getTotalRemovedAmount() view returns(uint256)
func (_Staking *StakingSession) GetTotalRemovedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalRemovedAmount(&_Staking.CallOpts)
}

// GetTotalRemovedAmount is a free data retrieval call binding the contract method 0x8019e7d0.
//
// Solidity: function getTotalRemovedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetTotalRemovedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalRemovedAmount(&_Staking.CallOpts)
}

// GetTotalStakedAmount is a free data retrieval call binding the contract method 0x38adb6f0.
//
// Solidity: function getTotalStakedAmount() view returns(uint256)
func (_Staking *StakingCaller) GetTotalStakedAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getTotalStakedAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakedAmount is a free data retrieval call binding the contract method 0x38adb6f0.
//
// Solidity: function getTotalStakedAmount() view returns(uint256)
func (_Staking *StakingSession) GetTotalStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalStakedAmount(&_Staking.CallOpts)
}

// GetTotalStakedAmount is a free data retrieval call binding the contract method 0x38adb6f0.
//
// Solidity: function getTotalStakedAmount() view returns(uint256)
func (_Staking *StakingCallerSession) GetTotalStakedAmount() (*big.Int, error) {
	return _Staking.Contract.GetTotalStakedAmount(&_Staking.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x9d0a3864.
//
// Solidity: function hasAccess(address staker, bytes32[] proof) view returns(bool)
func (_Staking *StakingCaller) HasAccess(opts *bind.CallOpts, staker common.Address, proof [][32]byte) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "hasAccess", staker, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x9d0a3864.
//
// Solidity: function hasAccess(address staker, bytes32[] proof) view returns(bool)
func (_Staking *StakingSession) HasAccess(staker common.Address, proof [][32]byte) (bool, error) {
	return _Staking.Contract.HasAccess(&_Staking.CallOpts, staker, proof)
}

// HasAccess is a free data retrieval call binding the contract method 0x9d0a3864.
//
// Solidity: function hasAccess(address staker, bytes32[] proof) view returns(bool)
func (_Staking *StakingCallerSession) HasAccess(staker common.Address, proof [][32]byte) (bool, error) {
	return _Staking.Contract.HasAccess(&_Staking.CallOpts, staker, proof)
}

// IsActive is a free data retrieval call binding the contract method 0x22f3e2d4.
//
// Solidity: function isActive() view returns(bool)
func (_Staking *StakingCaller) IsActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "isActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActive is a free data retrieval call binding the contract method 0x22f3e2d4.
//
// Solidity: function isActive() view returns(bool)
func (_Staking *StakingSession) IsActive() (bool, error) {
	return _Staking.Contract.IsActive(&_Staking.CallOpts)
}

// IsActive is a free data retrieval call binding the contract method 0x22f3e2d4.
//
// Solidity: function isActive() view returns(bool)
func (_Staking *StakingCallerSession) IsActive() (bool, error) {
	return _Staking.Contract.IsActive(&_Staking.CallOpts)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address staker) view returns(bool)
func (_Staking *StakingCaller) IsOperator(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "isOperator", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address staker) view returns(bool)
func (_Staking *StakingSession) IsOperator(staker common.Address) (bool, error) {
	return _Staking.Contract.IsOperator(&_Staking.CallOpts, staker)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address staker) view returns(bool)
func (_Staking *StakingCallerSession) IsOperator(staker common.Address) (bool, error) {
	return _Staking.Contract.IsOperator(&_Staking.CallOpts, staker)
}

// IsPaused is a free data retrieval call binding the contract method 0xb187bd26.
//
// Solidity: function isPaused() view returns(bool)
func (_Staking *StakingCaller) IsPaused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "isPaused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPaused is a free data retrieval call binding the contract method 0xb187bd26.
//
// Solidity: function isPaused() view returns(bool)
func (_Staking *StakingSession) IsPaused() (bool, error) {
	return _Staking.Contract.IsPaused(&_Staking.CallOpts)
}

// IsPaused is a free data retrieval call binding the contract method 0xb187bd26.
//
// Solidity: function isPaused() view returns(bool)
func (_Staking *StakingCallerSession) IsPaused() (bool, error) {
	return _Staking.Contract.IsPaused(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Staking *StakingCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Staking *StakingSession) Paused() (bool, error) {
	return _Staking.Contract.Paused(&_Staking.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Staking *StakingCallerSession) Paused() (bool, error) {
	return _Staking.Contract.Paused(&_Staking.CallOpts)
}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_Staking *StakingCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_Staking *StakingSession) TypeAndVersion() (string, error) {
	return _Staking.Contract.TypeAndVersion(&_Staking.CallOpts)
}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_Staking *StakingCallerSession) TypeAndVersion() (string, error) {
	return _Staking.Contract.TypeAndVersion(&_Staking.CallOpts)
}

// AcceptMigrationTarget is a paid mutator transaction binding the contract method 0xe937fdaa.
//
// Solidity: function acceptMigrationTarget() returns()
func (_Staking *StakingTransactor) AcceptMigrationTarget(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "acceptMigrationTarget")
}

// AcceptMigrationTarget is a paid mutator transaction binding the contract method 0xe937fdaa.
//
// Solidity: function acceptMigrationTarget() returns()
func (_Staking *StakingSession) AcceptMigrationTarget() (*types.Transaction, error) {
	return _Staking.Contract.AcceptMigrationTarget(&_Staking.TransactOpts)
}

// AcceptMigrationTarget is a paid mutator transaction binding the contract method 0xe937fdaa.
//
// Solidity: function acceptMigrationTarget() returns()
func (_Staking *StakingTransactorSession) AcceptMigrationTarget() (*types.Transaction, error) {
	return _Staking.Contract.AcceptMigrationTarget(&_Staking.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Staking *StakingTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Staking *StakingSession) AcceptOwnership() (*types.Transaction, error) {
	return _Staking.Contract.AcceptOwnership(&_Staking.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Staking *StakingTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Staking.Contract.AcceptOwnership(&_Staking.TransactOpts)
}

// AddOperators is a paid mutator transaction binding the contract method 0xa07aea1c.
//
// Solidity: function addOperators(address[] operators) returns()
func (_Staking *StakingTransactor) AddOperators(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "addOperators", operators)
}

// AddOperators is a paid mutator transaction binding the contract method 0xa07aea1c.
//
// Solidity: function addOperators(address[] operators) returns()
func (_Staking *StakingSession) AddOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.AddOperators(&_Staking.TransactOpts, operators)
}

// AddOperators is a paid mutator transaction binding the contract method 0xa07aea1c.
//
// Solidity: function addOperators(address[] operators) returns()
func (_Staking *StakingTransactorSession) AddOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.AddOperators(&_Staking.TransactOpts, operators)
}

// AddReward is a paid mutator transaction binding the contract method 0x74de4ec4.
//
// Solidity: function addReward(uint256 amount) returns()
func (_Staking *StakingTransactor) AddReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "addReward", amount)
}

// AddReward is a paid mutator transaction binding the contract method 0x74de4ec4.
//
// Solidity: function addReward(uint256 amount) returns()
func (_Staking *StakingSession) AddReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddReward(&_Staking.TransactOpts, amount)
}

// AddReward is a paid mutator transaction binding the contract method 0x74de4ec4.
//
// Solidity: function addReward(uint256 amount) returns()
func (_Staking *StakingTransactorSession) AddReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddReward(&_Staking.TransactOpts, amount)
}

// ChangeRewardRate is a paid mutator transaction binding the contract method 0x74f237c4.
//
// Solidity: function changeRewardRate(uint256 newRate) returns()
func (_Staking *StakingTransactor) ChangeRewardRate(opts *bind.TransactOpts, newRate *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "changeRewardRate", newRate)
}

// ChangeRewardRate is a paid mutator transaction binding the contract method 0x74f237c4.
//
// Solidity: function changeRewardRate(uint256 newRate) returns()
func (_Staking *StakingSession) ChangeRewardRate(newRate *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.ChangeRewardRate(&_Staking.TransactOpts, newRate)
}

// ChangeRewardRate is a paid mutator transaction binding the contract method 0x74f237c4.
//
// Solidity: function changeRewardRate(uint256 newRate) returns()
func (_Staking *StakingTransactorSession) ChangeRewardRate(newRate *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.ChangeRewardRate(&_Staking.TransactOpts, newRate)
}

// Conclude is a paid mutator transaction binding the contract method 0xe5f92973.
//
// Solidity: function conclude() returns()
func (_Staking *StakingTransactor) Conclude(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "conclude")
}

// Conclude is a paid mutator transaction binding the contract method 0xe5f92973.
//
// Solidity: function conclude() returns()
func (_Staking *StakingSession) Conclude() (*types.Transaction, error) {
	return _Staking.Contract.Conclude(&_Staking.TransactOpts)
}

// Conclude is a paid mutator transaction binding the contract method 0xe5f92973.
//
// Solidity: function conclude() returns()
func (_Staking *StakingTransactorSession) Conclude() (*types.Transaction, error) {
	return _Staking.Contract.Conclude(&_Staking.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Staking *StakingTransactor) EmergencyPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "emergencyPause")
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Staking *StakingSession) EmergencyPause() (*types.Transaction, error) {
	return _Staking.Contract.EmergencyPause(&_Staking.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Staking *StakingTransactorSession) EmergencyPause() (*types.Transaction, error) {
	return _Staking.Contract.EmergencyPause(&_Staking.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Staking *StakingTransactor) EmergencyUnpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "emergencyUnpause")
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Staking *StakingSession) EmergencyUnpause() (*types.Transaction, error) {
	return _Staking.Contract.EmergencyUnpause(&_Staking.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Staking *StakingTransactorSession) EmergencyUnpause() (*types.Transaction, error) {
	return _Staking.Contract.EmergencyUnpause(&_Staking.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8932a90d.
//
// Solidity: function migrate(bytes data) returns()
func (_Staking *StakingTransactor) Migrate(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "migrate", data)
}

// Migrate is a paid mutator transaction binding the contract method 0x8932a90d.
//
// Solidity: function migrate(bytes data) returns()
func (_Staking *StakingSession) Migrate(data []byte) (*types.Transaction, error) {
	return _Staking.Contract.Migrate(&_Staking.TransactOpts, data)
}

// Migrate is a paid mutator transaction binding the contract method 0x8932a90d.
//
// Solidity: function migrate(bytes data) returns()
func (_Staking *StakingTransactorSession) Migrate(data []byte) (*types.Transaction, error) {
	return _Staking.Contract.Migrate(&_Staking.TransactOpts, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_Staking *StakingTransactor) OnTokenTransfer(opts *bind.TransactOpts, sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "onTokenTransfer", sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_Staking *StakingSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Staking.Contract.OnTokenTransfer(&_Staking.TransactOpts, sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_Staking *StakingTransactorSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Staking.Contract.OnTokenTransfer(&_Staking.TransactOpts, sender, amount, data)
}

// ProposeMigrationTarget is a paid mutator transaction binding the contract method 0x63b2c85a.
//
// Solidity: function proposeMigrationTarget(address migrationTarget) returns()
func (_Staking *StakingTransactor) ProposeMigrationTarget(opts *bind.TransactOpts, migrationTarget common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "proposeMigrationTarget", migrationTarget)
}

// ProposeMigrationTarget is a paid mutator transaction binding the contract method 0x63b2c85a.
//
// Solidity: function proposeMigrationTarget(address migrationTarget) returns()
func (_Staking *StakingSession) ProposeMigrationTarget(migrationTarget common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ProposeMigrationTarget(&_Staking.TransactOpts, migrationTarget)
}

// ProposeMigrationTarget is a paid mutator transaction binding the contract method 0x63b2c85a.
//
// Solidity: function proposeMigrationTarget(address migrationTarget) returns()
func (_Staking *StakingTransactorSession) ProposeMigrationTarget(migrationTarget common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ProposeMigrationTarget(&_Staking.TransactOpts, migrationTarget)
}

// RaiseAlert is a paid mutator transaction binding the contract method 0xda9c732f.
//
// Solidity: function raiseAlert() returns()
func (_Staking *StakingTransactor) RaiseAlert(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "raiseAlert")
}

// RaiseAlert is a paid mutator transaction binding the contract method 0xda9c732f.
//
// Solidity: function raiseAlert() returns()
func (_Staking *StakingSession) RaiseAlert() (*types.Transaction, error) {
	return _Staking.Contract.RaiseAlert(&_Staking.TransactOpts)
}

// RaiseAlert is a paid mutator transaction binding the contract method 0xda9c732f.
//
// Solidity: function raiseAlert() returns()
func (_Staking *StakingTransactorSession) RaiseAlert() (*types.Transaction, error) {
	return _Staking.Contract.RaiseAlert(&_Staking.TransactOpts)
}

// RemoveOperators is a paid mutator transaction binding the contract method 0xd365a377.
//
// Solidity: function removeOperators(address[] operators) returns()
func (_Staking *StakingTransactor) RemoveOperators(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "removeOperators", operators)
}

// RemoveOperators is a paid mutator transaction binding the contract method 0xd365a377.
//
// Solidity: function removeOperators(address[] operators) returns()
func (_Staking *StakingSession) RemoveOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RemoveOperators(&_Staking.TransactOpts, operators)
}

// RemoveOperators is a paid mutator transaction binding the contract method 0xd365a377.
//
// Solidity: function removeOperators(address[] operators) returns()
func (_Staking *StakingTransactorSession) RemoveOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RemoveOperators(&_Staking.TransactOpts, operators)
}

// SetFeedOperators is a paid mutator transaction binding the contract method 0xbfbd9b1b.
//
// Solidity: function setFeedOperators(address[] operators) returns()
func (_Staking *StakingTransactor) SetFeedOperators(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setFeedOperators", operators)
}

// SetFeedOperators is a paid mutator transaction binding the contract method 0xbfbd9b1b.
//
// Solidity: function setFeedOperators(address[] operators) returns()
func (_Staking *StakingSession) SetFeedOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetFeedOperators(&_Staking.TransactOpts, operators)
}

// SetFeedOperators is a paid mutator transaction binding the contract method 0xbfbd9b1b.
//
// Solidity: function setFeedOperators(address[] operators) returns()
func (_Staking *StakingTransactorSession) SetFeedOperators(operators []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetFeedOperators(&_Staking.TransactOpts, operators)
}

// SetMerkleRoot is a paid mutator transaction binding the contract method 0x7cb64759.
//
// Solidity: function setMerkleRoot(bytes32 newMerkleRoot) returns()
func (_Staking *StakingTransactor) SetMerkleRoot(opts *bind.TransactOpts, newMerkleRoot [32]byte) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMerkleRoot", newMerkleRoot)
}

// SetMerkleRoot is a paid mutator transaction binding the contract method 0x7cb64759.
//
// Solidity: function setMerkleRoot(bytes32 newMerkleRoot) returns()
func (_Staking *StakingSession) SetMerkleRoot(newMerkleRoot [32]byte) (*types.Transaction, error) {
	return _Staking.Contract.SetMerkleRoot(&_Staking.TransactOpts, newMerkleRoot)
}

// SetMerkleRoot is a paid mutator transaction binding the contract method 0x7cb64759.
//
// Solidity: function setMerkleRoot(bytes32 newMerkleRoot) returns()
func (_Staking *StakingTransactorSession) SetMerkleRoot(newMerkleRoot [32]byte) (*types.Transaction, error) {
	return _Staking.Contract.SetMerkleRoot(&_Staking.TransactOpts, newMerkleRoot)
}

// SetPoolConfig is a paid mutator transaction binding the contract method 0x8a44f337.
//
// Solidity: function setPoolConfig(uint256 maxPoolSize, uint256 maxCommunityStakeAmount, uint256 maxOperatorStakeAmount) returns()
func (_Staking *StakingTransactor) SetPoolConfig(opts *bind.TransactOpts, maxPoolSize *big.Int, maxCommunityStakeAmount *big.Int, maxOperatorStakeAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setPoolConfig", maxPoolSize, maxCommunityStakeAmount, maxOperatorStakeAmount)
}

// SetPoolConfig is a paid mutator transaction binding the contract method 0x8a44f337.
//
// Solidity: function setPoolConfig(uint256 maxPoolSize, uint256 maxCommunityStakeAmount, uint256 maxOperatorStakeAmount) returns()
func (_Staking *StakingSession) SetPoolConfig(maxPoolSize *big.Int, maxCommunityStakeAmount *big.Int, maxOperatorStakeAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetPoolConfig(&_Staking.TransactOpts, maxPoolSize, maxCommunityStakeAmount, maxOperatorStakeAmount)
}

// SetPoolConfig is a paid mutator transaction binding the contract method 0x8a44f337.
//
// Solidity: function setPoolConfig(uint256 maxPoolSize, uint256 maxCommunityStakeAmount, uint256 maxOperatorStakeAmount) returns()
func (_Staking *StakingTransactorSession) SetPoolConfig(maxPoolSize *big.Int, maxCommunityStakeAmount *big.Int, maxOperatorStakeAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetPoolConfig(&_Staking.TransactOpts, maxPoolSize, maxCommunityStakeAmount, maxOperatorStakeAmount)
}

// Start is a paid mutator transaction binding the contract method 0x8fb4b573.
//
// Solidity: function start(uint256 amount, uint256 initialRewardRate) returns()
func (_Staking *StakingTransactor) Start(opts *bind.TransactOpts, amount *big.Int, initialRewardRate *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "start", amount, initialRewardRate)
}

// Start is a paid mutator transaction binding the contract method 0x8fb4b573.
//
// Solidity: function start(uint256 amount, uint256 initialRewardRate) returns()
func (_Staking *StakingSession) Start(amount *big.Int, initialRewardRate *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Start(&_Staking.TransactOpts, amount, initialRewardRate)
}

// Start is a paid mutator transaction binding the contract method 0x8fb4b573.
//
// Solidity: function start(uint256 amount, uint256 initialRewardRate) returns()
func (_Staking *StakingTransactorSession) Start(amount *big.Int, initialRewardRate *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Start(&_Staking.TransactOpts, amount, initialRewardRate)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address to) returns()
func (_Staking *StakingTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "transferOwnership", to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address to) returns()
func (_Staking *StakingSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address to) returns()
func (_Staking *StakingTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, to)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactor) Unstake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unstake")
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// Unstake is a paid mutator transaction binding the contract method 0x2def6620.
//
// Solidity: function unstake() returns()
func (_Staking *StakingTransactorSession) Unstake() (*types.Transaction, error) {
	return _Staking.Contract.Unstake(&_Staking.TransactOpts)
}

// WithdrawRemovedStake is a paid mutator transaction binding the contract method 0x5aa6e013.
//
// Solidity: function withdrawRemovedStake() returns()
func (_Staking *StakingTransactor) WithdrawRemovedStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawRemovedStake")
}

// WithdrawRemovedStake is a paid mutator transaction binding the contract method 0x5aa6e013.
//
// Solidity: function withdrawRemovedStake() returns()
func (_Staking *StakingSession) WithdrawRemovedStake() (*types.Transaction, error) {
	return _Staking.Contract.WithdrawRemovedStake(&_Staking.TransactOpts)
}

// WithdrawRemovedStake is a paid mutator transaction binding the contract method 0x5aa6e013.
//
// Solidity: function withdrawRemovedStake() returns()
func (_Staking *StakingTransactorSession) WithdrawRemovedStake() (*types.Transaction, error) {
	return _Staking.Contract.WithdrawRemovedStake(&_Staking.TransactOpts)
}

// WithdrawUnusedReward is a paid mutator transaction binding the contract method 0xebdb56f3.
//
// Solidity: function withdrawUnusedReward() returns()
func (_Staking *StakingTransactor) WithdrawUnusedReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawUnusedReward")
}

// WithdrawUnusedReward is a paid mutator transaction binding the contract method 0xebdb56f3.
//
// Solidity: function withdrawUnusedReward() returns()
func (_Staking *StakingSession) WithdrawUnusedReward() (*types.Transaction, error) {
	return _Staking.Contract.WithdrawUnusedReward(&_Staking.TransactOpts)
}

// WithdrawUnusedReward is a paid mutator transaction binding the contract method 0xebdb56f3.
//
// Solidity: function withdrawUnusedReward() returns()
func (_Staking *StakingTransactorSession) WithdrawUnusedReward() (*types.Transaction, error) {
	return _Staking.Contract.WithdrawUnusedReward(&_Staking.TransactOpts)
}

// StakingAlertRaisedIterator is returned from FilterAlertRaised and is used to iterate over the raw logs and unpacked data for AlertRaised events raised by the Staking contract.
type StakingAlertRaisedIterator struct {
	Event *StakingAlertRaised // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingAlertRaisedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingAlertRaised)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingAlertRaised)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingAlertRaisedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingAlertRaisedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingAlertRaised represents a AlertRaised event raised by the Staking contract.
type StakingAlertRaised struct {
	Alerter      common.Address
	RoundId      *big.Int
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAlertRaised is a free log retrieval operation binding the contract event 0xd2720e8f454493f612cc97499fe8cbce7fa4d4c18d346fe7104e9042df1c1edd.
//
// Solidity: event AlertRaised(address alerter, uint256 roundId, uint256 rewardAmount)
func (_Staking *StakingFilterer) FilterAlertRaised(opts *bind.FilterOpts) (*StakingAlertRaisedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "AlertRaised")
	if err != nil {
		return nil, err
	}
	return &StakingAlertRaisedIterator{contract: _Staking.contract, event: "AlertRaised", logs: logs, sub: sub}, nil
}

// WatchAlertRaised is a free log subscription operation binding the contract event 0xd2720e8f454493f612cc97499fe8cbce7fa4d4c18d346fe7104e9042df1c1edd.
//
// Solidity: event AlertRaised(address alerter, uint256 roundId, uint256 rewardAmount)
func (_Staking *StakingFilterer) WatchAlertRaised(opts *bind.WatchOpts, sink chan<- *StakingAlertRaised) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "AlertRaised")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingAlertRaised)
				if err := _Staking.contract.UnpackLog(event, "AlertRaised", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertRaised is a log parse operation binding the contract event 0xd2720e8f454493f612cc97499fe8cbce7fa4d4c18d346fe7104e9042df1c1edd.
//
// Solidity: event AlertRaised(address alerter, uint256 roundId, uint256 rewardAmount)
func (_Staking *StakingFilterer) ParseAlertRaised(log types.Log) (*StakingAlertRaised, error) {
	event := new(StakingAlertRaised)
	if err := _Staking.contract.UnpackLog(event, "AlertRaised", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMerkleRootChangedIterator is returned from FilterMerkleRootChanged and is used to iterate over the raw logs and unpacked data for MerkleRootChanged events raised by the Staking contract.
type StakingMerkleRootChangedIterator struct {
	Event *StakingMerkleRootChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingMerkleRootChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingMerkleRootChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingMerkleRootChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingMerkleRootChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingMerkleRootChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingMerkleRootChanged represents a MerkleRootChanged event raised by the Staking contract.
type StakingMerkleRootChanged struct {
	NewMerkleRoot [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMerkleRootChanged is a free log retrieval operation binding the contract event 0x1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c.
//
// Solidity: event MerkleRootChanged(bytes32 newMerkleRoot)
func (_Staking *StakingFilterer) FilterMerkleRootChanged(opts *bind.FilterOpts) (*StakingMerkleRootChangedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "MerkleRootChanged")
	if err != nil {
		return nil, err
	}
	return &StakingMerkleRootChangedIterator{contract: _Staking.contract, event: "MerkleRootChanged", logs: logs, sub: sub}, nil
}

// WatchMerkleRootChanged is a free log subscription operation binding the contract event 0x1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c.
//
// Solidity: event MerkleRootChanged(bytes32 newMerkleRoot)
func (_Staking *StakingFilterer) WatchMerkleRootChanged(opts *bind.WatchOpts, sink chan<- *StakingMerkleRootChanged) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "MerkleRootChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingMerkleRootChanged)
				if err := _Staking.contract.UnpackLog(event, "MerkleRootChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMerkleRootChanged is a log parse operation binding the contract event 0x1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c.
//
// Solidity: event MerkleRootChanged(bytes32 newMerkleRoot)
func (_Staking *StakingFilterer) ParseMerkleRootChanged(log types.Log) (*StakingMerkleRootChanged, error) {
	event := new(StakingMerkleRootChanged)
	if err := _Staking.contract.UnpackLog(event, "MerkleRootChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the Staking contract.
type StakingMigratedIterator struct {
	Event *StakingMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingMigrated represents a Migrated event raised by the Staking contract.
type StakingMigrated struct {
	Staker           common.Address
	Principal        *big.Int
	BaseReward       *big.Int
	DelegationReward *big.Int
	Data             []byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0x667838b33bdc898470de09e0e746990f2adc11b965b7fe6828e502ebc39e0434.
//
// Solidity: event Migrated(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward, bytes data)
func (_Staking *StakingFilterer) FilterMigrated(opts *bind.FilterOpts) (*StakingMigratedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return &StakingMigratedIterator{contract: _Staking.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0x667838b33bdc898470de09e0e746990f2adc11b965b7fe6828e502ebc39e0434.
//
// Solidity: event Migrated(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward, bytes data)
func (_Staking *StakingFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *StakingMigrated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingMigrated)
				if err := _Staking.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrated is a log parse operation binding the contract event 0x667838b33bdc898470de09e0e746990f2adc11b965b7fe6828e502ebc39e0434.
//
// Solidity: event Migrated(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward, bytes data)
func (_Staking *StakingFilterer) ParseMigrated(log types.Log) (*StakingMigrated, error) {
	event := new(StakingMigrated)
	if err := _Staking.contract.UnpackLog(event, "Migrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMigrationTargetAcceptedIterator is returned from FilterMigrationTargetAccepted and is used to iterate over the raw logs and unpacked data for MigrationTargetAccepted events raised by the Staking contract.
type StakingMigrationTargetAcceptedIterator struct {
	Event *StakingMigrationTargetAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingMigrationTargetAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingMigrationTargetAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingMigrationTargetAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingMigrationTargetAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingMigrationTargetAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingMigrationTargetAccepted represents a MigrationTargetAccepted event raised by the Staking contract.
type StakingMigrationTargetAccepted struct {
	MigrationTarget common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMigrationTargetAccepted is a free log retrieval operation binding the contract event 0xfa33c052bbee754f3c0482a89962daffe749191fa33c696a61e947fbfd68bd84.
//
// Solidity: event MigrationTargetAccepted(address migrationTarget)
func (_Staking *StakingFilterer) FilterMigrationTargetAccepted(opts *bind.FilterOpts) (*StakingMigrationTargetAcceptedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "MigrationTargetAccepted")
	if err != nil {
		return nil, err
	}
	return &StakingMigrationTargetAcceptedIterator{contract: _Staking.contract, event: "MigrationTargetAccepted", logs: logs, sub: sub}, nil
}

// WatchMigrationTargetAccepted is a free log subscription operation binding the contract event 0xfa33c052bbee754f3c0482a89962daffe749191fa33c696a61e947fbfd68bd84.
//
// Solidity: event MigrationTargetAccepted(address migrationTarget)
func (_Staking *StakingFilterer) WatchMigrationTargetAccepted(opts *bind.WatchOpts, sink chan<- *StakingMigrationTargetAccepted) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "MigrationTargetAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingMigrationTargetAccepted)
				if err := _Staking.contract.UnpackLog(event, "MigrationTargetAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrationTargetAccepted is a log parse operation binding the contract event 0xfa33c052bbee754f3c0482a89962daffe749191fa33c696a61e947fbfd68bd84.
//
// Solidity: event MigrationTargetAccepted(address migrationTarget)
func (_Staking *StakingFilterer) ParseMigrationTargetAccepted(log types.Log) (*StakingMigrationTargetAccepted, error) {
	event := new(StakingMigrationTargetAccepted)
	if err := _Staking.contract.UnpackLog(event, "MigrationTargetAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMigrationTargetProposedIterator is returned from FilterMigrationTargetProposed and is used to iterate over the raw logs and unpacked data for MigrationTargetProposed events raised by the Staking contract.
type StakingMigrationTargetProposedIterator struct {
	Event *StakingMigrationTargetProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingMigrationTargetProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingMigrationTargetProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingMigrationTargetProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingMigrationTargetProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingMigrationTargetProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingMigrationTargetProposed represents a MigrationTargetProposed event raised by the Staking contract.
type StakingMigrationTargetProposed struct {
	MigrationTarget common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMigrationTargetProposed is a free log retrieval operation binding the contract event 0x5c74c441be501340b2713817a6c6975e6f3d4a4ae39fa1ac0bf75d3c54a0cad3.
//
// Solidity: event MigrationTargetProposed(address migrationTarget)
func (_Staking *StakingFilterer) FilterMigrationTargetProposed(opts *bind.FilterOpts) (*StakingMigrationTargetProposedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "MigrationTargetProposed")
	if err != nil {
		return nil, err
	}
	return &StakingMigrationTargetProposedIterator{contract: _Staking.contract, event: "MigrationTargetProposed", logs: logs, sub: sub}, nil
}

// WatchMigrationTargetProposed is a free log subscription operation binding the contract event 0x5c74c441be501340b2713817a6c6975e6f3d4a4ae39fa1ac0bf75d3c54a0cad3.
//
// Solidity: event MigrationTargetProposed(address migrationTarget)
func (_Staking *StakingFilterer) WatchMigrationTargetProposed(opts *bind.WatchOpts, sink chan<- *StakingMigrationTargetProposed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "MigrationTargetProposed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingMigrationTargetProposed)
				if err := _Staking.contract.UnpackLog(event, "MigrationTargetProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrationTargetProposed is a log parse operation binding the contract event 0x5c74c441be501340b2713817a6c6975e6f3d4a4ae39fa1ac0bf75d3c54a0cad3.
//
// Solidity: event MigrationTargetProposed(address migrationTarget)
func (_Staking *StakingFilterer) ParseMigrationTargetProposed(log types.Log) (*StakingMigrationTargetProposed, error) {
	event := new(StakingMigrationTargetProposed)
	if err := _Staking.contract.UnpackLog(event, "MigrationTargetProposed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferRequestedIterator is returned from FilterOwnershipTransferRequested and is used to iterate over the raw logs and unpacked data for OwnershipTransferRequested events raised by the Staking contract.
type StakingOwnershipTransferRequestedIterator struct {
	Event *StakingOwnershipTransferRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferRequested represents a OwnershipTransferRequested event raised by the Staking contract.
type StakingOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferRequested is a free log retrieval operation binding the contract event 0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278.
//
// Solidity: event OwnershipTransferRequested(address indexed from, address indexed to)
func (_Staking *StakingFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StakingOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferRequestedIterator{contract: _Staking.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferRequested is a free log subscription operation binding the contract event 0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278.
//
// Solidity: event OwnershipTransferRequested(address indexed from, address indexed to)
func (_Staking *StakingFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferRequested)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferRequested is a log parse operation binding the contract event 0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278.
//
// Solidity: event OwnershipTransferRequested(address indexed from, address indexed to)
func (_Staking *StakingFilterer) ParseOwnershipTransferRequested(log types.Log) (*StakingOwnershipTransferRequested, error) {
	event := new(StakingOwnershipTransferRequested)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Staking contract.
type StakingOwnershipTransferredIterator struct {
	Event *StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferred represents a OwnershipTransferred event raised by the Staking contract.
type StakingOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed from, address indexed to)
func (_Staking *StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StakingOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferredIterator{contract: _Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed from, address indexed to)
func (_Staking *StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferred)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed from, address indexed to)
func (_Staking *StakingFilterer) ParseOwnershipTransferred(log types.Log) (*StakingOwnershipTransferred, error) {
	event := new(StakingOwnershipTransferred)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Staking contract.
type StakingPausedIterator struct {
	Event *StakingPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingPaused represents a Paused event raised by the Staking contract.
type StakingPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Staking *StakingFilterer) FilterPaused(opts *bind.FilterOpts) (*StakingPausedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StakingPausedIterator{contract: _Staking.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Staking *StakingFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StakingPaused) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingPaused)
				if err := _Staking.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Staking *StakingFilterer) ParsePaused(log types.Log) (*StakingPaused, error) {
	event := new(StakingPaused)
	if err := _Staking.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Staker     common.Address
	NewStake   *big.Int
	TotalStake *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address staker, uint256 newStake, uint256 totalStake)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts) (*StakingStakedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address staker, uint256 newStake, uint256 totalStake)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address staker, uint256 newStake, uint256 totalStake)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Staking contract.
type StakingUnpausedIterator struct {
	Event *StakingUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnpaused represents a Unpaused event raised by the Staking contract.
type StakingUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Staking *StakingFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StakingUnpausedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StakingUnpausedIterator{contract: _Staking.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Staking *StakingFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StakingUnpaused) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnpaused)
				if err := _Staking.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Staking *StakingFilterer) ParseUnpaused(log types.Log) (*StakingUnpaused, error) {
	event := new(StakingUnpaused)
	if err := _Staking.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnstakedIterator is returned from FilterUnstaked and is used to iterate over the raw logs and unpacked data for Unstaked events raised by the Staking contract.
type StakingUnstakedIterator struct {
	Event *StakingUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnstaked represents a Unstaked event raised by the Staking contract.
type StakingUnstaked struct {
	Staker           common.Address
	Principal        *big.Int
	BaseReward       *big.Int
	DelegationReward *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUnstaked is a free log retrieval operation binding the contract event 0x204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00.
//
// Solidity: event Unstaked(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward)
func (_Staking *StakingFilterer) FilterUnstaked(opts *bind.FilterOpts) (*StakingUnstakedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Unstaked")
	if err != nil {
		return nil, err
	}
	return &StakingUnstakedIterator{contract: _Staking.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

// WatchUnstaked is a free log subscription operation binding the contract event 0x204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00.
//
// Solidity: event Unstaked(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward)
func (_Staking *StakingFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *StakingUnstaked) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Unstaked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnstaked)
				if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstaked is a log parse operation binding the contract event 0x204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00.
//
// Solidity: event Unstaked(address staker, uint256 principal, uint256 baseReward, uint256 delegationReward)
func (_Staking *StakingFilterer) ParseUnstaked(log types.Log) (*StakingUnstaked, error) {
	event := new(StakingUnstaked)
	if err := _Staking.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
