# An example template that you can use for your own .env file for integration test settings
# `source ./integration-tests/.env`

########## General Test Settings ##########
export KEEP_ENVIRONMENTS="Never" # Always | OnFail | Never
export CHAINLINK_IMAGE="public.ecr.aws/chainlink/chainlink" # Image repo to pull the Chainlink image from
export CHAINLINK_VERSION="1.13.0" # Version of the Chainlink image to pull
export CHAINLINK_ENV_USER="Satoshi-Nakamoto" # Name of the person running the tests (change to your own)
export TEST_LOG_LEVEL="info" # info | debug | trace

########## Soak/Chaos/Load Test Specific Settings ##########
# Remote Runner
export ENV_JOB_IMAGE="image-location/chainlink-tests:test-tag" # Image repo to pull the remote-test-runner image from. Check the Integration Tests workflow.
export DETACH_RUNNER="true" # true 99% of the time, false if you are debugging soak test issues
export TEST_SUITE="soak" # soak | chaos | load

# Slack Notification Settings
export SLACK_API_KEY="xoxb-example-key" # API key used to report soak test results to slack
export SLACK_CHANNEL="C000000000" # Channel ID for the slack bot to post test results
export SLACK_USER="U000000000" # User ID of the person running the soak tests to properly notify them

# OCR Soak Test Settings
export OCR_TEST_DURATION="15m" # For an OCRv1 soak test, how long to run the test for
export OCR_CHAINLINK_NODE_FUNDING=".01" # For an OCRv1 soak test, how much ETH to send to each node
export OCR_TIME_BETWEEN_ROUNDS="1m" # For an OCRv1 soak test, how long to wait between starting new rounds 

# Node Version Upgrade Settings
export TEST_UPGRADE_IMAGE="" # Image path to use for the node version upgrade test, likely empty
export TEST_UPGRADE_VERSION="2.0.0" # Version of the Chainlink image to upgrade to for upgrade tests. Should be newer than the current version

########## Network Settings ##########

# Select a pre-defined network(s)
export SELECTED_NETWORKS="SIMULATED"

# General private values that will be retrieved when running on non-simulated networks
export EVM_URLS="wss://evm.url,wss://other.url" # Comma-sparated list of websocket URLs to use when running on live networks
export EVM_HTTP_URLS="https://evm.url,https://other.url" # Comma-sparated list of HTTP URLs to use when running on live networks
export EVM_KEYS="private,funding,keys" # Comma-separated list of private keys to use when running on live networks

# Specific private values retrieved when running on specified chains
# Goerli
export GOERLI_URLS="wss://goerli.io/ws"
export GOERLI_HTTP_URLS="http://goerli.io/ws"
export GOERLI_KEYS="goerli,funding,keys"
# Sepolia
export SEPOLIA_URLS="wss://sepolia.io/ws"
export SEPOLIA_HTTP_URLS="http://sepolia.io/ws"
export SEPOLIA_KEYS="sepolia,funding,keys"
# Klaytn Baobab
export KLAYTN_BAOBAB_URLS="wss://klaytn.io/ws"
export KLAYTN_BAOBAB_HTTP_URLS="http://klaytn.io/ws"
export KLAYTN_BAOBAB_KEYS="klaytn,funding,keys"
# Metis Stardust
export METIS_STARDUST_URLS="wss://metis.io/ws"
export METIS_STARDUST_HTTP_URLS="http://metis.io/ws"
export METIS_STARDUST_KEYS="metis,funding,keys"
# Arbitrum Goerli
export ARBITRUM_GOERLI_URLS="wss://arbitrum.io/ws"
export ARBITRUM_GOERLI_HTTP_URLS="http://arbitrum.io/ws"
export ARBITRUM_GOERLI_KEYS="arbitrum,funding,keys"
# Optimism Goerli
export OPTIMISM_GOERLI_URLS="wss://optimism.io/ws"
export OPTIMISM_GOERLI_HTTP_URLS="http://optimism.io/ws"
export OPTIMISM_GOERLI_KEYS="optimism,funding,keys"

# General EVM Settings, used only for quick prototyping when using GENERAL as the SELECTED_NETWORK
export EVM_NAME="General EVM"
export EVM_CHAIN_ID="1"
export EVM_SIMULATED="false"
export EVM_CHAINLINK_TRANSACTION_LIMIT="5000"
export EVM_TRANSACTION_TIMEOUT="2m"
export EVM_MINIMUM_CONFIRMATIONS="1"
export EVM_GAS_ESTIMATION_BUFFER="1000"