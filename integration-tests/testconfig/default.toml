[Logging]
test_log_collect=false

[Logging.LogStream]
log_targets=["file"]
log_producer_timeout="10s"
log_producer_retry_limit=10

[ChainlinkImage]
postgres_version="15.6"
image="public.ecr.aws/chainlink/chainlink"
version="2.9.1"

[Network]
selected_networks=["simulated"]

[PrivateEthereumNetwork]
ethereum_version="eth1"
execution_layer="geth"

[PrivateEthereumNetwork.EthereumChainConfig]
seconds_per_slot=3
slots_per_epoch=2
genesis_delay=15
validator_count=4
chain_id=1337
addresses_to_fund=["0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"]

[PrivateEthereumNetwork.EthereumChainConfig.HardForkEpochs]
Deneb=500

[Seth]
# enables automatic tracing of all transactions that are decoded via Decode() method
tracing_enabled = false
# saves each tracing result to json file in ./traces/<tx_hash>.json
trace_to_json = false
# number of addresses to be generated and runtime, if set to 0, no addresses will be generated
# each generated address will receive a proportion of native tokens from root private key's balance
# with the value equal to (root_balance / ephemeral_addresses_number) - transfer_fee * ephemeral_addresses_number
ephemeral_addresses_number = 0

# If enabled we will panic when getting transaction options if current key/address has a pending transaction
# That's because the one we are about to send would get queued, possibly for a very long time
pending_nonce_protection_enabled = false

[Seth.nonce_manager]
key_sync_rate_limit_per_sec = 10
key_sync_timeout = "2s"
key_sync_retry_delay = "1s"
key_sync_retries = 10

[[Seth.networks]]
name = "Geth"
chain_id = "1337"
transaction_timeout = "30s"
eip_1559_dynamic_fees = false

# gas limits
transfer_gas_fee = 21_000
# gas limit should be explicitly set only if you are connecting to a node that's incapable of estimating gas limit itself (should only happen for very old versions)
# gas_limit = 8_000_000

# manual settings, used when gas_price_estimation_enabled is false or when it fails
# legacy transactions
gas_price = 1_000_000_000

# EIP-1559 transactions
#eip_1559_dynamic_fees = true
gas_fee_cap = 10_000_000_000
gas_tip_cap = 3_000_000_000

[[Seth.networks]]
name = "Fuji"
chain_id = "43113"
transaction_timeout = "3m"
eip_1559_dynamic_fees = true

# automated gas estimation for live networks
# if set to true we will dynamically estimate gas for every transaction (based on suggested values, priority and congestion rate for last X blocks)
# gas_price_estimation_enabled = true
# number of blocks to use for congestion rate estimation (it will determine buffer added on top of suggested values)
# gas_price_estimation_blocks = 100
# transaction priority, which determines adjustment factor multiplier applied to suggested values (fast - 1.2x, standard - 1x, slow - 0.8x)
# gas_price_estimation_tx_priority = "standard"

# URLs
# if set they will overwrite URLs from EVMNetwork that Seth uses, can be either WS(S) or HTTP(S)
# urls_secret = ["ws://your-ws-url:8546"]

# gas_limits
# gas limit should be explicitly set only if you are connecting to a node that's incapable of estimating gas limit itself (should only happen for very old versions)
# gas_limit = 8_000_000
# transfer_gas_fee is gas limit that will be used, when funding CL nodes and returning funds from there and when funding and returning funds from ephemeral keys
# we use hardcoded value in order to be estimate how much funds are available for sending or returning after tx costs have been paid
transfer_gas_fee = 21_000

# manual settings, used when gas_price_estimation_enabled is false or when it fails
# legacy transactions
gas_price = 30_000_000_000

# EIP-1559 transactions
gas_fee_cap = 30_000_000_000
gas_tip_cap = 1_800_000_000

[[Seth.networks]]
name = "Sepolia"
chain_id = "11155111"
transaction_timeout = "3m"
eip_1559_dynamic_fees = false

# automated gas estimation for live networks
# if set to true we will dynamically estimate gas for every transaction (based on suggested values, priority and congestion rate for last X blocks)
# gas_price_estimation_enabled = true
# number of blocks to use for congestion rate estimation (it will determine buffer added on top of suggested values)
# gas_price_estimation_blocks = 100
# transaction priority, which determines adjustment factor multiplier applied to suggested values (fast - 1.2x, standard - 1x, slow - 0.8x)
# gas_price_estimation_tx_priority = "standard"

# URLs
# if set they will overwrite URLs from EVMNetwork that Seth uses, can be either WS(S) or HTTP(S)
# urls_secret = ["ws://your-ws-url:8546"]

# gas_limits
# gas limit should be explicitly set only if you are connecting to a node that's incapable of estimating gas limit itself (should only happen for very old versions)
# gas_limit = 14_000_000
# transfer_gas_fee is gas limit that will be used, when funding CL nodes and returning funds from there and when funding and returning funds from ephemeral keys
# we use hardcoded value in order to be estimate how much funds are available for sending or returning after tx costs have been paid
transfer_gas_fee = 21_000

# manual settings, used when gas_price_estimation_enabled is false or when it fails
# legacy transactions
gas_price = 50_000_000_000

# EIP-1559 transactions
gas_fee_cap = 45_000_000_000
gas_tip_cap = 10_000_000_000

[[Seth.networks]]
name = "Mumbai"
chain_id = "80001"
transaction_timeout = "3m"
eip_1559_dynamic_fees = true

# automated gas estimation for live networks
# if set to true we will dynamically estimate gas for every transaction (based on suggested values, priority and congestion rate for last X blocks)
# gas_price_estimation_enabled = true
# number of blocks to use for congestion rate estimation (it will determine buffer added on top of suggested values)
# gas_price_estimation_blocks = 100
# transaction priority, which determines adjustment factor multiplier applied to suggested values (fast - 1.2x, standard - 1x, slow - 0.8x)
# gas_price_estimation_tx_priority = "standard"

# URLs
# if set they will overwrite URLs from EVMNetwork that Seth uses, can be either WS(S) or HTTP(S)
# urls_secret = ["ws://your-ws-url:8546"]

# gas_limits
# gas limit should be explicitly set only if you are connecting to a node that's incapable of estimating gas limit itself (should only happen for very old versions)
# gas_limit = 6_000_000
# transfer_gas_fee is gas limit that will be used, when funding CL nodes and returning funds from there and when funding and returning funds from ephemeral keys
# we use hardcoded value in order to be estimate how much funds are available for sending or returning after tx costs have been paid
transfer_gas_fee = 21_000

# manual settings, used when gas_price_estimation_enabled is false or when it fails
# legacy transactions
gas_price = 1_800_000_000

# EIP-1559 transactions
gas_fee_cap = 3_800_000_000
gas_tip_cap = 1_800_000_000

[[Seth.networks]]
name = "zkEVM"
chain_id = "1442"
transaction_timeout = "3m"
eip_1559_dynamic_fees = false

# automated gas estimation for live networks
# if set to true we will dynamically estimate gas for every transaction (based on suggested values, priority and congestion rate for last X blocks)
# gas_price_estimation_enabled = true
# number of blocks to use for congestion rate estimation (it will determine buffer added on top of suggested values)
# gas_price_estimation_blocks = 100
# transaction priority, which determines adjustment factor multiplier applied to suggested values (fast - 1.2x, standard - 1x, slow - 0.8x)
# gas_price_estimation_tx_priority = "standard"

# URLs
# if set they will overwrite URLs from EVMNetwork that Seth uses, can be either WS(S) or HTTP(S)
# urls_secret = ["ws://your-ws-url:8546"]

# gas_limits
# gas limit should be explicitly set only if you are connecting to a node that's incapable of estimating gas limit itself (should only happen for very old versions)
# gas_limit = 9_000_000
# transfer_gas_fee is gas limit that will be used, when funding CL nodes and returning funds from there and when funding and returning funds from ephemeral keys
# we use hardcoded value in order to be estimate how much funds are available for sending or returning after tx costs have been paid
transfer_gas_fee = 21_000

# manual settings, used when gas_price_estimation_enabled is false or when it fails
# legacy transactions
gas_price = 50_000_000

# EIP-1559 transactions
gas_fee_cap = 3_800_000_000
gas_tip_cap = 1_800_000_000