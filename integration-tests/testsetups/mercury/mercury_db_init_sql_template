CREATE TABLE IF NOT EXISTS reports  (
                                            id serial NOT NULL PRIMARY KEY,
                                            feed_id bytea NOT NULL,
                                            price numeric(58,0) NOT NULL,
                                            full_report bytea NOT NULL,
                                            blob bytea NOT NULL,
                                            block_number bigint NOT NULL,
                                            config_digest bytea NOT NULL,
                                            epoch numeric(32) NOT NULL,
                                            round int8 NOT NULL,
                                            observations_timestamp bigint NOT NULL,
                                            transmitting_operator bytea NOT NULL,
                                            created_at timestamptz NOT NULL
    );
    CREATE INDEX IF NOT EXISTS idx_reports_feed_id_block_number ON reports (feed_id, block_number, created_at);
    CREATE UNIQUE INDEX IF NOT EXISTS idx_reports_block_number_config_digest_epoch_round ON reports (block_number, config_digest, epoch, round);
    ALTER TABLE reports ALTER COLUMN epoch TYPE bigint USING epoch::bigint;
    CREATE EXTENSION IF NOT EXISTS btree_gist;
    ALTER TABLE reports RENAME COLUMN block_number TO valid_from_block_number; --Make sure this is before current_block_number for maximum aesthetic pleasure
    ALTER TABLE reports ADD COLUMN current_block_number bigint;
    UPDATE reports SET current_block_number = valid_from_block_number;
    ALTER TABLE reports ALTER COLUMN current_block_number SET NOT NULL;
    ALTER TABLE reports ADD CONSTRAINT valid_from_bn_less_than_equal_current_bn CHECK (valid_from_block_number <= current_block_number);
    ALTER TABLE reports ADD CONSTRAINT no_overlap
    -- for a given feed id, the number in valid_from_block_number and the number in current_block_number must not be a number
    -- that is in the valid_from_block_number to current_block_number range (inclusive) of any other record with that feed id
    EXCLUDE USING gist (feed_ID WITH =, int8range(valid_from_block_number, current_block_number, '[]') WITH &&); -- int8range = bigint range
    DROP INDEX IF EXISTS idx_reports_feed_id_block_number;
    DROP INDEX IF EXISTS idx_reports_block_number_config_digest_epoch_round;
    CREATE INDEX IF NOT EXISTS idx_reports_feed_id_block_number_range ON reports (feed_id, valid_from_block_number, current_block_number, created_at);
    CREATE UNIQUE INDEX IF NOT EXISTS idx_reports_block_number_range_config_digest_epoch_round ON reports (valid_from_block_number, current_block_number, config_digest, epoch, round);
    --GIsT indexes accelerate range operators like &&, which accelerates the range check in the no_overlap constraint
    CREATE INDEX block_lower_upper_idx ON reports USING GIST(feed_id, valid_from_block_number, current_block_number);
    CREATE TABLE users
    (
        id         UUID        NOT NULL PRIMARY KEY,
        secret     TEXT        NOT NULL,
        role       TEXT        NOT NULL CHECK (role IN ('admin', 'user')), -- 0 is the USER role, see INSERT roles below
        disabled   boolean     NOT NULL DEFAULT false,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    CREATE OR REPLACE FUNCTION set_users_last_updated()
        RETURNS trigger AS
    $$
    BEGIN
        -- Set the last_updated column to the current time on update always. This should never be set manually.
        -- This will run on all updates even if the data hasn't changed, but doing a comparison to old is expensive enough for that risk since this table is fully managed by manual input
        NEW.updated_at := NOW();
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    -- This will send a message to the "kill_customer_connections" channel when a user is updated.
    -- Mercury Server listens to this channel, and each instance will close its client connections if the affected client has connections on that instance
    CREATE OR REPLACE FUNCTION notify_kill_customer_connections()
        RETURNS trigger AS
    $$
    BEGIN
        IF TG_OP = 'UPDATE' THEN
            RAISE NOTICE '% has been updated, sending kill message to kill_customer_connections', NEW.id::text;
            PERFORM pg_notify('kill_customer_connections', NEW.id::text); --id is a uuid, but the second param of pg_notify requires text, so cast
            RETURN NEW;
        ELSIF TG_OP = 'DELETE' THEN
            RAISE NOTICE '% has been deleted, sending kill message to kill_customer_connections', OLD.id::text;
            PERFORM pg_notify('kill_customer_connections', OLD.id::text); --id is a uuid, but the second param of pg_notify requires text, so cast
            RETURN OLD;
        END IF;

        RAISE NOTICE 'notify_kill_customer_connections() only works on UPDATE and DELETE, not %', TG_OP;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    CREATE TRIGGER update_user_updated_at_timestamp
        BEFORE UPDATE
        ON users
        FOR EACH ROW
    EXECUTE PROCEDURE set_users_last_updated();
    CREATE OR REPLACE TRIGGER update_user_notify_kill_customer_connections_channel
        AFTER UPDATE OR DELETE
        ON users
        FOR EACH ROW
    EXECUTE PROCEDURE notify_kill_customer_connections();
    CREATE INDEX users_created_at_idx ON users (created_at);
    CREATE INDEX users_updated_at_idx ON users (updated_at);
    ALTER TABLE reports ADD COLUMN current_block_hash bytea;
    UPDATE reports SET current_block_hash = ''::bytea;
    ALTER TABLE reports ALTER COLUMN current_block_hash SET NOT NULL;
    ALTER TABLE USERS ADD COLUMN username VARCHAR(255) UNIQUE;
    UPDATE users SET username = id; -- Copy the uuid for the user (id) to the username column so we can set a NOT NULL constraint
    ALTER TABLE users ALTER COLUMN username SET NOT NULL;
    CREATE INDEX IF NOT EXISTS users_username_idx ON users (username);

-- This will send a message to the "new_report_added" channel when a report is created.
-- Mercury Server listens to this channel, and each instance will notify clients about this new report via WS.
CREATE OR REPLACE FUNCTION notify_new_report_added()
    RETURNS trigger AS
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        RAISE NOTICE '% has created, sending notify message to new_report_added', NEW.id::text;
        PERFORM pg_notify('new_report_added', NEW.id::text); --id is an int, but the second param of pg_notify requires text, so cast
        RETURN NEW;
    END IF;

    RAISE NOTICE 'notify_new_report_added() only works on INSERT, not %', TG_OP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER create_report_notify_new_report_added_channel
    AFTER INSERT
    ON reports
    FOR EACH ROW
EXECUTE PROCEDURE notify_new_report_added();

ALTER TABLE reports ADD COLUMN bid NUMERIC(58, 0);
ALTER TABLE reports ADD COLUMN ask NUMERIC(58, 0);
ALTER TABLE reports ADD COLUMN operator_name TEXT;

    {{range .}}
    INSERT INTO users (id, secret, role, disabled, username) VALUES ('{{ .Id }}', '{{ .Secret }}', '{{ .Role }}', '{{ .Disabled }}', '{{ .Id }}');
    {{end}}