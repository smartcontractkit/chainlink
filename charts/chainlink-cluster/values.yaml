# override resources for keys "chainlink", "db", or "geth" if needed
#  resources:
#    requests:
#      cpu: 350m
#      memory: 1024Mi
#    limits:
#      cpu: 350m
#      memory: 1024Mi
# images can be overriden for the same keys:
#   image: ethereum/client-go
#   version: stable
chainlink:
  podSecurityContext:
    fsGroup: 14933
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 14933
    runAsGroup: 14933
  web_port: 6688
  p2p_port: 6690
  nodes:
    - name: node-1
      image: "public.ecr.aws/chainlink/chainlink:latest"
      # default resources are 300m/1Gi
      # first node need more resources to build faster inside container
      # at least 2Gi of memory is required otherwise build will fail (OOM)
      resources:
        requests:
          cpu: 2000m
          memory: 2048Mi
        limits:
          cpu: 2000m
          memory: 2048Mi
    # override default config per node
    # for example, use OCRv2 P2P setup, the whole config
    #      toml: |
    #        RootDir = './clroot'
    #        [Log]
    #        JSONConsole = true
    #        Level = 'debug'
    #        [WebServer]
    #        AllowOrigins = '*'
    #        SecureCookies = false
    #        SessionTimeout = '999h0m0s'
    #        [OCR2]
    #        Enabled = true
    #        [P2P]
    #        [P2P.V2]
    #        Enabled = false
    #        AnnounceAddresses = []
    #        DefaultBootstrappers = []
    #        DeltaDial = '15s'
    #        DeltaReconcile = '1m0s'
    #        ListenAddresses = []
    #        [[EVM]]
    #        ChainID = '1337'
    #        MinContractPayment = '0'
    #        [[EVM.Nodes]]
    #        Name = 'node-0'
    #        WSURL = 'ws://geth:8546'
    #        HTTPURL = 'http://geth:8544'
    #        [WebServer.TLS]
    #        HTTPSPort = 0
    # or use overridesToml to override some part of configuration
    #      overridesToml: |
    - name: node-2
    - name: node-3
    - name: node-4
    - name: node-5
    - name: node-6
  resources:
    requests:
      cpu: 350m
      memory: 1024Mi
    limits:
      cpu: 350m
      memory: 1024Mi

# each CL node have a dedicated PostgreSQL 11.15
# use StatefulSet by setting:
#
# stateful: true
# capacity 10Gi
#
# if you are running long tests
db:
  podSecurityContext:
    fsGroup: 999
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
  stateful: false
  resources:
    requests:
      cpu: 1
      memory: 1024Mi
    limits:
      cpu: 1
      memory: 1024Mi
# default cluster shipped with latest Geth ( dev mode by default )
geth:
  podSecurityContext:
    fsGroup: 999
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
  version: v1.12.0
  wsrpc-port: 8546
  httprpc-port: 8544
  networkid: 1337
  blocktime: 1
  resources:
    requests:
      cpu: 1
      memory: 1024Mi
    limits:
      cpu: 1
      memory: 1024Mi
# mockserver is https://www.mock-server.com/where/kubernetes.html
# used to stub External Adapters
mockserver:
  enabled: true
  releasenameOverride: mockserver
  service:
    type: ClusterIP
  app:
    runAsUser: 999
    readOnlyRootFilesystem: false
  port: 1080
  resources:
    requests:
      cpu: 1
      memory: 1024Mi
    limits:
      cpu: 1
      memory: 1024Mi
runner:
  podSecurityContext:
    fsGroup: 999
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
  stateful: false
  resources:
    requests:
      cpu: 1
      memory: 512Mi
    limits:
      cpu: 1
      memory: 512Mi
  affinity: {}
  tolerations: []
  nodeSelector: {}
  ingress:
    enabled: false
    className: ""
    hosts: []
    tls: []
    annotations: {}
  service:
    type: NodePort
    port: 8080

ingress:
  enabled: false
  annotations: {}
  ingressClassName: alb
  hosts:
    - host: chainlink-node-1.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-1
                port:
                  number: 6688
    - host: chainlink-node-2.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-2
                port:
                  number: 6688
    - host: chainlink-node-3.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-3
                port:
                  number: 6688
    - host: chainlink-node-4.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-4
                port:
                  number: 6688
    - host: chainlink-node-5.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-5
                port:
                  number: 6688
    - host: chainlink-node-6.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: chainlink-node-6
                port:
                  number: 6688
    - host: chainlink-geth-http.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: geth
                port:
                  number: 8544
    - host: chainlink-geth-ws.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: geth
                port:
                  number: 8546
    - host: chainlink-mockserver.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: mockserver
                port:
                  number: 1080
# monitoring.coreos.com/v1 PodMonitor for each node
prometheusMonitor: true

# deployment placement, standard helm stuff
podAnnotations:
nodeSelector:
tolerations:
affinity:
