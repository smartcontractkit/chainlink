version: v2beta1
name: chainlink

vars:
  NS_TTL: 72h
  DEVSPACE_IMAGE:
    source: env

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  #       create_deployments --all  can be used to apply manifests again
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      start_dev app                # 3. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                           
      ensure_pull_secrets --all                         
      build_images ---var DOCKER_DEFAULT_PLATFORM=linux/amd64  --all -t $(git rev-parse --short HEAD)
      kubectl annotate namespace ${DEVSPACE_NAMESPACE} janitor/ttl=${NS_TTL}
      kubectl label namespace/${DEVSPACE_NAMESPACE} network=crib
      create_deployments --all                          
      echo "Namespace ${DEVSPACE_NAMESPACE} will be deleted in ${NS_TTL}"
  purge:
    run: |-
      kubectl delete ns ${DEVSPACE_NAMESPACE}

commands:
  connect: |-
    sudo kubefwd svc -n ${DEVSPACE_NAMESPACE}

images:
  app:
    image: ${DEVSPACE_IMAGE}
    dockerfile: ../../core/chainlink.devspace.Dockerfile
    context: ../..
    docker:
      disableFallback: true

hooks:
  - wait:
      running: true
      terminatedWithCode: 0
      timeout: 600
    container:
      labelSelector:
        # vars don't work here, = releaseName
        release: "app"
    events: ["after:deploy:app"]
    name: "wait-for-pod-hook"

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    namespace: ${DEVSPACE_NAMESPACE}
    helm:
      releaseName: "app"
      chart:
        name: cl-cluster
        path: .
      # for simplicity, we define all the values here
      # they can be defined the same way in values.yml
      # devspace merging this "values" and "values.yml" before deploy
      values:
        podSecurityContext:
          fsGroup: 999

        chainlink:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 14933
            runAsGroup: 999
          web_port: 6688
          p2p_port: 6690
          nodes:
            - name: node-1
              image: ${DEVSPACE_IMAGE}
              version: latest
              # default resources are 300m/1Gi
              # first node need more resources to build faster inside container
              # at least 2Gi of memory is required otherwise build will fail (OOM)
              resources:
                requests:
                  cpu: 2000m
                  memory: 2048Mi
                limits:
                  cpu: 2000m
                  memory: 2048Mi
              # override default config per node
              # for example, use OCRv2 P2P setup, the whole config
              #      toml: |
              #        RootDir = './clroot'
              #        [Log]
              #        JSONConsole = true
              #        Level = 'debug'
              #        [WebServer]
              #        AllowOrigins = '*'
              #        SecureCookies = false
              #        SessionTimeout = '999h0m0s'
              #        [OCR2]
              #        Enabled = true
              #        [P2P]
              #        [P2P.V2]
              #        Enabled = false
              #        AnnounceAddresses = []
              #        DefaultBootstrappers = []
              #        DeltaDial = '15s'
              #        DeltaReconcile = '1m0s'
              #        ListenAddresses = []
              #        [[EVM]]
              #        ChainID = '1337'
              #        MinContractPayment = '0'
              #        [[EVM.Nodes]]
              #        Name = 'node-0'
              #        WSURL = 'ws://geth:8546'
              #        HTTPURL = 'http://geth:8544'
              #        [WebServer.TLS]
              #        HTTPSPort = 0
              # or use overridesToml to override some part of configuration
              #      overridesToml: |
            - name: node-2
              image: ${DEVSPACE_IMAGE}
              version: latest
            - name: node-3
              image: ${DEVSPACE_IMAGE}
              version: latest
            - name: node-4
              image: ${DEVSPACE_IMAGE}
              version: latest
            - name: node-5
              image: ${DEVSPACE_IMAGE}
              version: latest
            - name: node-6
              image: ${DEVSPACE_IMAGE}
              version: latest

        # each CL node have a dedicated PostgreSQL 11.15
        # use StatefulSet by setting:
        #
        # stateful: true
        # capacity 10Gi
        #
        # if you are running long tests
        db:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          stateful: false
          resources:
            requests:
              cpu: 1
              memory: 1024Mi
            limits:
              cpu: 1
              memory: 1024Mi
        # default cluster shipped with latest Geth ( dev mode by default )
        geth:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          version: v1.12.0
          wsrpc-port: 8546
          httprpc-port: 8544
          networkid: 1337
          blocktime: 1
          resources:
            requests:
              cpu: 1
              memory: 1024Mi
            limits:
              cpu: 1
              memory: 1024Mi
        # mockserver is https://www.mock-server.com/where/kubernetes.html
        # used to stub External Adapters
        mockserver:
          #  image: "mockserver/mockserver"
          #  version: "mockserver-5.15.0"
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          enabled: true
          releasenameOverride: mockserver
          app:
            runAsUser: 999
            readOnlyRootFilesystem: false
          port: 1080
          resources:
            requests:
              cpu: 1
              memory: 1024Mi
            limits:
              cpu: 1
              memory: 1024Mi
        runner:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          stateful: false
          resources:
            requests:
              cpu: 1
              memory: 512Mi
            limits:
              cpu: 1
              memory: 512Mi
          affinity: { }
          tolerations: [ ]
          nodeSelector: { }
          ingress:
            enabled: false
            className: ""
            hosts: [ ]
            tls: [ ]
            annotations: { }
          service:
            type: NodePort
            port: 8080


        # monitoring.coreos.com/v1 PodMonitor for each node
        prometheusMonitor: true

        # deployment placement, standard helm stuff
        podAnnotations:
        nodeSelector:
        tolerations:
        affinity:

profiles:
  # this replaces only "runner" pod, usable when you'd like to run some system level tests inside k8s
  - name: runner
    patches:
      - op: replace
        path: dev.app.workingDir
        value: /home/chainlink/integration-tests
      - op: replace
        path: dev.app.container
        value: runner
      - op: replace
        path: dev.app.labelSelector.instance
        value: runner-1
      - op: remove
        path: dev.app.sync[1].uploadExcludePaths[0]
      - op: remove
        path: dev.app.open
      - op: remove
        path: dev.app.ports[1]
  - name: node
    patches:
      - op: replace
        path: dev.app.container
        value: node
      - op: replace
        path: dev.app.labelSelector.instance
        value: node-1

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    workingDir: /home/chainlink
    container: node
    labelSelector:
      instance: node-1
    # Sync files between the local filesystem and the development container
    sync:
      - path: ../../core/services/chainlink:/home/chainlink/core/services/chainlink
        printLogs: true
        disableDownload: true
      - path: ../..:/home/chainlink
        printLogs: true
        disableDownload: true
        uploadExcludePaths:
          - integration-tests/
          - .github/
          - belt/
          - charts/
          - contracts/
          - node_modules/
          - integration/
          - integration-scripts/
          - testdata/
          - evm-test-helpers/
    # Open a terminal and use the following command
    terminal:
      command: bash
    ssh:
      enabled: true
    proxyCommands:
#       TODO: access issues
#      - command: devspace
#      - command: kubectl
#      - command: helm
      - gitCredentials: true
    ports:
      - port: "2345"
