{{- range $cfg := .Values.chainlink.nodes }}
apiVersion: apps/v1
{{ if $.Values.db.stateful }}
kind: StatefulSet
{{ else }}
kind: Deployment
{{ end }}
metadata:
  name: {{ $.Release.Name }}-{{ $cfg.name }}
spec:
  {{ if $.Values.db.stateful }}
  serviceName: {{ $.Release.Name }}-{{ $cfg.name }}-service
  podManagementPolicy: Parallel
  volumeClaimTemplates:
    - metadata:
        name: postgres
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.db.capacity }}
  {{ end }}
  selector:
    matchLabels:
      app: {{ $.Release.Name }}
      instance: {{ $cfg.name }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}
        instance: {{ $cfg.name }}
        release: {{ $.Release.Name }}
        {{- range $key, $value := $.Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
        {{- range $key, $value := $.Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      volumes:
        - name: {{ $.Release.Name }}-{{ $cfg.name }}-cm
          configMap:
            name: {{ $.Release.Name }}-{{ $cfg.name }}-cm
      containers:
        - name: chainlink-db
          image: {{ default "postgres:11.15" $.Values.db.image }}
          command:
            - docker-entrypoint.sh
          args:
            - "-c"
            - "shared_preload_libraries=pg_stat_statements"
            - "-c"
            - "pg_stat_statements.track=all"
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: chainlink
            - name: POSTGRES_PASSWORD
              value: verylongdatabasepassword
            - name: PGPASSWORD
              value: verylongdatabasepassword
            - name: PGUSER
              value: postgres
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "while $(psql -d chainlink -c \"SELECT COUNT(*) FROM pg_stat_activity WHERE datname = 'chainlink' AND state = 'active';\" -tA ); echo \"waiting for connection to become 0\"; sleep 10; fi; done" ]
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          startupProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 20
          {{ if (hasKey $.Values.db "resources") }}
          resources:
            requests:
              memory: {{ default "256Mi" $.Values.db.resources.requests.memory }}
              cpu: {{ default "250m" $.Values.db.resources.requests.cpu }}
            limits:
              memory: {{ default "256Mi" $.Values.db.resources.limits.memory }}
              cpu: {{ default "250m" $.Values.db.resources.limits.cpu }}
          {{ else }}
          {{ end }}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d/init.sql
              name: {{ $.Release.Name }}-{{ $cfg.name }}-cm
              subPath: init.sql
          {{ if $.Values.db.stateful }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres
              subPath: postgres-db
          {{ end }}
        - name: node
          image: {{ default "public.ecr.aws/chainlink/chainlink" $cfg.image }}
          imagePullPolicy: Always
          command: ["bash", "-c", "while ! pg_isready --host 0.0.0.0 --port 5432; do echo \"waiting for database to start\"; sleep 1; done && chainlink -c /etc/node-secrets-volume/default.toml -c /etc/node-secrets-volume/overrides.toml -secrets /etc/node-secrets-volume/secrets.toml node start -d -p /etc/node-secrets-volume/node-password -a /etc/node-secrets-volume/apicredentials --vrfpassword=/etc/node-secrets-volume/apicredentials"]
          ports:
            - name: access
              containerPort: {{ $.Values.chainlink.web_port }}
            - name: p2p
              containerPort: {{ $.Values.chainlink.p2p_port }}
          env:
            - name: CL_DATABASE_URL
              value: postgresql://postgres:verylongdatabasepassword@0.0.0.0/chainlink?sslmode=disable
            - name: CL_DEV
              value: "false"
          volumeMounts:
            - name: {{ $.Release.Name }}-{{ $cfg.name }}-cm
              mountPath: /etc/node-secrets-volume/
          livenessProbe:
            httpGet:
              path: /health
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 20
          {{ if (hasKey $.Values.chainlink "resources") }}
          resources:
            requests:
              memory: {{ default "1024Mi" $.Values.chainlink.resources.requests.memory }}
              cpu: {{ default "500m" $.Values.chainlink.resources.requests.cpu }}
            limits:
              memory: {{ default "1024Mi" $.Values.chainlink.resources.limits.memory }}
              cpu: {{ default "500m" $.Values.chainlink.resources.limits.cpu }}
          {{ else }}
          {{ end }}
{{- with $.Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | indent 8 }}
{{- end }}
{{- with $.Values.affinity }}
      affinity:
        {{ toYaml . | indent 8 }}
{{- end }}
{{- with $.Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
---
{{- end }}